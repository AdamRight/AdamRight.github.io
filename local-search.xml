<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>量化杂记</title>
    <link href="/2021/04/07/46.%E9%87%8F%E5%8C%96%E6%9D%82%E8%AE%B0/"/>
    <url>/2021/04/07/46.%E9%87%8F%E5%8C%96%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="启动jupyter"><a href="#启动jupyter" class="headerlink" title="启动jupyter"></a>启动jupyter</h2><hr><p>启动：<code>jupyter notebook</code></p><p>回测：Zipline</p><hr><h2 id="pandas基础"><a href="#pandas基础" class="headerlink" title="pandas基础"></a>pandas基础</h2><hr><p>pandas基础：</p><pre><code># -*- coding: utf-8 -*-&quot;&quot;&quot;程序开头注释功能：本程序主要介绍pandas最最常用的一些方法。这些方法在之后的课程、作业中都会用到。&quot;&quot;&quot;import pandas as pd  # 将pandas作为第三方库导入，我们一般为pandas取一个别名叫做pd# =====导入数据df = pd.read_csv(    # 该参数为数据在电脑中的路径，可以不填写    filepath_or_buffer=&apos;/Users/jxing/Desktop/201704课程/20170423_class3/data/sz000002.csv&apos;,    # 该参数代表数据的分隔符，csv文件默认是逗号。其他常见的是&apos;\t&apos;    sep=&apos;,&apos;,    # 该参数代表跳过数据文件的的第1行不读入    skiprows=1,    # nrows，只读取前n行数据，若不指定，读入全部的数据    nrows=15,    # 将指定列的数据识别为日期格式。若不指定，时间数据将会以字符串形式读入。一开始先不用。    # parse_dates=[&apos;交易日期&apos;],    # 将指定列设置为index。若不指定，index默认为0, 1, 2, 3, 4...    # index_col=[&apos;交易日期&apos;],    # 读取指定的这几列数据，其他数据不读取。若不指定，读入全部列    usecols=[&apos;交易日期&apos;, &apos;股票代码&apos;, &apos;股票名称&apos;, &apos;收盘价&apos;, &apos;涨跌幅&apos;, &apos;成交量&apos;, &apos;新浪概念&apos;, &apos;MACD_金叉死叉&apos;],    # 当某行数据有问题时，报错。设定为False时即不报错，直接跳过该行。当数据比较脏乱的时候用这个。    error_bad_lines=False,    # 将数据中的null识别为空值    na_values=&apos;NULL&apos;,    # 更多其他参数，请直接搜索&quot;pandas read_csv&quot;，要去逐个查看一下。比较重要的，header等)# print df# 使用read_csv导入数据非常方便# 导入的数据的数据类型是DataFrame。# 导入数据主要使用read系列函数# 还有read_table、read_excel、read_json等，他们的参数内容都是大同小异，可以自行搜索查看。# =====看数据# print df.shape  # 输出dataframe有多少行、多少列。# print df.shape[0]  # 取行数量，相应的列数量就是df.shape[1]# print df.columns  # 顺序输出每一列的名字，演示如何for语句遍历。# print df.index  # 顺序输出每一行的名字，可以for语句遍历。# print df.dtypes  # 数据每一列的类型不一样，比如数字、字符串、日期等。该方法输出每一列变量类型# print df.head(3)  # 看前3行的数据，默认是5。与自然语言很接近# print df.tail(3)  # 看最后3行的数据，默认是5。# print df.sample(n=3)  # 随机抽取3行，想要去固定比例的话，可以用frac参数# print df.describe()  # 非常方便的函数，对每一列数据有直观感受；只会对数字类型的列有效# 对print出的数据格式进行修正# pd.set_option(&apos;expand_frame_repr&apos;, False)  # 当列太多时不换行# pd.set_option(&apos;max_colwidth&apos;, 8) # 设定每一列的最大宽度，恢复原设置的方法，pd.reset_option(&apos;max_colwidth&apos;)# 更多设置请见http://pandas.pydata.org/pandas-docs/stable/options.html# =====如何选取指定的行、列# print df[&apos;股票代码&apos;]  # 根据列名称来选取，读取的数据是Series类型# print df[[&apos;股票代码&apos;, &apos;收盘价&apos;]]  # 同时选取多列，需要两个括号，读取的数据是DataFrame类型# print df[[0, 1, 2]]  # 也可以通过列的position来选取# loc操作：通过label（columns和index的名字）来读取数据# print df.loc[&apos;12/12/2016&apos;]  # 选取指定的某一行，读取的数据是Series类型# print df.loc[&apos;13/12/2016&apos;: &apos;06/12/2016&apos;]  # 选取在此范围内的多行，和在list中slice操作类似，读取的数据是DataFrame类型# print df.loc[:, &apos;股票代码&apos;:&apos;收盘价&apos;]  # 选取在此范围内的多列，读取的数据是DataFrame类型# print df.loc[&apos;13/12/2016&apos;: &apos;06/12/2016&apos;, &apos;股票代码&apos;:&apos;收盘价&apos;]  # 读取指定的多行、多列。逗号之前是行的范围，逗号之后是列的范围。读取的数据是DataFrame类型# print df.loc[:, :]  # 读取所有行、所有列，读取的数据是DataFrame类型# print df.at[&apos;12/12/2016&apos;, &apos;股票代码&apos;]  # 使用at读取指定的某个元素。loc也行，但是at更高效。# iloc操作：通过position来读取数据# print df.iloc[0]  # 以index选取某一行，读取的数据是Series类型# print df.iloc[1:3]  # 选取在此范围内的多行，读取的数据是DataFrame类型# print df.iloc[:, 1:3]  # 选取在此范围内的多列，读取的数据是DataFrame类型# print df.iloc[1:3, 1:3]  # 读取指定的多行、多列，读取的数据是DataFrame类型# print df.iloc[:, :]  # 读取所有行、所有列，读取的数据是DataFrame类型# print df.iat[1, 1]  # 使用iat读取指定的某个元素。使用iloc也行，但是iat更高效。# =====列操作# 行列加减乘除# print df[&apos;股票名称&apos;] + &apos;_地产&apos;  # 字符串列可以直接加上字符串，对整列进行操作# print df[&apos;收盘价&apos;] * 100  # 数字列直接加上或者乘以数字，对整列进行操作。# print df[&apos;收盘价&apos;] * df[&apos;成交量&apos;]  # 两列之间可以直接操作。收盘价*成交量计算出的是什么？# 新增一列# df[&apos;股票名称+行业&apos;] = df[&apos;股票名称&apos;] + &apos;_地产&apos;# =====统计函数# print df[&apos;收盘价&apos;].mean()  # 求一整列的均值，返回一个数。会自动排除空值。# print df[[&apos;收盘价&apos;, &apos;成交量&apos;]].mean()  # 求两列的均值，返回两个数，Series# print df[[&apos;收盘价&apos;, &apos;成交量&apos;]]# print df[[&apos;收盘价&apos;, &apos;成交量&apos;]].mean(axis=1)  # 求两列的均值，返回DataFrame。axis=0或者1要搞清楚。# axis=1，代表对整几列进行操作。axis=0（默认）代表对几行进行操作。实际中弄混很正常，到时候试一下就知道了。# print df[&apos;收盘价&apos;].max()  # 最大值# print df[&apos;收盘价&apos;].min()  # 最小值# print df[&apos;收盘价&apos;].std()  # 标准差# print df[&apos;收盘价&apos;].count()  # 非空的数据的数量# print df[&apos;收盘价&apos;].median()  # 中位数# print df[&apos;收盘价&apos;].quantile(0.25)  # 25%分位数# 肯定还有其他的函数计算其他的指标，在实际使用中遇到可以自己搜索# =====shift类函数、删除列的方式# df[&apos;昨天收盘价&apos;] = df[&apos;收盘价&apos;].shift(-1)  # 读取上一行的数据，若参数设定为3，就是读取上三行的数据；若参数设定为-1，就是读取下一行的数据；# print df[[&apos;收盘价&apos;, &apos;昨天收盘价&apos;]]# del df[&apos;昨天收盘价&apos;]  # 删除某一列的方法# df[&apos;涨跌&apos;] = df[&apos;收盘价&apos;].diff(-1)  # 求本行数据和上一行数据相减得到的值# print df[[&apos;收盘价&apos;, &apos;涨跌&apos;]]# df.drop([&apos;涨跌&apos;], axis=1, inplace=True)  # 删除某一列的另外一种方式，inplace参数指是否替代原来的df# print df# df[&apos;涨跌幅_计算&apos;] = df[&apos;收盘价&apos;].pct_change(-1)  # 类似于diff，但是求的是两个数直接的比例，相当于求涨跌幅# =====cum(cumulative)类函数# df[&apos;成交量_cum&apos;] = df[&apos;成交量&apos;].cumsum()  # 该列的累加值# print df[[&apos;成交量&apos;, &apos;成交量_cum&apos;]]# print (df[&apos;涨跌幅&apos;] + 1.0).cumprod()  # 该列的累乘值，此处计算的就是资金曲线，假设初始1元钱。# =====其他列函数# df[&apos;收盘价_排名&apos;] = df[&apos;收盘价&apos;].rank(ascending=True, pct=False)  # 输出排名。ascending参数代表是顺序还是逆序。pct参数代表输出的是排名还是排名比例# print df[[&apos;收盘价&apos;, &apos;收盘价_排名&apos;]]# del df[&apos;收盘价_排名&apos;]# print df[&apos;股票代码&apos;].value_counts()  # 计数。统计该列中每个元素出现的次数。返回的数据是Series# =====筛选操作，根据指定的条件，筛选出相关拿数据。# print df[&apos;股票代码&apos;] == &apos;sh000002&apos;  # 判断股票代码是否等于sz000002# print df[df[&apos;股票代码&apos;] == &apos;sz000002&apos;]  # 将判断为True的输出：选取股票代码等于sz000002的行# print df[df[&apos;股票代码&apos;].isin([&apos;sz000002&apos;, &apos;sz000003 &apos;, &apos;sz000004&apos;])]  # 选取股票代码等于sz000002的行# print df[df[&apos;收盘价&apos;] &gt;= 24.0]  # 选取收盘价大于24的行# print df[(df.index &gt;= &apos;03/12/2016&apos;) &amp; (df.index &lt;= &apos;06/12/2016&apos;)]  # 两个条件，或者的话就是|# =====缺失值处理：原始数据中存在缺失值，如何处理？# 删除缺失值# print df.dropna(how=&apos;any&apos;)  # 将带有空值的行删除。how=&apos;any&apos;意味着，该行中只要有一个空值，就会删除，可以改成all。# print df.dropna(subset=[&apos;MACD_金叉死叉&apos;, &apos;涨跌幅&apos;], how=&apos;all&apos;)  # subset参数指定在特定的列中判断空值。# all代表全部为空，才会删除该行；any只要一个为空，就删除该行。# 补全缺失值# print df.fillna(value=&apos;没有金叉死叉&apos;)  # 直接将缺失值赋值为固定的值# df[&apos;MACD_金叉死叉&apos;].fillna(value=df[&apos;收盘价&apos;], inplace=True)  # 直接将缺失值赋值其他列的数据# print df.fillna(method=&apos;ffill&apos;)  # 向上寻找最近的一个非空值，以该值来填充缺失的位置，全称forward fill，非常有用# print df.fillna(method=&apos;bfill&apos;)  # 向下寻找最近的一个非空值，以该值来填充确实的位置，全称backward fill# 找出缺失值# print df.notnull()  # 判断是否为空值，反向函数为isnull()# print df[df[&apos;MACD_金叉死叉&apos;].notnull()]  # 将&apos;MACD_金叉死叉&apos;列为空的行输出# =====排序函数# df.reset_index(inplace=True)# print df.sort_values(by=[&apos;交易日期&apos;], ascending=1)  # by参数指定按照什么进行排序，acsending参数指定是顺序还是逆序，1顺序，0逆序# print df.sort_values(by=[&apos;股票名称&apos;, &apos;交易日期&apos;], ascending=[1, 1])  # 按照多列进行排序# =====两个df上下合并操作，append操作# df.reset_index(inplace=True)# df1 = df.iloc[0:10][[&apos;交易日期&apos;, &apos;股票代码&apos;, &apos;收盘价&apos;, &apos;涨跌幅&apos;]]# print df1# df2 = df.iloc[5:15][[&apos;交易日期&apos;, &apos;股票名称&apos;, &apos;收盘价&apos;, &apos;涨跌幅&apos;]]# print df2# print df1.append(df2)  # append操作，将df1和df2上下拼接起来。注意观察拼接之后的index# df3 = df1.append(df2, ignore_index=True)  # ignore_index参数，用户重新确定index# print df3# =====对数据进行去重# df3中有重复的行数，我们如何将重复的行数去除？# df3.drop_duplicates(#     subset=[&apos;收盘价&apos;, &apos;交易日期&apos;],  # subset参数用来指定根据哪类类数据来判断是否重复。若不指定，则用全部列的数据来判断是否重复#     keep=&apos;first&apos;,  # 在去除重复值的时候，我们是保留上面一行还是下面一行？first保留上面一行，last保留下面一行，False就是一行都不保留#     inplace=True# )# print df3# =====其他常用重要函数# print df.rename(columns=&#123;&apos;MACD_金叉死叉&apos;: &apos;金叉死叉&apos;, &apos;涨跌幅&apos;: &apos;涨幅&apos;&#125;)  # rename函数给变量修改名字。使用dict将要修改的名字传给columns参数# print df.empty  # 判断一个df是不是为空，此处输出不为空# print pd.DataFrame().empty  # pd.DataFrame()创建一个空的DataFrame，此处输出为空# print df.T  # 将数据转置，行变成列，很有用# =====字符串处理# print df[&apos;股票代码&apos;]# print &apos;sz000002&apos;[:2]# print df[&apos;股票代码&apos;].str[:2]# print df[&apos;股票代码&apos;].str.upper()  # 加上str之后可以使用常见的字符串函数对整列进行操作# print df[&apos;股票代码&apos;].str.lower()# print df[&apos;股票代码&apos;].str.len()  # 计算字符串的长度,length# df[&apos;股票代码&apos;].str.strip()  # strip操作，把字符串两边的空格去掉# print df[&apos;股票代码&apos;].str.contains(&apos;sh&apos;)  # 判断字符串中是否包含某些特定字符# print df[&apos;股票代码&apos;].str.replace(&apos;sz&apos;, &apos;sh&apos;)  # 进行替换，将sz替换成sh# split操作# print df[&apos;新浪概念&apos;].str.split(&apos;；&apos;)  # 对字符串进行分割# print df[&apos;新浪概念&apos;].str.split(&apos;；&apos;).str[:2]  # 分割后取第一个位置# print df[&apos;新浪概念&apos;].str.split(&apos;；&apos;, expand=True)  # 分割后并且将数据分列# # 更多字符串函数请见：http://pandas.pydata.org/pandas-docs/stable/text.html#method-summary# =====时间处理# 导入数据时将index参数注释掉# df[&apos;交易日期&apos;] = pd.to_datetime(df[&apos;交易日期&apos;])  # 将交易日期由字符串改为时间变量# print df[&apos;交易日期&apos;]# print df.iloc[0][&apos;交易日期&apos;]# print df.dtypes# print pd.to_datetime(&apos;1999年01月01日&apos;)  # pd.to_datetime函数：将字符串转变为时间变量# print df.at[0, &apos;交易日期&apos;]# print df[&apos;交易日期&apos;].dt.year  # 输出这个日期的年份。相应的month是月份，day是天数，还有hour, minute, second# print df[&apos;交易日期&apos;].dt.week  # 这一天是一年当中的第几周# print df[&apos;交易日期&apos;].dt.dayofyear  # 这一天是一年当中的第几天# print df[&apos;交易日期&apos;].dt.dayofweek  # 这一天是这一周当中的第几天，0代表星期一# print df[&apos;交易日期&apos;].dt.weekday  # 和上面函数相同，更加常用# print df[&apos;交易日期&apos;].dt.weekday_name  # 和上面函数相同，返回的是星期几的英文，用于报表的制作。# print df[&apos;交易日期&apos;].dt.days_in_month  # 这一天是这一月当中的第几天# print df[&apos;交易日期&apos;].dt.is_month_end  # 这一天是否是该月的开头，是否存在is_month_end？# print df[&apos;交易日期&apos;] + pd.Timedelta(days=1)  # 增加一天，Timedelta用于表示时间差数据# print (df[&apos;交易日期&apos;] + pd.Timedelta(days=1)) - df[&apos;交易日期&apos;]  # 增加一天然后再减去今天的日期# =====rolling、expanding操作# 计算&apos;收盘价&apos;这一列的均值# print df[&apos;收盘价&apos;].mean()# 如何得到每一天的最近3天收盘价的均值呢？即如何计算常用的移动平均线？# 使用rolling函数# df[&apos;收盘价_3天均值&apos;] = df[&apos;收盘价&apos;].rolling(5).mean()# print df[[&apos;收盘价&apos;, &apos;收盘价_3天均值&apos;]]# rolling(n)即为取最近n行数据的意思，只计算这n行数据。后面可以接各类计算函数，例如max、min、std等# print df[&apos;收盘价&apos;].rolling(3).max()# print df[&apos;收盘价&apos;].rolling(3).min()# print df[&apos;收盘价&apos;].rolling(3).std()# rolling可以计算每天的最近3天的均值，如果想计算每天的从一开始至今的均值，应该如何计算？# 使用expanding操作# df[&apos;收盘价_至今均值&apos;] = df[&apos;收盘价&apos;].expanding().mean()# print df[[&apos;收盘价&apos;, &apos;收盘价_至今均值&apos;]]# expanding即为取从头至今的数据。后面可以接各类计算函数# print df[&apos;收盘价&apos;].expanding().max()# print df[&apos;收盘价&apos;].expanding().min()# print df[&apos;收盘价&apos;].expanding().std()# rolling和expanding简直是为量化领域量身定制的方法，经常会用到。# =====输出# print df# df.to_csv(&apos;output.csv&apos;, encoding=&apos;gbk&apos;, index=False)# =====文档# 以上是我认为最常用的函数# 哪里可以看到全部的函数？http://pandas.pydata.org/pandas-docs/stable/api.html# 一般的使用方法</code></pre><hr><h2 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站"></a>资源网站</h2><hr><p>github开源项目：</p><pre><code>http://sunshowerc.github.io/fund/#/https://github.com/x2rr/funds</code></pre><p>数据下载：</p><pre><code>https://query1.finance.yahoo.com/v7/finance/download/000001.SS?period1=1262304000&amp;period2=1579106020&amp;interval=1d&amp;events=history&amp;crumb=t6/7IIwak4j https://fundsuggest.eastmoney.com/FundSearch/api/FundSearchAPI.ashx?m=10&amp;t=700&amp;IsNeedBaseInfo=0&amp;IsNeedZTInfo=0&amp;key=$&#123;key&#125;&amp;_=$&#123;Date.now()&#125;http://quotes.money.163.com/service/chddata.html?code=0000905&amp;start=19901219&amp;end=20200913&apos;</code></pre><p>我们从得到的链接入手来分析：<code>http://quotes.money.163.com/service/chddata.html?code=1000002&amp;start=19910129&amp;end=20161006&amp;fields=TCLOSE;HIGH;LOW;TOPEN;LCLOSE;CHG;PCHG;TURNOVER;VOTURNOVER;VATURNOVER;TCAP;MCAP</code> 其中：</p><pre><code>code: 深市六位代码前加“1”，沪市股票代码前加“0”start: 开始日期，如果想得到每只股票的所有历史交易数据，可以以公司上市日期来表达，8位数字，分别为yyyymmddend: 结束日期，表示的也是yyyymmdd八位数字fields字段包括了开盘价、最高价、最低价、收盘价等。。。</code></pre><p>code的另一种获取方式：访问 <code>http://quotes.money.163.com/stock</code>，然后搜索股票，然后再浏览器的链接上获得股票code。</p><p>举例-下载数据文件：</p><pre><code>import osimport requestsimport time# 时间格式：20160320timeParams = time.strftime(&quot;%Y%m%d&quot;, time.localtime())# 文件名和文件路径urls = [(&apos;000905中证500.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000905&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000016上证50.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000016&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000300沪深300.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000300&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000922中证红利.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000922&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399812养老产业.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399812&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000991全指医药.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000991&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000827中证环保.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000827&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399975证券公司.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399975&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399971中证传媒.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399971&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399006创业板指.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399006&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000932中证消费.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000932&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399986中证银行.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399986&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399967中证军工.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399967&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000001上证指数.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000001&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399001深证成指.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399001&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000993全指信息.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000993&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;399330深证100.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=1399330&amp;start=19901219&amp;end=%s&quot; % timeParams),       (&apos;000903中证100.csv&apos;,&quot;http://quotes.money.163.com/service/chddata.html?code=0000903&amp;start=19901219&amp;end=%s&quot; % timeParams)]def url_response(url):    path,url = url    print(url)    r = requests.get(url,stream= True)    with open(path,&apos;wb&apos;) as f:        for ch in r:            f.write(ch)for x in urls:    url_response(x)</code></pre><p>操作</p><pre><code>import pandas as pdimport datetimeimport datetimepd.set_option(&apos;expand_frame_repr&apos;, False)  # 当列太多时不换行pd.set_option(&apos;max_row&apos;,4000)#最多行数# =====读入数据df = pd.read_csv(&apos;G:/share/04/note/.ipynb_checkpoints/000905中证500.csv&apos;, encoding=&apos;gbk&apos;)df.columns = [i for i in df.columns]df = df[[&apos;日期&apos;,&apos;收盘价&apos;,&apos;开盘价&apos;,&apos;最高价&apos;,&apos;最低价&apos;,&apos;涨跌幅&apos;]]df.sort_values(by=[&apos;日期&apos;], inplace=True)df[&apos;日期&apos;] = pd.to_datetime(df[&apos;日期&apos;])# 最近十二年数据df = df[df[&apos;日期&apos;] &gt;= &apos;2009-04-12&apos;]df.reset_index(inplace=True, drop=True)# # =====计算复权价#df[&apos;复权因子&apos;] = (df[&apos;涨跌幅&apos;] + 1.0).cumprod()# initial_price = df.iloc[0][&apos;收盘价&apos;] / (1 + df.iloc[0][&apos;涨跌幅&apos;])  # 计算上市价格# df[&apos;收盘价_后复权&apos;] = initial_price * df[&apos;复权因子&apos;]  # 相乘得到复权价# df[&apos;开盘价_后复权&apos;] = df[&apos;开盘价&apos;] / df[&apos;收盘价&apos;] * df[&apos;收盘价_后复权&apos;]# df[&apos;最高价_后复权&apos;] = df[&apos;最高价&apos;] / df[&apos;收盘价&apos;] * df[&apos;收盘价_后复权&apos;]# df[&apos;最低价_后复权&apos;] = df[&apos;最低价&apos;] / df[&apos;收盘价&apos;] * df[&apos;收盘价_后复权&apos;]# # df[[&apos;开盘价&apos;, &apos;最高价&apos;, &apos;最低价&apos;, &apos;收盘价&apos;]] = df[[&apos;开盘价_后复权&apos;, &apos;最高价_后复权&apos;, &apos;最低价_后复权&apos;, &apos;收盘价_后复权&apos;]]# # df = df[[&apos;日期&apos;, &apos;股票代码&apos;, &apos;开盘价&apos;, &apos;最高价&apos;, &apos;最低价&apos;, &apos;收盘价&apos;, &apos;涨跌幅&apos;, &apos;开盘价_后复权&apos;, &apos;最高价_后复权&apos;, &apos;最低价_后复权&apos;, &apos;收盘价_后复权&apos;]]# df = df[[&apos;日期&apos;, &apos;收盘价&apos;, &apos;涨跌幅&apos;, &apos;开盘价_后复权&apos;, &apos;最高价_后复权&apos;, &apos;最低价_后复权&apos;, &apos;收盘价_后复权&apos;]]# =====计算均线策略# 均线策略：# 当短期均线由下向上穿过长期均线的时候，第二天以开盘价全仓买入并在之后一直持有股票。# 当短期均线由上向下穿过长期均线的时候，第二天以开盘价卖出全部股票并在之后一直空仓，直到下一次买入。# ===计算均线ma_short = 1  # 短期均线。ma代表：moving_averagema_long = 20  # 长期均线df[&apos;ma_short&apos;] = df[&apos;收盘价&apos;].rolling(ma_short, min_periods=1).mean()df[&apos;ma_long&apos;] = df[&apos;收盘价&apos;].rolling(ma_long, min_periods=1).mean()# ===找出买入信号# 当天的短期均线大于等于长期均线condition1 = (df[&apos;ma_short&apos;] &gt;= df[&apos;ma_long&apos;])# 上个交易日的短期均线小于长期均线condition2 = (df[&apos;ma_short&apos;].shift(1) &lt; df[&apos;ma_long&apos;].shift(1))# 将买入信号当天的signal设置为1df.loc[condition1 &amp; condition2, &apos;signal&apos;] = 1# ===找出卖出信号# 当天的短期均线小于等于长期均线condition1 = (df[&apos;ma_short&apos;] &lt;= df[&apos;ma_long&apos;])# 上个交易日的短期均线大于长期均线condition2 = (df[&apos;ma_short&apos;].shift(1) &gt; df[&apos;ma_long&apos;].shift(1))# 将买入信号当天的signal设置为0df.loc[condition1 &amp; condition2, &apos;signal&apos;] = 0# 将无关的变量删除# df.drop([&apos;ma_short&apos;, &apos;ma_long&apos;], axis=1, inplace=True)# =====由signal计算出实际的每天持有股票仓位# ===计算仓位# signal的计算运用了收盘价，是每天收盘之后产生的信号，到第二天的时候，仓位position才会改变。# 例如2009-11-17产生买入信号，2009-11-18仓位才会编变成1。满仓用1表示，空仓用0表示df[&apos;pos&apos;] = df[&apos;signal&apos;].shift()df[&apos;pos&apos;].fillna(method=&apos;ffill&apos;, inplace=True)df[&apos;pos&apos;].fillna(value=0, inplace=True)  # 将初始行数的position补全为0# 涨跌幅定义为今日收盘价减去昨日收盘价#rise = df[&apos;收盘价&apos;].diff()#df[&apos;rise&apos;] = rise# 涨跌幅定义为今日收盘价减去昨日收盘价/昨日收盘价#rets = df[&apos;收盘价&apos;].pct_change() * 100#df[&apos;涨跌幅&apos;] = retsprint(df)#print(df[(df.signal &gt; 0.5) | (df.signal == 0.0)]) print(&quot;-----------------------------------------------------&quot;)print (df[&apos;收盘价&apos;].describe())print(&quot;-----------------------------------------------------&quot;)print(df[&apos;收盘价&apos;].max())  # 最大值print(df[&apos;收盘价&apos;].min())  # 最小值print(df[&apos;收盘价&apos;].std())  # 标准差print(df[&apos;收盘价&apos;].count())  # 非空的数据的数量print(df[&apos;收盘价&apos;].median())  # 中位数print(df[&apos;收盘价&apos;].quantile(0.25))  # 25%分位数print(df[&apos;收盘价&apos;].mean()) #平均值</code></pre><hr><h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><hr><p>下降行情-&gt;最低-&gt;上升行情-&gt;最高-&gt;下降行情</p><p>量化投资：本质是数据里面找规律。市场越不成熟越有效。</p><p>择时策略：比如移动平均线：20日的平均值，股价超过这个值就买入，股价低于这个值就卖掉；或者平均值比上次大就买入，平均值比上次小就卖出。</p><p>股票的量化投资可以说是一种价值投资，我们所做的也是去挖掘市场中的价值股票，而并非去预测股票涨跌来进行投资等等（至少目前机构不会采取这种方式指导投资）。</p><p>量化投资涵盖了整个交易过程，需要一个完整的作为研究的<strong>量化回测框架和实盘交易系统</strong>作为支撑。</p><p><a href="https://www.ricequant.com/">https://www.ricequant.com/</a></p><p>每个投资策略的收益率可以分解成为两部分:一部分与市场完全相关，整个市场的平均收益率乘以一个<strong>贝塔系数</strong>。贝塔可以称为这个投资组合的系统风险。另一部分和整个市场无关的叫做<strong>阿尔法(Alpha)</strong>。</p><p>1、Alpha很难得，Beta很容易。2、Alpha就是精选个股，跑赢市场。3、Beta就是有市场行情时跟上，有风险时候躲避。</p><p>多因子选股策略是一种应用十分广泛的选股策略，其基本思想就是<strong>找到某些和收益率最相关的因子</strong>。</p><hr>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>量化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven</title>
    <link href="/2021/03/01/45.maven/"/>
    <url>/2021/03/01/45.maven/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><hr><p>maven 是一个项目管理工具，主要作用是在项目开发阶段对Java项目进行依赖管理和项目构建。</p><p>依赖管理：就是对jar包的管理。通过导入maven坐标，就相当于将仓库中的jar包导入了当前项目中。</p><p>项目构建：通过maven的一个命令就可以完成项目从清理、编译、测试、报告、打包，部署整个过程。</p><p>maven常用命令：clean(清理)、compile(编译)、test(测试)、package(打包)、install(安装)。</p><hr><h2 id="maven的依赖范围"><a href="#maven的依赖范围" class="headerlink" title="maven的依赖范围"></a>maven的依赖范围</h2><hr><p>maven的依赖范围：</p><table><thead><tr><th>依赖范围</th><th>对于编译classpath有效</th><th>对于测试classpath有效</th><th>对于运行时classpath有效</th><th>例子</th></tr></thead><tbody><tr><td>compile</td><td>Y</td><td>Y</td><td>Y</td><td>spring-core</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>Junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>JDBC驱动</td></tr><tr><td>system</td><td>Y</td><td>Y</td><td>-</td><td>本地的，maven仓库之外的类库</td></tr></tbody></table><p>通过<code>scope</code>指定依赖范围，默认是<code>compile</code>：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;junit&lt;/groupId&gt;    &lt;artifactId&gt;junit&lt;/artifactId&gt;    &lt;version&gt;4.12&lt;/version&gt;    &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;</code></pre><hr><h2 id="maven的依赖冲突"><a href="#maven的依赖冲突" class="headerlink" title="maven的依赖冲突"></a>maven的依赖冲突</h2><hr><p>排除依赖：可以使用<code>exclusions</code>标签将传递过来的依赖排除出去。</p><pre><code>&lt;exclusions&gt;    &lt;exclusion&gt;    ....    &lt;/exclusion&gt;&lt;/exclusions&gt;</code></pre><p>版本锁定:采用直接锁定版本的方法确定依赖jar包的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本为准添加到工程中，此方法在企业开发中经常使用。</p><p>版本锁定的使用方式：第一步：在dependencyManagement标签中锁定依赖的版本;第二步：在dependencies标签中声明需要导入的maven坐标。</p><pre><code>&lt;!--锁定jar包的版本--&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;            &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><hr><h2 id="maven分模块构建"><a href="#maven分模块构建" class="headerlink" title="maven分模块构建"></a>maven分模块构建</h2><hr><p>分模块父工程的打包方式必须为pom：</p><pre><code>&lt;!--父工程的打包方式必须为pom--&gt;&lt;packaging&gt;pom&lt;/packaging&gt;</code></pre><p>子工程：</p><pre><code>&lt;!--表示当前maven工程继承了maven_parent父工程--&gt;&lt;parent&gt;    &lt;artifactId&gt;maven_parent&lt;/artifactId&gt;    &lt;groupId&gt;com.study&lt;/groupId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;</code></pre><p>当前子工程依赖 子工程maven_dao：</p><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.study&lt;/groupId&gt;        &lt;artifactId&gt;maven_dao&lt;/artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>maven工程的聚合：在maven工程的<code>pom.xml</code>文件中可以使用<code>&lt;modules&gt;</code>标签将其他maven工程聚合到一起，聚合的目的是为了进行统一操作。例如拆分后的maven工程有多个，如果要进行打包，就需要针对每个工程分别执行打包命令，操作起来非常繁琐。这时就可以使用<code>&lt;modules&gt;</code>标签将这些工程统一聚合到maven工程中，需要打包的时候，只需要在此工程中执行一次打包命令，其下被聚合的工程就都会被打包了。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM虚拟机底层原理</title>
    <link href="/2020/11/06/44.JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2020/11/06/44.JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><hr><p>JVM概念：<code>Java Virtual Machine</code>:java程序的运行环境（java二进制字节码的运行环境）。</p><p>区别：</p><pre><code>JVM + 基础类库 = JREJVM + 基础类库 + 编译归工具 = JDK</code></pre><p><img src="/2020/11/06/44.JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/44.JVM虚拟机底层原理/1.png" alt></p><p>类加载器：ClassLoader</p><p>JVM内存结构：方法区（Method Area）、堆（Heap）、虚拟机栈（JVM Stacks）、程序计数器（PC Register）、本地方法栈（Nataive Method Stacks）。</p><p>执行引擎：解释器（Interpreter）、即时编译器（JIT Compiler）、垃圾回收（GC）。</p><hr><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><h3 id="JVM内存结构之程序计数器"><a href="#JVM内存结构之程序计数器" class="headerlink" title="JVM内存结构之程序计数器"></a>JVM内存结构之程序计数器</h3><hr><p>指令执行流程：<strong>jvm指令</strong>交给<strong>解释器</strong>，解释器再翻译成<strong>机器码</strong>，机器码再交给<strong>CPU</strong>运行。</p><p>程序计数器（寄存器）（Program Counter Register）作用：<strong>记住下一条jvm指令的执行地址</strong>。</p><p>程序计数器特点:每个线程都有自己的程序计数器，是线程私有的。不会存在内存溢出。</p><hr><h3 id="JVM内存结构之虚拟机栈"><a href="#JVM内存结构之虚拟机栈" class="headerlink" title="JVM内存结构之虚拟机栈"></a>JVM内存结构之虚拟机栈</h3><hr><p>Java虚拟机栈（Java Virtual Machine Stacks）：每个<strong>线程</strong>运行时需要的内存空间，称为虚拟机栈。</p><p>栈帧：每个<strong>方法</strong>调用运行时候需要的内存。一个栈内可能有多个栈帧。比如，方法一调用了方法二，方法二调用了方法三。</p><p>活动栈帧：正在执行的那个方法，即栈顶部的栈帧。每个线程只能有一个活动栈帧。</p><p>垃圾回收是否涉及栈内存？ 不需要，弹出栈。</p><p>栈内存分配越大越好吗？递归时候大内存较好，但是栈内存大了会影响线程数量。</p><p>方法内的局部变量是否线程安全？ 如果方法内局部变量没有逃离方法的作用访问，它是线程安全的。如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全。下面代码，只有<code>m1()</code>方法是线程安全的。</p><pre><code>public static void m1() &#123;    StringBuilder sb = new StringBuilder();    sb.append(1);    sb.append(2);    sb.append(3);    System.out.println(sb.toString());&#125;public static void m2(StringBuilder sb) &#123;    sb.append(1);    sb.append(2);    sb.append(3);    System.out.println(sb.toString());&#125;public static StringBuilder m3() &#123;    StringBuilder sb = new StringBuilder();    sb.append(1);    sb.append(2);    sb.append(3);    return sb;&#125;</code></pre><p>栈内存溢出（java.lang.StackOverflowError）：<strong>栈帧过多</strong>导致栈内存溢出（比如，递归）；栈帧过大导致栈内存溢出（该情况较少）。</p><hr><h3 id="JVM内存结构之本地方法栈"><a href="#JVM内存结构之本地方法栈" class="headerlink" title="JVM内存结构之本地方法栈"></a>JVM内存结构之本地方法栈</h3><hr><p>本地方法：不是java代码编写的方法。这些本地方法使用的内存就是本地方法栈。</p><pre><code>protected native Object clone() throws CloneNotSupportedException;</code></pre><hr><h3 id="JVM内存结构之堆"><a href="#JVM内存结构之堆" class="headerlink" title="JVM内存结构之堆"></a>JVM内存结构之堆</h3><hr><p>堆(Heap):通过new关键字，创建对象都会使用堆内存。</p><p>堆特点：它是线程共享的，堆中对象都需要考虑线程安全的问题；有垃圾回收机制。</p><p>内存溢出（java.lang.OutOfMemoryError）</p><hr><h3 id="JVM内存结构之方法区"><a href="#JVM内存结构之方法区" class="headerlink" title="JVM内存结构之方法区"></a>JVM内存结构之方法区</h3><hr><p>方法区：所有Java虚拟机线程共享的区域。它存储了和类结构相关的信息，如运行时常量池，成员变量，方法，构造方法。</p><p>方法区在虚拟机启动时候就被创建了。方法区也会内存溢出。</p><p>常量池：就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息 </p><p>运行时常量池：常量池是<code>*.class</code>文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址。</p><p>常量池中的信息，都会被加载到运行时常量池中。</p><hr><h3 id="StringTable"><a href="#StringTable" class="headerlink" title="StringTable"></a>StringTable</h3><hr><p>JVM1.6中StringTable存放在永久代方法区中；1.8中将StringTable存放在堆中了。</p><p>StringTable是hashtable结构，不能扩容。</p><pre><code>String s1 = &quot;a&quot;; // 懒惰的String s2 = &quot;b&quot;;String s3 = &quot;ab&quot;;String s4 = s1 + s2; // new StringBuilder().append(&quot;a&quot;).append(&quot;b&quot;).toString() -&gt; new String(&quot;ab&quot;)String s5 = &quot;a&quot; + &quot;b&quot;;  // javac 在编译期间的优化，结果已经在编译期确定为abSystem.out.println(s3 == s4);//false，s3在串池中，s4在堆中System.out.println(s3 == s5);//true</code></pre><p><code>intern()</code>:将字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池，会把串池中的对象返回。</p><pre><code>String x = &quot;ab&quot;;String s = new String(&quot;a&quot;) + new String(&quot;b&quot;);// 堆String s2 = s.intern();System.out.println( s2 == x);//trueSystem.out.println( s == x );//false</code></pre><p>面试题</p><pre><code>String s1 = &quot;a&quot;;String s2 = &quot;b&quot;;String s3 = &quot;a&quot; + &quot;b&quot;; // abString s4 = s1 + s2;   // new String(&quot;ab&quot;)String s5 = &quot;ab&quot;;String s6 = s4.intern();// 问System.out.println(s3 == s4); // falseSystem.out.println(s3 == s5); // trueSystem.out.println(s3 == s6); // trueString x2 = new String(&quot;c&quot;) + new String(&quot;d&quot;); // new String(&quot;cd&quot;)String x1 = &quot;cd&quot;;x2.intern();//x2入池失败System.out.println(x1 == x2);//false// 调换了位置String x2 = new String(&quot;c&quot;) + new String(&quot;d&quot;); // new String(&quot;cd&quot;)x2.intern();//x2入池成功String x1 = &quot;cd&quot;;System.out.println(x1 == x2);//true</code></pre><p>StringTable 特性：</p><pre><code>常量池中的字符串仅是符号，第一次用到时才变为对象 利用串池的机制，来避免重复创建字符串对象 字符串变量拼接的原理是 StringBuilder （1.8） 字符串常量拼接的原理是编译期优化 可以使用 intern 方法，主动将串池中还没有的字符串对象放入串池 1.8 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池，会把串池中的对象返回 1.6 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有会把此对象复制一份，放入串池，会把串池中的对象返回</code></pre><p>StringTable会GC垃圾回收。 </p><hr><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h3 id="判断对象是否可以回收之引用计数法"><a href="#判断对象是否可以回收之引用计数法" class="headerlink" title="判断对象是否可以回收之引用计数法"></a>判断对象是否可以回收之引用计数法</h3><hr><p>被引用几次就计数几，当计数零时候就没有引用的了，可以回收。弊端：两个对象相互引用，就无法回收。</p><hr><h3 id="判断对象是否可以回收之可达性分析算法"><a href="#判断对象是否可以回收之可达性分析算法" class="headerlink" title="判断对象是否可以回收之可达性分析算法"></a>判断对象是否可以回收之可达性分析算法</h3><hr><p>Java虚拟机中的垃圾回收器采用<strong>可达性分析</strong>来探索所有存活的对象。</p><p>根对象（GC Root）：肯定不能当成垃圾被回收的对象称为根对象。一个对象没有被根对象直接或者间接引用，就可以被回收。</p><p>扫描堆中的对象，看是否能够沿着<code>GC Root</code>对象为起点的引用链找到该对象，找不到，表示可以回收该对象。</p><hr><h3 id="五种引用"><a href="#五种引用" class="headerlink" title="五种引用"></a>五种引用</h3><hr><p><strong>强引用</strong>：只有所有 <code>GC Roots</code> 对象都不通过<code>强引用</code>引用该对象，该对象才能被垃圾回收。</p><p><strong>软引用</strong>（SoftReference）：仅有软引用引用该对象时，在垃圾回收后，<strong>内存仍不足时</strong>会再次出发垃圾回收，回收软引用对象；可以配合<strong>引用队列</strong>来释放软引用自身。</p><p><strong>弱引用</strong>（WeakReference）：仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象。可以配合<strong>引用队列</strong>来释放弱引用自身。</p><p><strong>虚引用</strong>（PhantomReference）：必须配合引用队列使用，主要配合 <code>ByteBuffer</code> 使用，被引用对象回收时，会将虚引用入队，由<code>Reference Handler</code> 线程调用虚引用相关方法释放<strong>直接内存</strong>。</p><p><strong>终结器引用</strong>（FinalReference）:无需手动编码，但其内部配合引用队列使用，在垃圾回收时，终结器引用入队（被引用对象暂时没有被回收），再由 <code>Finalizer</code> 线程通过终结器引用找到被引用对象并调用它的 <code>finalize</code> 方法，第二次GC时才能回收被引用对象。</p><hr><p>强引用和软引用代码：</p><pre><code>private static final int _4MB = 4 * 1024 * 1024;List&lt;byte[]&gt; list = new ArrayList&lt;&gt;();for (int i = 0; i &lt; 5; i++) &#123;    list.add(new byte[_4MB]);&#125;System.in.read();// 软引用：list --&gt; SoftReference --&gt; byte[]List&lt;SoftReference&lt;byte[]&gt;&gt; list = new ArrayList&lt;&gt;();for (int i = 0; i &lt; 5; i++) &#123;    SoftReference&lt;byte[]&gt; ref = new SoftReference&lt;&gt;(new byte[_4MB]);    System.out.println(ref.get());    list.add(ref);    System.out.println(list.size());&#125;System.out.println(&quot;循环结束：&quot; + list.size());for (SoftReference&lt;byte[]&gt; ref : list) &#123;    System.out.println(ref.get());&#125;</code></pre><hr><p>软引用配合<strong>引用队列</strong>使用，自动清除无用的软引用：</p><pre><code>private static final int _4MB = 4 * 1024 * 1024;public static void main(String[] args) &#123;    List&lt;SoftReference&lt;byte[]&gt;&gt; list = new ArrayList&lt;&gt;();    // 引用队列    ReferenceQueue&lt;byte[]&gt; queue = new ReferenceQueue&lt;&gt;();    for (int i = 0; i &lt; 5; i++) &#123;        // 关联了引用队列， 当软引用所关联的 byte[]被回收时，软引用自己会加入到 queue 中去        SoftReference&lt;byte[]&gt; ref = new SoftReference&lt;&gt;(new byte[_4MB], queue);        System.out.println(ref.get());        list.add(ref);        System.out.println(list.size());    &#125;    // 从队列中获取无用的 软引用对象，并移除    Reference&lt;? extends byte[]&gt; poll = queue.poll();    while( poll != null) &#123;        list.remove(poll);        poll = queue.poll();    &#125;    System.out.println(&quot;===========================&quot;);    for (SoftReference&lt;byte[]&gt; reference : list) &#123;        System.out.println(reference.get());    &#125;&#125;</code></pre><hr><p>弱引用演示代码：</p><pre><code>private static final int _4MB = 4 * 1024 * 1024;public static void main(String[] args) &#123;    //  list --&gt; WeakReference --&gt; byte[]    List&lt;WeakReference&lt;byte[]&gt;&gt; list = new ArrayList&lt;&gt;();    for (int i = 0; i &lt; 10; i++) &#123;        WeakReference&lt;byte[]&gt; ref = new WeakReference&lt;&gt;(new byte[_4MB]);        list.add(ref);        for (WeakReference&lt;byte[]&gt; w : list) &#123;            System.out.print(w.get()+&quot; &quot;);        &#125;        System.out.println();    &#125;    System.out.println(&quot;循环结束：&quot; + list.size());&#125;</code></pre><hr><h3 id="垃圾回收算法之标记清除"><a href="#垃圾回收算法之标记清除" class="headerlink" title="垃圾回收算法之标记清除"></a>垃圾回收算法之标记清除</h3><hr><p><code>Mark Sweep</code>:先标记垃圾，再清除垃圾。优点：速度快。缺点：空间不连续，产生内存碎片。</p><hr><h3 id="垃圾回收算法之标记整理"><a href="#垃圾回收算法之标记整理" class="headerlink" title="垃圾回收算法之标记整理"></a>垃圾回收算法之标记整理</h3><hr><p><code>Mark Compact</code>:优点：不会产生内存碎片，缺点：速度慢。</p><hr><h3 id="垃圾回收算法之复制"><a href="#垃圾回收算法之复制" class="headerlink" title="垃圾回收算法之复制"></a>垃圾回收算法之复制</h3><hr><p><code>Copy</code>:内存空间划分为<code>FROM</code>和<code>TO</code>两个区域。在FROM垃圾回收后，复制到TO区域，不会有内存碎片，然后TO变成了FROM。需要占用双倍内存空间。</p><hr><h3 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h3><hr><p>堆内存分为：老年代（长时间使用的内存区域）和新生代（分为：伊甸园eden、幸存区From、幸存区To）。</p><p>新生代<code>new generation</code>垃圾回收：<code>Minor GC</code>。</p><p>老年代<code>tenured generation</code>垃圾回收：<code>Full GC</code>。</p><p>对象首先分配在伊甸园eden区域。新生代空间不足时，触发 <code>minor gc</code>，使用<code>复制垃圾回收算法</code>，将<code>伊甸园</code>和<code>from</code>存活的对象使用 <code>copy</code> 复制到 <code>to</code> 中，存活的对象年龄<code>加1</code>并且交换 <code>from</code> <code>to</code>。</p><p><code>minor gc</code> 会引发 <code>stop the world</code>，暂停其它用户的线程（因为对象地址会改变），等垃圾回收结束，用户线程才恢复运行。</p><p>当新生代中的对象年龄超过阈值时，会晋升至老年代，最大寿命是15（4bit）。</p><p>当老年代空间不足，会先尝试触发 <code>minor gc</code>，如果之后空间仍不足，那么触发 <code>full gc</code>，<code>stop the world</code>的时间更长。老年代垃圾回收的算法是标记清除或者标记整理。</p><p>首次存储一个新对象：如果新生代空间不足，老年代充足，会直接存储在老年代中；如果新生代空间不足，老年代空间也不足，会OOM。</p><p>子线程的OOM不会导致主线程的结束。</p><p>相关VM参数：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">堆初始大小</td><td style="text-align:center">-Xms</td></tr><tr><td style="text-align:center">堆最大大小</td><td style="text-align:center">-Xmx 或 -XX:MaxHeapSize=size</td></tr><tr><td style="text-align:center">新生代大小</td><td style="text-align:center">-Xmn 或 (-XX:NewSize=size + -XX:MaxNewSize=size )</td></tr><tr><td style="text-align:center">幸存区比例（动态）</td><td style="text-align:center">-XX:InitialSurvivorRatio=ratio 和 -XX:+UseAdaptiveSizePolicy</td></tr><tr><td style="text-align:center">幸存区比例</td><td style="text-align:center">-XX:SurvivorRatio=ratio</td></tr><tr><td style="text-align:center">晋升阈值</td><td style="text-align:center">-XX:MaxTenuringThreshold=threshold</td></tr><tr><td style="text-align:center">晋升详情</td><td style="text-align:center">-XX:+PrintTenuringDistribution</td></tr><tr><td style="text-align:center">GC详情</td><td style="text-align:center">-XX:+PrintGCDetails -verbose:gc</td></tr><tr><td style="text-align:center">FullGC 前 MinorGC</td><td style="text-align:center">-XX:+ScavengeBeforeFullGC</td></tr></tbody></table><hr><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><hr><p>串行：单线程，堆内存较小，适合个人电脑。<code>XX:+UseSerialGC = Serial（新生代-复制算法） + SerialOld（老年代-标记整理算法）</code>。</p><p>吞吐量优先：多线程，堆内存较大，多核cpu。让单位时间内，STW 的时间最短 0.2 0.2 = 0.4，垃圾回收时间占比最低，这样就称吞吐量高。</p><pre><code>-XX:+UseParallelGC ~ -XX:+UseParallelOldGC-XX:GCTimeRatio=ratio-XX:MaxGCPauseMillis=ms-XX:ParallelGCThreads=n</code></pre><p>响应时间优先：多线程，堆内存较大，多核cpu。尽可能让单次 STW 的时间最短 0.1 0.1 0.1 0.1 0.1 = 0.5。</p><pre><code>-XX:+UseConcMarkSweepGC ~ -XX:+UseParNewGC ~ SerialOld-XX:ParallelGCThreads=n ~ -XX:ConcGCThreads=threads-XX:CMSInitiatingOccupancyFraction=percent-XX:+CMSScavengeBeforeRemark</code></pre><hr><h3 id="Garbage-First"><a href="#Garbage-First" class="headerlink" title="Garbage First"></a>Garbage First</h3><hr><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python高级</title>
    <link href="/2020/09/09/43.python%E9%AB%98%E7%BA%A7/"/>
    <url>/2020/09/09/43.python%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="多任务编程"><a href="#多任务编程" class="headerlink" title="多任务编程"></a>多任务编程</h2><hr><p>多任务是指在同一时间内执行多个任务，例如: 现在电脑安装的操作系统都是多任务操作系统，可以同时运行着多个软件。</p><p>多任务的执行方式：并发和并行。</p><p>并发:在一段时间内交替去执行任务。</p><p>并行:对于多核cpu处理多任务，操作系统会给cpu的每个内核安排一个执行的软件，多个内核是真正的一起执行软件。这里需要注意多核cpu是并行的执行多任务，始终有多个软件一起执行。</p><p>一个程序运行后至少有一个进程，一个进程默认有一个线程，进程里面可以创建多个线程，线程是依附在进程里面的，没有进程就没有线程。</p><hr><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><hr><p>进程使用：</p><pre><code>#导入进程包import multiprocessing#创建子进程并指定执行的任务sub_process = multiprocessing.Process (target=任务名)#启动进程执行任务sub_process.start()</code></pre><hr><p>Process进程类的说明：</p><pre><code>group：指定进程组，目前只能使用Nonetarget：执行的目标任务名name：进程名字args：以元组方式给执行任务传参kwargs：以字典方式给执行任务传参</code></pre><p>Process创建的实例对象的常用方法:</p><pre><code>start()：启动子进程实例（创建子进程）join()：等待子进程执行结束terminate()：不管任务是否完成，立即终止子进程</code></pre><p>Process创建的实例对象的常用属性:</p><pre><code>name：当前进程的别名，默认为Process-N，N为从1开始递增的整数</code></pre><hr><p>代码：</p><pre><code>import multiprocessingimport time# 跳舞任务def dance():    for i in range(5):        print(&quot;跳舞中...&quot;)        time.sleep(0.2)# 唱歌任务def sing():    for i in range(5):        print(&quot;唱歌中...&quot;)        time.sleep(0.2)if __name__ == &apos;__main__&apos;:    # 创建跳舞的子进程    # group: 表示进程组，目前只能使用None    # target: 表示执行的目标任务名(函数名、方法名)    # name: 进程名称, 默认是Process-1, .....    dance_process = multiprocessing.Process(target=dance, name=&quot;myprocess1&quot;)    sing_process = multiprocessing.Process(target=sing)    # 启动子进程执行对应的任务    dance_process.start()    sing_process.start()</code></pre><hr><h3 id="进程编号"><a href="#进程编号" class="headerlink" title="进程编号"></a>进程编号</h3><hr><p>获取进程编号的目的是验证主进程和子进程的关系，可以得知子进程是由那个主进程创建出来的。</p><p>获取进程编号的两种操作:获取当前进程编号和获取当前父进程编号。</p><hr><p>获取当前进程编号</p><pre><code>os.getpid() </code></pre><p>示例代码:</p><pre><code>import multiprocessingimport timeimport os# 跳舞任务def dance():    # 获取当前进程的编号    print(&quot;dance:&quot;, os.getpid())    # 获取当前进程    print(&quot;dance:&quot;, multiprocessing.current_process())    for i in range(5):        print(&quot;跳舞中...&quot;)        time.sleep(0.2)        # 扩展:根据进程编号杀死指定进程        os.kill(os.getpid(), 9)# 唱歌任务def sing():    # 获取当前进程的编号    print(&quot;sing:&quot;, os.getpid())    # 获取当前进程    print(&quot;sing:&quot;, multiprocessing.current_process())    for i in range(5):        print(&quot;唱歌中...&quot;)        time.sleep(0.2)if __name__ == &apos;__main__&apos;:    # 获取当前进程的编号    print(&quot;main:&quot;, os.getpid())    # 获取当前进程    print(&quot;main:&quot;, multiprocessing.current_process())    # 创建跳舞的子进程    # group: 表示进程组，目前只能使用None    # target: 表示执行的目标任务名(函数名、方法名)    # name: 进程名称, 默认是Process-1, .....    dance_process = multiprocessing.Process(target=dance, name=&quot;myprocess1&quot;)    sing_process = multiprocessing.Process(target=sing)    # 启动子进程执行对应的任务    dance_process.start()    sing_process.start()</code></pre><p>运行结果：</p><pre><code>main: 10796main: &lt;_MainProcess name=&apos;MainProcess&apos; parent=None started&gt;dance: 2388dance: &lt;Process name=&apos;myprocess1&apos; parent=10796 started&gt;跳舞中...sing: 2220sing: &lt;Process name=&apos;Process-2&apos; parent=10796 started&gt;唱歌中...唱歌中...唱歌中...唱歌中...唱歌中...</code></pre><hr><p>获取当前父进程编号</p><pre><code>os.getppid()</code></pre><p>示例代码:</p><pre><code>import multiprocessingimport timeimport os# 跳舞任务def dance():    # 获取当前进程的编号    print(&quot;dance:&quot;, os.getpid())    # 获取当前进程    print(&quot;dance:&quot;, multiprocessing.current_process())    # 获取父进程的编号    print(&quot;dance的父进程编号:&quot;, os.getppid())    for i in range(5):        print(&quot;跳舞中...&quot;)        time.sleep(0.2)        # 扩展:根据进程编号杀死指定进程        os.kill(os.getpid(), 9)# 唱歌任务def sing():    # 获取当前进程的编号    print(&quot;sing:&quot;, os.getpid())    # 获取当前进程    print(&quot;sing:&quot;, multiprocessing.current_process())    # 获取父进程的编号    print(&quot;sing的父进程编号:&quot;, os.getppid())    for i in range(5):        print(&quot;唱歌中...&quot;)        time.sleep(0.2)if __name__ == &apos;__main__&apos;:    # 获取当前进程的编号    print(&quot;main:&quot;, os.getpid())    # 获取当前进程    print(&quot;main:&quot;, multiprocessing.current_process())    # 创建跳舞的子进程    # group: 表示进程组，目前只能使用None    # target: 表示执行的目标任务名(函数名、方法名)    # name: 进程名称, 默认是Process-1, .....    dance_process = multiprocessing.Process(target=dance, name=&quot;myprocess1&quot;)    sing_process = multiprocessing.Process(target=sing)    # 启动子进程执行对应的任务    dance_process.start()    sing_process.start()</code></pre><p>运行结果：</p><pre><code>main: 4832main: &lt;_MainProcess name=&apos;MainProcess&apos; parent=None started&gt;dance: 14372dance: &lt;Process name=&apos;myprocess1&apos; parent=4832 started&gt;sing: 8948sing: &lt;Process name=&apos;Process-2&apos; parent=4832 started&gt;dance的父进程编号: 4832跳舞中...sing的父进程编号: 4832唱歌中...唱歌中...唱歌中...唱歌中...唱歌中...</code></pre><hr><h3 id="进程执行带有参数的任务"><a href="#进程执行带有参数的任务" class="headerlink" title="进程执行带有参数的任务"></a>进程执行带有参数的任务</h3><hr><p>Process类执行任务并给任务传参数有两种方式:<code>args</code> 表示以元组的方式给执行任务传参;<code>kwargs</code> 表示以字典方式给执行任务传参。</p><hr><p>args参数的使用，示例代码:</p><pre><code>import multiprocessingimport time# 带有参数的任务def task(count):    for i in range(count):        print(&quot;任务执行中..&quot;)        time.sleep(0.2)    else:        print(&quot;任务执行完成&quot;)if __name__ == &apos;__main__&apos;:    # 创建子进程    # args: 以元组的方式给任务传入参数    sub_process = multiprocessing.Process(target=task, args=(5,))    sub_process.start()</code></pre><p><strong>元组方式传参一定要和参数的顺序保持一致。</strong></p><hr><p>kwargs参数的使用,示例代码:</p><pre><code>import multiprocessingimport time# 带有参数的任务def task(count):    for i in range(count):        print(&quot;任务执行中..&quot;)        time.sleep(0.2)    else:        print(&quot;任务执行完成&quot;)if __name__ == &apos;__main__&apos;:    # 创建子进程    # kwargs: 表示以字典方式传入参数    sub_process = multiprocessing.Process(target=task, kwargs=&#123;&quot;count&quot;: 3&#125;)    sub_process.start()</code></pre><p><strong>字典方式传参字典中的key一定要和参数名保持一致。</strong></p><hr><h3 id="进程的注意点"><a href="#进程的注意点" class="headerlink" title="进程的注意点"></a>进程的注意点</h3><hr><p><strong>进程之间不共享全局变量：子线程和主线程之间，以及子线程和子线程之间都不共享。</strong>创建子进程会对主进程资源进行拷贝，也就是说子进程是主进程的一个副本，好比是一对双胞胎，之所以进程之间不共享全局变量，是因为操作的不是同一个进程里面的全局变量，只不过不同进程里面的全局变量名字相同而已。</p><p>主进程会等待所有的子进程执行结束再结束。</p><p>守护主进程就是主进程退出子进程销毁不再执行。</p><pre><code>子进程对象.daemon = True</code></pre><p>子进程销毁:子进程执行结束。</p><pre><code># 让子进程销毁子进程对象.terminate()</code></pre><p>保证主进程正常退出的示例代码:</p><pre><code>import multiprocessingimport time# 定义进程所需要执行的任务def task():    for i in range(10):        print(&quot;任务执行中...&quot;)        time.sleep(0.2)if __name__ == &apos;__main__&apos;:    # 创建子进程    sub_process = multiprocessing.Process(target=task)    # 设置守护主进程，主进程退出子进程直接销毁，子进程的生命周期依赖与主进程    # sub_process.daemon = True    sub_process.start()    time.sleep(0.5)    print(&quot;over&quot;)    # 让子进程销毁    sub_process.terminate()    exit()    # 总结： 主进程会等待所有的子进程执行完成以后程序再退出    # 如果想要主进程退出子进程销毁，可以设置守护主进程或者在主进程退出之前让子进程销毁</code></pre><hr><h3 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h3><hr><p>线程是cpu调度的基本单位，每个进程至少都有一个线程，而这个线程就是我们通常说的主线程。</p><p>多线程的使用</p><pre><code>#导入线程模块import threading#创建子线程并指定执行的任务sub_thread = threading.Thread(target=任务名)#启动线程执行任务sub_thread.start()</code></pre><p>线程类Thread参数说明</p><pre><code>group: 线程组，目前只能使用Nonetarget: 执行的目标任务名args: 以元组的方式给执行任务传参kwargs: 以字典方式给执行任务传参name: 线程名，一般不用设置</code></pre><p>代码</p><pre><code>import threadingimport time# 唱歌任务def sing():    # 扩展：获取当前线程    # print(&quot;sing当前执行的线程为：&quot;, threading.current_thread())    for i in range(3):        print(&quot;正在唱歌...%d&quot; % i)        time.sleep(1)# 跳舞任务def dance():    # 扩展：获取当前线程    # print(&quot;dance当前执行的线程为：&quot;, threading.current_thread())    for i in range(3):        print(&quot;正在跳舞...%d&quot; % i)        time.sleep(1)if __name__ == &apos;__main__&apos;:    # 扩展： 获取当前线程    # print(&quot;当前执行的线程为：&quot;, threading.current_thread())    # 创建唱歌的线程    # target： 线程执行的函数名    sing_thread = threading.Thread(target=sing)    # 创建跳舞的线程    dance_thread = threading.Thread(target=dance)    # 开启线程    sing_thread.start()    dance_thread.start()</code></pre><hr><h3 id="线程执行带有参数的任务"><a href="#线程执行带有参数的任务" class="headerlink" title="线程执行带有参数的任务"></a>线程执行带有参数的任务</h3><hr><p>Thread类执行任务并给任务传参数有两种方式:args表示以元组的方式给执行任务传参;kwargs表示以字典方式给执行任务传参。</p><p>元组方式传参(args)，元组方式传参一定要和参数的顺序保持一致：</p><pre><code>import threadingimport time# 带有参数的任务def task(count):    for i in range(count):        print(&quot;任务执行中..&quot;)        time.sleep(0.2)    else:        print(&quot;任务执行完成&quot;)if __name__ == &apos;__main__&apos;:    # 创建子线程    # args: 以元组的方式给任务传入参数    sub_thread = threading.Thread(target=task, args=(5,))    sub_thread.start()</code></pre><p>字典方式传参(kwargs),字典方式传参字典中的key一定要和参数名保持一致:</p><pre><code>import threadingimport time# 带有参数的任务def task(count):    for i in range(count):        print(&quot;任务执行中..&quot;)        time.sleep(0.2)    else:        print(&quot;任务执行完成&quot;)if __name__ == &apos;__main__&apos;:    # 创建子线程    # kwargs: 表示以字典方式传入参数    sub_thread = threading.Thread(target=task, kwargs=&#123;&quot;count&quot;: 3&#125;)    sub_thread.start()</code></pre><hr><h3 id="线程的注意点"><a href="#线程的注意点" class="headerlink" title="线程的注意点"></a>线程的注意点</h3><hr><p>线程之间执行是无序的，它是由cpu调度决定的，cpu调度哪个线程，哪个线程就先执行，没有调度的线程不能执行。</p><p>进程之间执行也是无序的，它是由操作系统调度决定的，操作系统调度哪个进程，哪个进程就先执行，没有调度的进程不能执行。</p><p>主线程会等待所有的子线程执行结束再结束。</p><p>守护主线程:主线程退出子线程销毁不再执行。</p><pre><code>#设置守护主线程有两种方式：threading.Thread(target=show_info, daemon=True)线程对象.setDaemon(True)</code></pre><p>线程之间共享全局变量，多线程同时对全局变量操作数据会发生错误。</p><p>全局变量数据错误的解决办法:线程同步: 保证同一时刻只能有一个线程去操作全局变量。</p><p>线程同步的方式:线程等待(join)；互斥锁。</p><p>线程等待的示例代码:</p><pre><code># 启动线程first_thread.start()# 主线程等待第一个线程执行完成以后代码再继续执行，让其执行第二个线程# 线程同步： 一个任务执行完成以后另外一个任务才能执行，同一个时刻只有一个任务在执行first_thread.join()# 启动线程second_thread.start()</code></pre><hr><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><hr><p>互斥锁: 对共享数据进行锁定，保证同一时刻只能有一个线程去操作。互斥锁是多个线程一起去抢，抢到锁的线程先执行，没有抢到锁的线程需要等待，等互斥锁使用完释放后，其它等待的线程再去抢这个锁。</p><p>互斥锁使用步骤:</p><pre><code># 创建锁mutex = threading.Lock()# 上锁mutex.acquire()...这里编写代码能保证同一时刻只能有一个线程去操作, 对共享数据进行锁定...# 释放锁mutex.release()</code></pre><p>acquire和release方法之间的代码同一时刻只能有一个线程去操作。如果在调用acquire方法的时候，其他线程已经使用了这个互斥锁，那么此时acquire方法会堵塞，直到这个互斥锁释放后才能再次上锁。</p><p>示例代码：</p><pre><code>import threading# 定义全局变量g_num = 0# 创建全局互斥锁lock = threading.Lock()# 循环一次给全局变量加1def sum_num1():    # 上锁    lock.acquire()    for i in range(1000000):        global g_num        g_num += 1    print(&quot;sum1:&quot;, g_num)    # 释放锁    lock.release()# 循环一次给全局变量加1def sum_num2():    # 上锁    lock.acquire()    for i in range(1000000):        global g_num        g_num += 1    print(&quot;sum2:&quot;, g_num)    # 释放锁    lock.release()if __name__ == &apos;__main__&apos;:    # 创建两个线程    first_thread = threading.Thread(target=sum_num1)    second_thread = threading.Thread(target=sum_num2)    # 启动线程    first_thread.start()    second_thread.start()    # 提示：加上互斥锁，那个线程抢到这个锁我们决定不了，那线程抢到锁那个线程先执行，没有抢到的线程需要等待    # 加上互斥锁多任务瞬间变成单任务，性能会下降，也就是说同一时刻只能有一个线程去执行</code></pre><p>互斥锁的作用就是保证同一时刻只能有一个线程去操作共享数据，保证共享数据不会出现错误问题。使用互斥锁会影响代码的执行效率，多任务改成了单任务执行。互斥锁如果没有使用好容易出现死锁的情况。</p><hr><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><hr><p>死锁: 一直等待对方释放锁的情景就是死锁。死锁的结果会造成应用程序的停止响应，不能再处理其它任务了。</p><pre><code>import threadingimport time# 创建互斥锁lock = threading.Lock()# 根据下标去取值， 保证同一时刻只能有一个线程去取值def get_value(index):    # 上锁    lock.acquire()    print(threading.current_thread())    my_list = [3,6,8,1]    if index &gt;= len(my_list):        print(&quot;下标越界:&quot;, index)        # 当下标越界需要释放锁，让后面的线程还可以取值        lock.release()        return    value = my_list[index]    print(value)    time.sleep(0.2)    # 释放锁    lock.release()if __name__ == &apos;__main__&apos;:    # 模拟大量线程去执行取值操作    for i in range(30):        sub_thread = threading.Thread(target=get_value, args=(i,))        sub_thread.start()</code></pre><hr><h3 id="进程和线程的对比"><a href="#进程和线程的对比" class="headerlink" title="进程和线程的对比"></a>进程和线程的对比</h3><hr><p>线程是依附在进程里面的，没有进程就没有线程。一个进程默认提供一条线程，进程可以创建多个线程。</p><p>多进程要比多线程消耗的资源多，但是多进程开发比单进程多线程开发稳定性要强，某个进程挂掉不会影响其它进程。</p><p>多进程可以使用cpu的多核运行，多线程可以共享全局变量。</p><p>线程不能单独执行必须依附在进程里面。</p><p>进程之间不共享全局变量。</p><p>线程之间共享全局变量，但是要注意资源竞争的问题，解决办法: 互斥锁或者线程同步。</p><hr><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="TCP客户端程序开发"><a href="#TCP客户端程序开发" class="headerlink" title="TCP客户端程序开发"></a>TCP客户端程序开发</h3><hr><p>TCP客户端程序开发步骤：创建客户端套接字对象、和服务端套接字建立连接、发送数据、接收数据、关闭客户端套接字。</p><p>socket类：</p><pre><code>#导入socket模块 import socket#创建客户端socket对象 socket.socket(AddressFamily, Type)</code></pre><p>参数说明:AddressFamily表示IP地址类型, 分为TPv4和IPv6。Type 表示传输协议类型。</p><p>方法说明:</p><pre><code>connect((host, port)) 表示和服务端套接字建立连接, host是服务器ip地址，port是应用程序的端口号send(data) 表示发送数据，data是二进制数据recv(buffersize) 表示接收数据, buffersize是每次接收数据的长度</code></pre><p>示例代码：</p><pre><code>import socketif __name__ == &apos;__main__&apos;:    # 创建tcp客户端套接字    # 1. AF_INET：表示ipv4    # 2. SOCK_STREAM: tcp传输协议    tcp_client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # 和服务端应用程序建立连接    tcp_client_socket.connect((&quot;192.168.52.1&quot;, 8080))    # 代码执行到此，说明连接建立成功    # 准备发送的数据    send_data = &quot;你好服务端，我是客户端!&quot;.encode(&quot;gbk&quot;)    # 发送数据    tcp_client_socket.send(send_data)    # 接收数据, 这次接收的数据最大字节数是1024    recv_data = tcp_client_socket.recv(1024)    # 返回的直接是服务端程序发送的二进制数据    print(recv_data)    # 对数据进行解码    recv_content = recv_data.decode(&quot;gbk&quot;)    print(&quot;接收服务端的数据为:&quot;, recv_content)    # 关闭套接字    tcp_client_socket.close()    #str.encode(编码格式) 表示把字符串编码成为二进制    #data.decode(编码格式) 表示把二进制解码成为字符串</code></pre><hr><h3 id="TCP服务端程序开发"><a href="#TCP服务端程序开发" class="headerlink" title="TCP服务端程序开发"></a>TCP服务端程序开发</h3><hr><p>TCP服务端程序开发步骤回顾:创建服务端端套接字对象、绑定端口号、设置监听、等待接受客户端的连接请求、接收数据、发送数据、关闭套接字。</p><p>socket类：</p><pre><code>#导入 socket 模块import socket#创建服务端 socket 对象socket.socket(AddressFamily, Type)</code></pre><p>参数说明:AddressFamily表示IP地址类型, 分为TPv4和IPv6。Type表示传输协议类型。</p><p>方法说明:</p><pre><code>bind((host, port)) 表示绑定端口号, host 是 ip 地址，port 是端口号，ip 地址一般不指定，表示本机的任何一个ip地址都可以。listen (backlog) 表示设置监听，backlog参数表示最大等待建立连接的个数。accept() 表示等待接受客户端的连接请求send(data) 表示发送数据，data 是二进制数据recv(buffersize) 表示接收数据, buffersize 是每次接收数据的长度</code></pre><p>示例代码：</p><pre><code>import socketif __name__ == &apos;__main__&apos;:    # 创建tcp服务端套接字    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # 设置端口号复用，让程序退出端口号立即释放    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)    # 给程序绑定端口号    tcp_server_socket.bind((&quot;&quot;, 8989))    # 设置监听    # 128:最大等待建立连接的个数， 提示： 目前是单任务的服务端，同一时刻只能服务与一个客户端，后续使用多任务能够让服务端同时服务与多个客户端，    # 不需要让客户端进行等待建立连接    # listen后的这个套接字只负责接收客户端连接请求，不能收发消息，收发消息使用返回的这个新套接字来完成    tcp_server_socket.listen(128)    # 等待客户端建立连接的请求, 只有客户端和服务端建立连接成功代码才会解阻塞，代码才能继续往下执行    # 1. 专门和客户端通信的套接字： service_client_socket    # 2. 客户端的ip地址和端口号： ip_port    service_client_socket, ip_port = tcp_server_socket.accept()    # 代码执行到此说明连接建立成功    print(&quot;客户端的ip地址和端口号:&quot;, ip_port)    # 接收客户端发送的数据, 这次接收数据的最大字节数是1024    recv_data = service_client_socket.recv(1024)    # 获取数据的长度    recv_data_length = len(recv_data)    print(&quot;接收数据的长度为:&quot;, recv_data_length)    # 对二进制数据进行解码    recv_content = recv_data.decode(&quot;gbk&quot;)    print(&quot;接收客户端的数据为:&quot;, recv_content)    # 准备发送的数据    send_data = &quot;ok, 问题正在处理中...&quot;.encode(&quot;gbk&quot;)    # 发送数据给客户端    service_client_socket.send(send_data)    # 关闭服务与客户端的套接字， 终止和客户端通信的服务    service_client_socket.close()    # 关闭服务端的套接字, 终止和客户端提供建立连接请求的服务    tcp_server_socket.close()</code></pre><p>说明:当客户端和服务端建立连接后，服务端程序退出后端口号不会立即释放，需要等待大概1-2分钟。</p><p>解决办法有两种:更换服务端端口号;设置端口号复用(推荐使用)，也就是说让服务端程序退出后端口号立即释放。</p><p>设置端口号复用的代码如下:</p><pre><code># 参数1: 表示当前套接字# 参数2: 设置端口号复用选项# 参数3: 设置端口号复用选项对应的值tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)</code></pre><hr><h3 id="TCP网络应用程序的注意点"><a href="#TCP网络应用程序的注意点" class="headerlink" title="TCP网络应用程序的注意点"></a>TCP网络应用程序的注意点</h3><hr><p>当 TCP 客户端程序想要和 TCP 服务端程序进行通信的时候必须要先建立连接。</p><p>TCP 客户端程序一般不需要绑定端口号，因为客户端是主动发起建立连接的。</p><p>TCP 服务端程序必须绑定端口号，否则客户端找不到这个 TCP 服务端程序。</p><p>listen 后的套接字是被动套接字，只负责接收新的客户端的连接请求，不能收发消息。</p><p>当 TCP 客户端程序和 TCP 服务端程序连接成功后， TCP 服务器端程序会产生一个新的套接字，收发客户端消息使用该套接字。</p><p>关闭 accept 返回的套接字意味着和这个客户端已经通信完毕。</p><p>关闭 listen 后的套接字意味着服务端的套接字关闭了，会导致新的客户端不能连接服务端，但是之前已经接成功的客户端还能正常通信。</p><p>当客户端的套接字调用 close 后，服务器端的 recv 会解阻塞，返回的数据长度为0，服务端可以通过返回数据的长度来判断客户端是否已经下线，反之服务端关闭套接字，客户端的 recv 也会解阻塞，返回的数据长度也为0。</p><hr><h3 id="多任务版TCP服务端程序开发"><a href="#多任务版TCP服务端程序开发" class="headerlink" title="多任务版TCP服务端程序开发"></a>多任务版TCP服务端程序开发</h3><hr><p>完成多任务，可以使用线程，比进程更加节省内存资源。</p><p>实现步骤：</p><ol><li>编写一个TCP服务端程序，循环等待接受客户端的连接请求。</li><li>当客户端和服务端建立连接成功，创建子线程，使用子线程专门处理客户端的请求，防止主线程阻塞。</li><li>把创建的子线程设置成为守护主线程，防止主线程无法退出。</li></ol><p>示例代码:</p><pre><code>import socketimport threading# 处理客户端的请求操作def handle_client_request(service_client_socket, ip_port):    # 循环接收客户端发送的数据    while True:        # 接收客户端发送的数据        recv_data = service_client_socket.recv(1024)        # 容器类型判断是否有数据可以直接使用if语句进行判断，如果容器类型里面有数据表示条件成立，否则条件失败        # 容器类型: 列表、字典、元组、字符串、set、range、二进制数据        if recv_data:            print(recv_data.decode(&quot;gbk&quot;), ip_port)            # 回复            service_client_socket.send(&quot;ok，问题正在处理中...&quot;.encode(&quot;gbk&quot;))        else:            print(&quot;客户端下线了:&quot;, ip_port)            break    # 终止和客户端进行通信    service_client_socket.close()if __name__ == &apos;__main__&apos;:    # 创建tcp服务端套接字    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # 设置端口号复用，让程序退出端口号立即释放    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)    # 绑定端口号    tcp_server_socket.bind((&quot;&quot;, 9090))    # 设置监听, listen后的套接字是被动套接字，只负责接收客户端的连接请求    tcp_server_socket.listen(128)    # 循环等待接收客户端的连接请求    while True:        # 等待接收客户端的连接请求        service_client_socket, ip_port = tcp_server_socket.accept()        print(&quot;客户端连接成功:&quot;, ip_port)        # 当客户端和服务端建立连接成功以后，需要创建一个子线程，不同子线程负责接收不同客户端的消息        sub_thread = threading.Thread(target=handle_client_request, args=(service_client_socket, ip_port))        # 设置守护主线程        sub_thread.setDaemon(True)        # 启动子线程        sub_thread.start()    # tcp服务端套接字可以不需要关闭，因为服务端程序需要一直运行    # tcp_server_socket.close()</code></pre><hr><h3 id="socket之send和recv原理剖析"><a href="#socket之send和recv原理剖析" class="headerlink" title="socket之send和recv原理剖析"></a>socket之send和recv原理剖析</h3><hr><p>当创建一个TCP socket对象的时候会有一个发送缓冲区和一个接收缓冲区，这个发送和接收缓冲区指的就是内存中的一片空间。</p><p>send原理剖析：send是不是直接把数据发给服务端?不是，要想发数据，必须得通过网卡发送数据，应用程序是无法直接通过网卡发送数据的，它需要调用操作系统接口，也就是说，应用程序把发送的数据先写入到发送缓冲区(内存中的一片空间)，再由操作系统控制网卡把发送缓冲区的数据发送给服务端网卡。</p><p>recv原理剖析：recv是不是直接从客户端接收数据?不是，应用软件是无法直接通过网卡接收数据的，它需要调用操作系统接口，由操作系统通过网卡接收数据，把接收的数据写入到接收缓冲区(内存中的一片空间），应用程序再从接收缓存区获取客户端发送的数据。</p><p>不管是recv还是send都不是直接接收到对方的数据和发送数据到对方，发送数据会写入到发送缓冲区，接收数据是从接收缓冲区来读取，发送数据和接收数据最终是由操作系统控制网卡来完成。</p><hr><h2 id="静态Web服务器"><a href="#静态Web服务器" class="headerlink" title="静态Web服务器"></a>静态Web服务器</h2><h3 id="启动python自带静态Web服务"><a href="#启动python自带静态Web服务" class="headerlink" title="启动python自带静态Web服务"></a>启动python自带静态Web服务</h3><hr><p>静态Web服务器：可以为发出请求的浏览器提供静态文档的程序。</p><p>搭建Python自带的静态Web服务器</p><pre><code>python -m http.server 端口号</code></pre><p>-m表示运行包里面的模块，执行这个命令的时候，需要进入你自己指定静态文件的目录，然后通过浏览器就能访问对应的html文件了，这样一个静态的web服务器就搭建好了。</p><hr><h3 id="开发自己的静态Web服务器"><a href="#开发自己的静态Web服务器" class="headerlink" title="开发自己的静态Web服务器"></a>开发自己的静态Web服务器</h3><hr><p>实现步骤:编写一个TCP服务端程序、获取浏览器发送的http请求报文数据、读取固定页面数据，把页面数据组装成HTTP响应报文数据发送给浏览器。HTTP响应报文数据发送完成以后，关闭服务于客户端的套接字。</p><p>示例代码：</p><pre><code>import socketif __name__ == &apos;__main__&apos;:    # 创建tcp服务端套接字    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # 设置端口号复用, 程序退出端口立即释放    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)    # 绑定端口号    tcp_server_socket.bind((&quot;&quot;, 9000))    # 设置监听    tcp_server_socket.listen(128)    while True:        # 等待接受客户端的连接请求        new_socket, ip_port = tcp_server_socket.accept()        # 代码执行到此，说明连接建立成功        recv_client_data = new_socket.recv(4096)        # 对二进制数据进行解码        recv_client_content = recv_client_data.decode(&quot;utf-8&quot;)        print(recv_client_content)        with open(&quot;static/index.html&quot;, &quot;rb&quot;) as file:            # 读取文件数据            file_data = file.read()        # 响应行        response_line = &quot;HTTP/1.1 200 OK\r\n&quot;        # 响应头        response_header = &quot;Server: PWS1.0\r\n&quot;        # 响应体        response_body = file_data        # 拼接响应报文        response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body        # 发送数据        new_socket.send(response_data)        # 关闭服务与客户端的套接字        new_socket.close()</code></pre><hr><h3 id="开发自己的静态Web服务器返回指定页面数据"><a href="#开发自己的静态Web服务器返回指定页面数据" class="headerlink" title="开发自己的静态Web服务器返回指定页面数据"></a>开发自己的静态Web服务器返回指定页面数据</h3><hr><p>返回指定页面数据的实现步骤:获取用户请求资源的路径；根据请求资源的路径，读取指定文件的数据；组装指定文件数据的响应报文，发送给浏览器；判断请求的文件在服务端不存在，组装404状态的响应报文，发送给浏览器。</p><pre><code>import socketdef main():    # 创建tcp服务端套接字    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # 设置端口号复用, 程序退出端口立即释放    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)    # 绑定端口号    tcp_server_socket.bind((&quot;&quot;, 9000))    # 设置监听    tcp_server_socket.listen(128)    while True:        # 等待接受客户端的连接请求        new_socket, ip_port = tcp_server_socket.accept()        # 代码执行到此，说明连接建立成功        recv_client_data = new_socket.recv(4096)        if len(recv_client_data) == 0:            print(&quot;关闭浏览器了&quot;)            new_socket.close()            return        # 对二进制数据进行解码        recv_client_content = recv_client_data.decode(&quot;utf-8&quot;)        print(recv_client_content)        # 根据指定字符串进行分割， 最大分割次数指定2        request_list = recv_client_content.split(&quot; &quot;, maxsplit=2)        # 获取请求资源路径        request_path = request_list[1]        print(request_path)        # 判断请求的是否是根目录，如果条件成立，指定首页数据返回        if request_path == &quot;/&quot;:            request_path = &quot;/index.html&quot;        try:            # 动态打开指定文件            with open(&quot;static&quot; + request_path, &quot;rb&quot;) as file:                # 读取文件数据                file_data = file.read()        except Exception as e:            # 请求资源不存在，返回404数据            # 响应行            response_line = &quot;HTTP/1.1 404 Not Found\r\n&quot;            # 响应头            response_header = &quot;Server: PWS1.0\r\n&quot;            with open(&quot;static/error.html&quot;, &quot;rb&quot;) as file:                file_data = file.read()            # 响应体            response_body = file_data            # 拼接响应报文            response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body            # 发送数据            new_socket.send(response_data)        else:            # 响应行            response_line = &quot;HTTP/1.1 200 OK\r\n&quot;            # 响应头            response_header = &quot;Server: PWS1.0\r\n&quot;            # 响应体            response_body = file_data            # 拼接响应报文            response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body            # 发送数据            new_socket.send(response_data)        finally:            # 关闭服务与客户端的套接字            new_socket.close()if __name__ == &apos;__main__&apos;:    main()</code></pre><hr><h3 id="静态Web服务器-多任务版"><a href="#静态Web服务器-多任务版" class="headerlink" title="静态Web服务器-多任务版"></a>静态Web服务器-多任务版</h3><hr><p>多任务版web服务器程序的实现步骤:当客户端和服务端建立连接成功，创建子线程，使用子线程专门处理客户端的请求，防止主线程阻塞。把创建的子线程设置成为守护主线程，防止主线程无法退出。</p><pre><code>import socketimport threading# 处理客户端的请求def handle_client_request(new_socket):    # 代码执行到此，说明连接建立成功    recv_client_data = new_socket.recv(4096)    if len(recv_client_data) == 0:        print(&quot;关闭浏览器了&quot;)        new_socket.close()        return    # 对二进制数据进行解码    recv_client_content = recv_client_data.decode(&quot;utf-8&quot;)    print(recv_client_content)    # 根据指定字符串进行分割， 最大分割次数指定2    request_list = recv_client_content.split(&quot; &quot;, maxsplit=2)    # 获取请求资源路径    request_path = request_list[1]    print(request_path)    # 判断请求的是否是根目录，如果条件成立，指定首页数据返回    if request_path == &quot;/&quot;:        request_path = &quot;/index.html&quot;    try:        # 动态打开指定文件        with open(&quot;static&quot; + request_path, &quot;rb&quot;) as file:            # 读取文件数据            file_data = file.read()    except Exception as e:        # 请求资源不存在，返回404数据        # 响应行        response_line = &quot;HTTP/1.1 404 Not Found\r\n&quot;        # 响应头        response_header = &quot;Server: PWS1.0\r\n&quot;        with open(&quot;static/error.html&quot;, &quot;rb&quot;) as file:            file_data = file.read()        # 响应体        response_body = file_data        # 拼接响应报文        response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body        # 发送数据        new_socket.send(response_data)    else:        # 响应行        response_line = &quot;HTTP/1.1 200 OK\r\n&quot;        # 响应头        response_header = &quot;Server: PWS1.0\r\n&quot;        # 响应体        response_body = file_data        # 拼接响应报文        response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body        # 发送数据        new_socket.send(response_data)    finally:        # 关闭服务与客户端的套接字        new_socket.close()# 程序入口函数def main():    # 创建tcp服务端套接字    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # 设置端口号复用, 程序退出端口立即释放    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)    # 绑定端口号    tcp_server_socket.bind((&quot;&quot;, 9000))    # 设置监听    tcp_server_socket.listen(128)    while True:        # 等待接受客户端的连接请求        new_socket, ip_port = tcp_server_socket.accept()        print(ip_port)        # 当客户端和服务器建立连接程，创建子线程        sub_thread = threading.Thread(target=handle_client_request, args=(new_socket,))        # 设置守护主线程        sub_thread.setDaemon(True)        # 启动子线程执行对应的任务        sub_thread.start()if __name__ == &apos;__main__&apos;:    main()</code></pre><hr><h3 id="静态Web服务器-面向对象开发"><a href="#静态Web服务器-面向对象开发" class="headerlink" title="静态Web服务器-面向对象开发"></a>静态Web服务器-面向对象开发</h3><hr><p>实现步骤:把提供服务的Web服务器抽象成一个类(HTTPWebServer)；提供Web服务器的初始化方法，在初始化方法里面创建socket对象；提供一个开启Web服务器的方法，让Web服务器处理客户端请求操作。</p><pre><code>import socketimport threading# 定义web服务器类class HttpWebServer(object):    def __init__(self):        # 创建tcp服务端套接字        tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        # 设置端口号复用, 程序退出端口立即释放        tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)        # 绑定端口号        tcp_server_socket.bind((&quot;&quot;, 9000))        # 设置监听        tcp_server_socket.listen(128)        # 保存创建成功的服务器套接字        self.tcp_server_socket = tcp_server_socket    # 处理客户端的请求    @staticmethod    def handle_client_request(new_socket):        # 代码执行到此，说明连接建立成功        recv_client_data = new_socket.recv(4096)        if len(recv_client_data) == 0:            print(&quot;关闭浏览器了&quot;)            new_socket.close()            return        # 对二进制数据进行解码        recv_client_content = recv_client_data.decode(&quot;utf-8&quot;)        print(recv_client_content)        # 根据指定字符串进行分割， 最大分割次数指定2        request_list = recv_client_content.split(&quot; &quot;, maxsplit=2)        # 获取请求资源路径        request_path = request_list[1]        print(request_path)        # 判断请求的是否是根目录，如果条件成立，指定首页数据返回        if request_path == &quot;/&quot;:            request_path = &quot;/index.html&quot;        try:            # 动态打开指定文件            with open(&quot;static&quot; + request_path, &quot;rb&quot;) as file:                # 读取文件数据                file_data = file.read()        except Exception as e:            # 请求资源不存在，返回404数据            # 响应行            response_line = &quot;HTTP/1.1 404 Not Found\r\n&quot;            # 响应头            response_header = &quot;Server: PWS1.0\r\n&quot;            with open(&quot;static/error.html&quot;, &quot;rb&quot;) as file:                file_data = file.read()            # 响应体            response_body = file_data            # 拼接响应报文            response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body            # 发送数据            new_socket.send(response_data)        else:            # 响应行            response_line = &quot;HTTP/1.1 200 OK\r\n&quot;            # 响应头            response_header = &quot;Server: PWS1.0\r\n&quot;            # 响应体            response_body = file_data            # 拼接响应报文            response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body            # 发送数据            new_socket.send(response_data)        finally:            # 关闭服务与客户端的套接字            new_socket.close()    # 启动web服务器进行工作    def start(self):        while True:            # 等待接受客户端的连接请求            new_socket, ip_port = self.tcp_server_socket.accept()            # 当客户端和服务器建立连接程，创建子线程            sub_thread = threading.Thread(target=self.handle_client_request, args=(new_socket,))            # 设置守护主线程            sub_thread.setDaemon(True)            # 启动子线程执行对应的任务            sub_thread.start()# 程序入口函数def main():    # 创建web服务器对象    web_server = HttpWebServer()    # 启动web服务器进行工作    web_server.start()if __name__ == &apos;__main__&apos;:    main()</code></pre><hr><h3 id="命令行启动动态绑定端口号"><a href="#命令行启动动态绑定端口号" class="headerlink" title="命令行启动动态绑定端口号"></a>命令行启动动态绑定端口号</h3><hr><p>实现步骤:获取执行python程序的终端命令行参数;判断参数的类型，设置端口号必须是整型;给Web服务器类的初始化方法添加一个端口号参数，用于绑定端口号。</p><pre><code>import socketimport threadingimport sys# 定义web服务器类class HttpWebServer(object):    def __init__(self, port):        # 创建tcp服务端套接字        tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        # 设置端口号复用, 程序退出端口立即释放        tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)        # 绑定端口号        tcp_server_socket.bind((&quot;&quot;, port))        # 设置监听        tcp_server_socket.listen(128)        # 保存创建成功的服务器套接字        self.tcp_server_socket = tcp_server_socket    # 处理客户端的请求    @staticmethod    def handle_client_request(new_socket):        # 代码执行到此，说明连接建立成功        recv_client_data = new_socket.recv(4096)        if len(recv_client_data) == 0:            print(&quot;关闭浏览器了&quot;)            new_socket.close()            return        # 对二进制数据进行解码        recv_client_content = recv_client_data.decode(&quot;utf-8&quot;)        print(recv_client_content)        # 根据指定字符串进行分割， 最大分割次数指定2        request_list = recv_client_content.split(&quot; &quot;, maxsplit=2)        # 获取请求资源路径        request_path = request_list[1]        print(request_path)        # 判断请求的是否是根目录，如果条件成立，指定首页数据返回        if request_path == &quot;/&quot;:            request_path = &quot;/index.html&quot;        try:            # 动态打开指定文件            with open(&quot;static&quot; + request_path, &quot;rb&quot;) as file:                # 读取文件数据                file_data = file.read()        except Exception as e:            # 请求资源不存在，返回404数据            # 响应行            response_line = &quot;HTTP/1.1 404 Not Found\r\n&quot;            # 响应头            response_header = &quot;Server: PWS1.0\r\n&quot;            with open(&quot;static/error.html&quot;, &quot;rb&quot;) as file:                file_data = file.read()            # 响应体            response_body = file_data            # 拼接响应报文            response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body            # 发送数据            new_socket.send(response_data)        else:            # 响应行            response_line = &quot;HTTP/1.1 200 OK\r\n&quot;            # 响应头            response_header = &quot;Server: PWS1.0\r\n&quot;            # 响应体            response_body = file_data            # 拼接响应报文            response_data = (response_line + response_header + &quot;\r\n&quot;).encode(&quot;utf-8&quot;) + response_body            # 发送数据            new_socket.send(response_data)        finally:            # 关闭服务与客户端的套接字            new_socket.close()    # 启动web服务器进行工作    def start(self):        while True:            # 等待接受客户端的连接请求            new_socket, ip_port = self.tcp_server_socket.accept()            # 当客户端和服务器建立连接程，创建子线程            sub_thread = threading.Thread(target=self.handle_client_request, args=(new_socket,))            # 设置守护主线程            sub_thread.setDaemon(True)            # 启动子线程执行对应的任务            sub_thread.start()# 程序入口函数def main():    print(sys.argv)    # 判断命令行参数是否等于2,    if len(sys.argv) != 2:        print(&quot;执行命令如下: python3 xxx.py 8000&quot;)        return    # 判断字符串是否都是数字组成    if not sys.argv[1].isdigit():        print(&quot;执行命令如下: python3 xxx.py 8000&quot;)        return    # 获取终端命令行参数    port = int(sys.argv[1])    # 创建web服务器对象    web_server = HttpWebServer(port)    # 启动web服务器进行工作    web_server.start()if __name__ == &apos;__main__&apos;:    main()</code></pre><hr><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>数据库就是存储和管理数据的仓库，数据按照一定的格式进行存储，用户可以对数据库中的数据进行增加、修改、删除、查询等操作。</p><p>数据库的分类：关系型数据库和非关系型数据库。</p><p>关系型数据库:是指采用了关系模型来组织数据的数据库，简单来说，关系模型指的就是二维表格模型。</p><p>关系型数据库中核心元素：数据行、数据列、数据表、数据库(数据表的集合)。</p><p>常用的关系型数据库:Oracle、Microsoft SQL Server、MySQL、SQLite。</p><p>非关系型数据库，又被称为NoSQL（Not Only SQL )，意为不仅仅是SQL，对NoSQL最普遍的定义是“非关联型的”，强调 Key-Value 的方式存储数据。</p><p>常用的非关系型数据库:MongoDB、Redis。</p><p>数据库管理系统（英语全拼：Relational Database Management System，简称RDBMS）是为管理关系型数据库而设计的软件系统，如果大家想要使用关系型数据库就需要安装数据库管理系统，其实就是一个应用软件。</p><p>SQL(Structured Query Language)是结构化查询语言，是一种用来操作RDBMS的数据库的语言。也就是说通过 SQL 可以操作 oracle,sql server,mysql,sqlite 等关系型的数据库。</p><p>SQL的作用是实现数据库客户端和数据库服务端之间的通信，SQL就是通信的桥梁。</p><p>SQL语言主要分为：</p><pre><code>DQL：数据查询语言，用于对数据进行查询，如selectDML：数据操作语言，对数据进行增加、修改、删除，如insert、update、deleteTPL：事务处理语言，对事务进行处理，包括begin transaction、commit、rollbackDCL：数据控制语言，进行授权与权限回收，如grant、revokeDDL：数据定义语言，进行数据库、表的管理等，如create、drop</code></pre><p>对于程序员来讲，重点是数据的增、删、改、查，必须熟练编写DQL、DML，能够编写DDL完成数据库、表的操作，其它操作如TPL、DCL了解即可。SQL语言不区分大小写。</p><hr><h3 id="数据类型和约束"><a href="#数据类型和约束" class="headerlink" title="数据类型和约束"></a>数据类型和约束</h3><hr><p>数据库中的数据保存在数据表中，在表中为了更加准确的存储数据，保证数据的正确有效，可以在创建表的时候，为表添加一些强制性的验证，比如:数据类型和约束。</p><p>数据类型是指在创建表的时候为表中字段指定数据类型，只有数据符合类型要求才能存储起来，使用数据类型的原则是:够用就行，尽量使用取值范围小的，而不用大的，这样可以更多的节省存储空间。</p><p>常用数据类型如下:</p><pre><code>整数：int，bit小数：decimal字符串：varchar,char日期时间: date, time, datetime枚举类型(enum)</code></pre><ol><li>decimal表示浮点数，如 decimal(5, 2) 表示共存5位数，小数占 2 位.</li><li>char表示固定长度的字符串，如char(3)，如果填充’ab’时会补一个空格为’ab ‘，3表示字符数</li><li>varchar表示可变长度的字符串，如varchar(3)，填充’ab’时就会存储’ab’，3表示字符数</li><li>对于图片、音频、视频等文件，不存储在数据库中，而是上传到某个服务器上，然后在表中存储这个文件的保存路径.</li><li>字符串 text 表示存储大文本，当字符大于 4000 时推荐使用, 比如技术博客</li></ol><p>数据约束<br>约束是指数据在数据类型限定的基础上额外增加的要求.</p><p>常见的约束如下:</p><pre><code>主键 primary key: 物理上存储的顺序. MySQL 建议所有表的主键字段都叫 id, 类型为 int unsigned.非空 not null: 此字段不允许填写空值.惟一 unique: 此字段的值不允许重复.默认 default: 当不填写字段对应的值会使用默认值，如果填写时以填写为准.外键 foreign key: 对关系字段进行约束, 当为关系字段填写值时, 会到关联的表中查询此值是否存在, 如果存在则填写成功, 如果不存在则填写失败并抛出异常.</code></pre><p>整数类型：</p><table><thead><tr><th>类型</th><th>字节大小</th><th>有符号范围(Signed)</th><th>无符号范围(Unsigned)</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128 ~ 127</td><td>0 ~ 255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768 ~ 32767</td><td>0 ~ 65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608 ~ 8388607</td><td>0 ~ 16777215</td></tr><tr><td>INT/INTEGER</td><td>4</td><td>-2147483648 ~2147483647</td><td>0 ~ 4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808 ~ 9223372036854775807</td><td>0 ~ 18446744073709551615</td></tr></tbody></table><p>字符串：</p><table><thead><tr><th>类型</th><th>说明</th><th>使用场景</th></tr></thead><tbody><tr><td>CHAR</td><td>固定长度，小型数据</td><td>身份证号、手机号、电话、密码</td></tr><tr><td>VARCHAR</td><td>可变长度，小型数据</td><td>姓名、地址、品牌、型号</td></tr><tr><td>TEXT</td><td>可变长度，字符个数大于 4000</td><td>存储小型文章或者新闻</td></tr><tr><td>LONGTEXT</td><td>可变长度， 极大型文本数据</td><td>存储极大型文本数据</td></tr></tbody></table><p>时间类型：</p><table><thead><tr><th>类型</th><th>字节大小</th><th>示例</th></tr></thead><tbody><tr><td>DATE</td><td>4</td><td>‘2020-01-01’</td></tr><tr><td>TIME</td><td>3</td><td>‘12:29:59’</td></tr><tr><td>DATETIME</td><td>8</td><td>‘2020-01-01 12:29:59’</td></tr><tr><td>YEAR</td><td>1</td><td>‘2017’</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>‘1970-01-01 00:00:01’ UTC ~ ‘2038-01-01 00:00:01’ UTC</td></tr></tbody></table><hr><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><hr><p>Navicat 是一个数据库图形化客户端软件, 可以以安全并且简单的方式对数据库进行操作。</p><p>新建数据库：字符集: 就是编码格式，选择<code>utf8</code>的国际通用编码格式, 支持中文。排序规则: <code>utf8_general_ci</code> 表示大小写不敏感，不区分大小写字母,a 和 A 在字符判断中会被当做一样的处理，区分大小写可以选择<code>utf8_bin</code>。</p><hr><h3 id="命令行客户端MySQL的使用"><a href="#命令行客户端MySQL的使用" class="headerlink" title="命令行客户端MySQL的使用"></a>命令行客户端MySQL的使用</h3><hr><p>登录数据库:</p><pre><code>mysql -uroot -p</code></pre><p>显示当前时间：</p><pre><code>select now();</code></pre><p>登出(退出)数据库:</p><pre><code>quit 或 exit 或 ctrl + d</code></pre><hr><p>数据库操作</p><p>查看所有数据库：</p><pre><code>show databases;</code></pre><p>创建数据库：</p><pre><code>create database 数据库名 charset=utf8;例：create database python charset=utf8;</code></pre><p>使用数据库：</p><pre><code>use 数据库名;</code></pre><p>查看当前使用的数据库：</p><pre><code>select database();</code></pre><p>删除数据库-慎重：</p><pre><code>drop database 数据库名;例：drop database python;</code></pre><hr><p>表结构操作</p><p>查看当前数据库中所有表：</p><pre><code>show tables;</code></pre><p>创建表：</p><pre><code>create table students( id int unsigned primary key auto_increment not null, name varchar(20) not null, age tinyint unsigned default 0, height decimal(5,2), gender enum(&apos;男&apos;,&apos;女&apos;,&apos;人妖&apos;,&apos;保密&apos;));</code></pre><p>说明:</p><pre><code>create table 表名(字段名称 数据类型  可选的约束条件,column1 datatype contrai,...);</code></pre><p>修改表-添加字段：</p><pre><code>alter table 表名 add 列名 类型 约束;例：alter table students add birthday datetime;</code></pre><p>修改表-修改字段类型：</p><pre><code>alter table 表名 modify 列名 类型 约束;例：alter table students modify birthday date not null;</code></pre><p>说明:</p><pre><code>modify: 只能修改字段类型或者约束，不能修改字段名</code></pre><p>修改表-修改字段名和字段类型：</p><pre><code>alter table 表名 change 原名 新名 类型及约束;例：alter table students change birthday birth datetime not null;</code></pre><p>说明:</p><pre><code>change: 既能对字段重命名又能修改字段类型还能修改约束</code></pre><p>修改表-删除字段：</p><pre><code>alter table 表名 drop 列名;例：alter table students drop birthday;</code></pre><p>查看创表SQL语句：</p><pre><code>show create table 表名;例：show create table students;</code></pre><p>查看创库SQL语句：</p><pre><code>show create database 数据库名;例：show create database mytest;</code></pre><p>删除表：</p><pre><code>drop table 表名;例：drop table students;</code></pre><hr><p>表数据操作</p><p>查询数据：</p><pre><code>1. 查询所有列select * from 表名;例：select * from students;2. 查询指定列select 列1,列2,... from 表名;例：select id,name from students;</code></pre><p>添加数据：</p><pre><code>1. 全列插入：值的顺序与表结构字段的顺序完全一一对应insert into 表名 values (...)例:insert into students values(0, &apos;xx&apos;, default, default, &apos;男&apos;);2. 部分列插入：值的顺序与给出的列顺序对应insert into 表名 (列1,...) values(值1,...)例:insert into students(name, age) values(&apos;王二小&apos;, 15);3. 全列多行插入insert into 表名 values(...),(...)...;例:insert into students values(0, &apos;张飞&apos;, 55, 1.75, &apos;男&apos;),(0, &apos;关羽&apos;, 58, 1.85, &apos;男&apos;);4. 部分列多行插入insert into 表名(列1,...) values(值1,...),(值1,...)...;例：insert into students(name, height) values(&apos;刘备&apos;, 1.75),(&apos;曹操&apos;, 1.6);</code></pre><p>说明:</p><p>主键列是自动增长，但是在全列插入时需要占位，通常使用空值(0或者null或者default)。在全列插入时，如果字段列有默认值可以使用 default 来占位，插入后的数据就是之前设置的默认值</p><p>修改数据：</p><pre><code>update 表名 set 列1=值1,列2=值2... where 条件例：update students set age = 18, gender = &apos;女&apos; where id = 6;</code></pre><p>删除数据：</p><pre><code>delete from 表名 where 条件例：delete from students where id=5;</code></pre><p>问题:上面的操作称之为物理删除，一旦删除就不容易恢复，我们可以使用逻辑删除的方式来解决这个问题。</p><pre><code>添加删除表示字段，0表示未删除 1表示删除alter table students add isdelete bit default 0;逻辑删除数据update students set isdelete = 1 where id = 8;</code></pre><p>说明:逻辑删除，本质就是修改操作。</p><hr><h3 id="as和distinct关键字"><a href="#as和distinct关键字" class="headerlink" title="as和distinct关键字"></a>as和distinct关键字</h3><hr><p>as关键字：在使用SQL语句显示结果的时候，往往在屏幕显示的字段名并不具备良好的可读性，此时可以使用 as 给字段起一个别名。</p><p>使用 as 给字段起别名：</p><pre><code>select id as 序号, name as 名字, gender as 性别 from students;</code></pre><p>可以通过 as 给表起别名</p><pre><code>-- 如果是单表查询 可以省略表名select id, name, gender from students;-- 表名.字段名select students.id,students.name,students.gender from students;-- 可以通过 as 给表起别名 select s.id,s.name,s.gender from students as s;</code></pre><hr><p>distinct关键字：distinct可以去除重复数据行。</p><pre><code>select distinct 列1,... from 表名;例： 查询班级中学生的性别select name, gender from students;-- 看到了很多重复数据 想要对其中重复数据行进行去重操作可以使用 distinctselect distinct name, gender from students;</code></pre><hr><h3 id="where条件查询"><a href="#where条件查询" class="headerlink" title="where条件查询"></a>where条件查询</h3><hr><p>使用where条件查询可以对表中的数据进行筛选，条件成立的记录会出现在结果集中。</p><p>格式如下:</p><pre><code>select * from 表名 where 条件;例：select * from students where id = 1;</code></pre><p>比较运算符查询（=、&gt;、&gt;=、&lt;、&lt;=、!= 或 &lt;&gt;）：</p><pre><code>例1：查询编号大于3的学生:select * from students where id &gt; 3;例2：查询编号不大于4的学生:select * from students where id &lt;= 4;例3：查询姓名不是“黄蓉”的学生:select * from students where name != &apos;黄蓉&apos;;例4：查询没被删除的学生:select * from students where is_delete=0;</code></pre><p>逻辑运算符查询（and、or、not）</p><pre><code>例1：查询编号大于3的女同学:select * from students where id &gt; 3 and gender=0;例2：查询编号小于4或没被删除的学生:select * from students where id &lt; 4 or is_delete=0;例3：查询年龄不在10岁到15岁之间的学生:select * from students where not (age &gt;= 10 and age &lt;= 15);</code></pre><p>说明:多个条件判断想要作为一个整体，可以结合<code>()</code>。</p><p>模糊查询(like是模糊查询关键字、%表示任意多个任意字符、_表示一个任意字符）：</p><pre><code>例1：查询姓黄的学生:select * from students where name like &apos;黄%&apos;;例2：查询姓黄并且“名”是一个字的学生:select * from students where name like &apos;黄_&apos;;例3：查询姓黄或叫靖的学生:select * from students where name like &apos;黄%&apos; or name like &apos;%靖&apos;;</code></pre><p>范围查询(between .. and .. 表示在一个连续的范围内查询、in 表示在一个非连续的范围内查询）：</p><pre><code>例1：查询编号为3至8的学生:select * from students where id between 3 and 8;例2：查询编号不是3至8的男生:select * from students where (not id between 3 and 8) and gender=&apos;男&apos;;</code></pre><p>空判断查询（判断为空使用: is null、判断非空使用: is not null）：</p><pre><code>例1：查询没有填写身高的学生:select * from students where height is null;</code></pre><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><hr><p>排序查询语法：</p><pre><code>select * from 表名 order by 列1 asc|desc [,列2 asc|desc,...]</code></pre><p>语法说明:先按照列1进行排序，如果列1的值相同时，则按照 列2 排序，以此类推。asc从小到大排列，即升序。desc从大到小排序，即降序。默认按照列值从小到大排列（即asc）。</p><pre><code>例1：查询未删除男生信息，按学号降序:select * from students where gender=1 and is_delete=0 order by id desc;例2：显示所有的学生信息，先按照年龄从大--&gt;小排序，当年龄相同时 按照身高从高--&gt;矮排序:select * from students  order by age desc,height desc;</code></pre><hr><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><hr><p>分页查询的语法</p><pre><code>select * from 表名 limit start,count</code></pre><p>说明:limit是分页查询关键字；start表示开始行索引，默认是0；count表示查询条数。</p><pre><code>查询前3行男生信息:select * from students where gender=1 limit 0,3;简写：select * from students where gender=1 limit 3;</code></pre><p>已知每页显示m条数据，求第n页显示的数据</p><pre><code>查询学生表，获取第n页数据的SQL语句:select * from students limit (n-1)*m,m</code></pre><hr><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><hr><p>聚合函数又叫组函数，通常是对表中的数据进行统计和计算，一般结合分组(group by)来使用，用于统计和计算分组数据。</p><p>常用的聚合函数:</p><pre><code>count(col): 表示求指定列的总行数max(col): 表示求指定列的最大值min(col): 表示求指定列的最小值sum(col): 表示求指定列的和avg(col): 表示求指定列的平均值</code></pre><p>求总行数</p><pre><code>-- 返回非NULL数据的总行数.select count(height) from students; -- 返回总行数，包含null值记录;select count(*) from students;</code></pre><p>求最大值</p><pre><code>-- 查询女生的编号最大值select max(id) from students where gender = 2;</code></pre><p>求最小值</p><pre><code>-- 查询未删除的学生最小编号select min(id) from students where is_delete = 0;</code></pre><p>求和</p><pre><code>-- 查询男生的总身高select sum(height) from students where gender = 1;-- 平均身高select sum(height) / count(*) from students where gender = 1;</code></pre><p>求平均值</p><pre><code>-- 求男生的平均身高, 聚合函数不统计null值，平均身高有误select avg(height) from students where gender = 1;-- 求男生的平均身高, 包含身高是null的select avg(ifnull(height,0)) from students where gender = 1;</code></pre><p>说明：ifnull函数: 表示判断指定字段的值是否为null，如果为空使用自己提供的值。</p><p>聚合函数的特点：聚合函数默认忽略字段为null的记录，要想列值为null的记录也参与计算，必须使用ifnull函数对null值做替换。</p><hr><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><hr><p>分组查询介绍：将查询结果按照指定字段进行分组，字段中数据相等的分为一组。</p><p>语法格式如下：</p><pre><code>GROUP BY 列名 [HAVING 条件表达式] [WITH ROLLUP]</code></pre><p>说明:列名: 是指按照指定字段的值进行分组。HAVING 条件表达式: 用来过滤分组后的数据。WITH ROLLUP：在所有记录的最后加上一条记录，显示select查询时聚合函数的统计和计算结果。</p><p>group by可用于单个字段分组，也可用于多个字段分组：</p><pre><code>-- 根据gender字段来分组select gender from students group by gender;-- 根据name和gender字段进行分组select name, gender from students group by name, gender;</code></pre><p>group_concat(字段名): 统计每个分组指定字段的信息集合，每个信息之间使用逗号进行分割：</p><pre><code>-- 根据gender字段进行分组， 查询gender字段和分组的name字段信息select gender,group_concat(name) from students group by gender;</code></pre><p><code>group by + 聚合函数</code>的使用:</p><pre><code>-- 统计不同性别的人的平均年龄select gender,avg(age) from students group by gender;-- 统计不同性别的人的个数select gender,count(*) from students group by gender;</code></pre><p><code>group by + having</code>的使用:</p><pre><code>-- 根据gender字段进行分组，统计分组条数大于2的select gender,count(*) from students group by gender having count(*)&gt;2;</code></pre><p><code>group by + with rollup</code>的使用:</p><pre><code>-- 根据gender字段进行分组，汇总总人数select gender,count(*) from students group by gender with rollup;-- 根据gender字段进行分组，汇总所有人的年龄select gender,group_concat(age) from students group by gender with rollup;</code></pre><hr><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><hr><p>连接查询可以实现多个表的查询，当查询的字段数据来自不同的表就可以使用连接查询来完成。</p><p>连接查询可以分为:内连接查询、左连接查询、右连接查询、自连接查询。</p><p>内连接查询：查询<strong>两个表中符合条件的共有记录</strong>。</p><p>语法格式:</p><pre><code>select 字段 from 表1 inner join 表2 on 表1.字段1 = 表2.字段2</code></pre><p>说明:inner join 就是内连接查询关键字。on 就是连接查询条件</p><pre><code>例1：使用内连接查询学生表与班级表:select * from students as s inner join classes as c on s.cls_id = c.id;</code></pre><hr><h3 id="左连接查询"><a href="#左连接查询" class="headerlink" title="左连接查询"></a>左连接查询</h3><hr><p>左连接查询：以左表为主根据条件查询右表数据，如果根据条件查询右表数据不存在使用null值填充。</p><p>语法格式:</p><pre><code>select 字段 from 表1 left join 表2 on 表1.字段1 = 表2.字段2</code></pre><p>说明:left join 就是左连接查询关键字；on 就是连接查询条件；表1是左表；表2是右表。</p><pre><code>例1：使用左连接查询学生表与班级表:select * from students as s left join classes as c on s.cls_id = c.id;</code></pre><hr><h3 id="右连接查询"><a href="#右连接查询" class="headerlink" title="右连接查询"></a>右连接查询</h3><hr><p>以右表为主根据条件查询左表数据，如果根据条件查询左表数据不存在使用null值填充。</p><p>右连接查询语法格式:</p><pre><code>select 字段 from 表1 right join 表2 on 表1.字段1 = 表2.字段2</code></pre><p>说明:right join 就是右连接查询关键字；on 就是连接查询条件；表1是左表；表2是右表。</p><pre><code>使用右连接查询学生表与班级表:select * from students as s right join classes as c on s.cls_id = c.id;</code></pre><hr><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><hr><p>左表和右表是<strong>同一个表</strong>，根据连接查询条件查询两个表中的数据。</p><p>自连接查询的用法:</p><pre><code>select c.id, c.title, c.pid, p.title from areas as c inner join areas as p on c.pid = p.id where p.title = &apos;山西省&apos;;</code></pre><hr><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><hr><p>在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句，外部那个select语句则称为主查询.</p><p>主查询和子查询的关系:子查询是嵌入到主查询中;子查询是辅助主查询的,要么充当条件,要么充当数据源;子查询是可以独立存在的语句,是一条完整的 select 语句。</p><pre><code>例1. 查询大于平均年龄的学生:select * from students where age &gt; (select avg(age) from students);例2. 查询学生在班的所有班级名字:select name from classes where id in (select cls_id from students where cls_id is not null);例3. 查找年龄最大,身高最高的学生:select * from students where (age, height) =  (select max(age), max(height) from students);</code></pre><hr><h3 id="数据库设计之三范式"><a href="#数据库设计之三范式" class="headerlink" title="数据库设计之三范式"></a>数据库设计之三范式</h3><hr><p>第一范式（1NF）: 强调的是列的原子性，即列不能够再分成其他几列。</p><p>第二范式（2NF）: 满足 1NF，另外包含两部分内容，一是表必须有一个主键；二是非主键字段必须完全依赖于主键，而不能只依赖于主键的一部分。</p><p>第三范式（3NF）: 满足 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p><p>E-R模型即实体-关系模型，E-R模型就是描述数据库存储数据的结构模型。E-R模型由实体、属性、实体之间的关系构成，主要用来描述数据库中表结构。</p><hr><h3 id="外键SQL语句的编写"><a href="#外键SQL语句的编写" class="headerlink" title="外键SQL语句的编写"></a>外键SQL语句的编写</h3><hr><p>外键约束:对外键字段的值进行更新和插入时会和引用表中字段的数据进行验证，数据如果不合法则更新和插入会失败，保证数据的有效性。</p><p>添加外键约束: </p><pre><code>alter table 从表 add foreign key(外键字段) references 主表(主键字段);</code></pre><p>删除外键约束: </p><pre><code>alter table 表名 drop foreign key 外键名;</code></pre><p>对于已经存在的字段添加外键约束：</p><pre><code>-- 为cls_id字段添加外键约束alter table students add foreign key(cls_id) references classes(id);</code></pre><p>在创建数据表时设置外键约束：</p><pre><code>-- 创建学校表create table school(    id int not null primary key auto_increment,     name varchar(10));-- 创建老师表create table teacher(    id int not null primary key auto_increment,     name varchar(10),     s_id int not null,     foreign key(s_id) references school(id));</code></pre><p>删除外键约束</p><pre><code>-- 需要先获取外键约束名称,该名称系统会自动生成,可以通过查看表创建语句来获取名称show create table teacher;-- 获取名称之后就可以根据名称来删除外键约束alter table teacher drop foreign key 外键名;</code></pre><hr><h3 id="将查询结果插入到其它表中"><a href="#将查询结果插入到其它表中" class="headerlink" title="将查询结果插入到其它表中"></a>将查询结果插入到其它表中</h3><hr><p>把查询结果插入到指定表中，也就是表复制:</p><pre><code>insert into .. select .. SQL语句</code></pre><p>把goods表中的cate_name商品分类添加到good_cates商品分类表:</p><pre><code>-- 查询goods表中商品的分类信息select cate_name from goods group by cate_name;-- 将查询结果插入到good_cates表中insert into good_cates(name) select cate_name from goods group by cate_name;-- 添加移动设备分类信息insert into good_cates(name) values(&apos;移动设备&apos;);</code></pre><hr><h3 id="使用连接更新表中某个字段数据"><a href="#使用连接更新表中某个字段数据" class="headerlink" title="使用连接更新表中某个字段数据"></a>使用连接更新表中某个字段数据</h3><hr><p>连接更新表中数据使用: </p><pre><code>update .. join .. </code></pre><p>将goods表中的分类名称更改成商品分类表中对应的分类id</p><pre><code>-- 查看goods表中的商品分类名称对应的商品分类idselect * from goods inner join good_cates on goods.cate_name = good_cates.name;-- 把该语句中from 后的语句理解为一张虚表  update goods g inner join good_cates gc on g.cate_name=gc.name set g.cate_name=gc.id;</code></pre><hr><h3 id="创建表并给某个字段添加数据"><a href="#创建表并给某个字段添加数据" class="headerlink" title="创建表并给某个字段添加数据"></a>创建表并给某个字段添加数据</h3><hr><p>创建表并给字段插入数据使用: </p><pre><code>create table .. select 语句</code></pre><p>创建品牌表</p><pre><code>-- 查询品牌信息 select brand_name from goods group by brand_name;-- 通过create table ...select来创建数据表并且同时插入数据-- 创建商品分类表，注意: 需要对brand_name 用as起别名，否则name字段就没有值create table good_brands (     id int unsigned primary key auto_increment,     name varchar(40) not null) select brand_name as name from goods group by brand_name;</code></pre><p>说明:<code>create table .. select 列名 ..</code>表示创建表并插入数据</p><p>更新goods表中的品牌信息</p><pre><code>-- 将goods表中的品牌名称更改成品牌表中对应的品牌idupdate goods as g inner join good_brands gb on g.brand_name = gb.name set g.brand_name = gb.id;</code></pre><hr><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><hr><pre><code>alter table 语句</code></pre><p>把 <code>cate_name</code> 和 <code>brand_name</code> 字段分别改成 <code>cate_id</code>和 <code>brand_id</code> 字段，类型都改成int类型:</p><pre><code>-- 查看表结构desc goods;-- 通过alter table语句修改表结构alter table goods change cate_name cate_id int not null, change brand_name brand_id int not null;</code></pre><hr><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><hr><p>事务就是用户定义的一系列执行SQL语句的操作, 这些操作要么完全地执行，要么完全地都不执行， 它是一个不可分割的工作执行单元。事务能够保证数据的完整性和一致性，让用户的操作更加安全。</p><p>事务的特性:</p><pre><code>原子性: 强调事务中的多个操作时一个整体一致性: 强调数据库中不会保存不一致状态隔离性: 强调数据库中事务之间相互不可见持久性: 强调数据库能永久保存数据，一旦提交就不可撤销</code></pre><p>MySQL数据库默认采用自动提交(autocommit)模式, 也就是说修改数据(insert、update、delete)的操作会自动的触发事务,完成事务的提交或者回滚。开启事务使用 begin 或者 start transaction;回滚事务使用 rollback。</p><p>常用的表的存储引擎是 InnoDB 和 MyISAM。InnoDB 是支持事务的；MyISAM 不支持事务，优势是访问速度快，对事务没有要求或者以select、insert为主的都可以使用该存储引擎来创建表。</p><p>事务演练的SQL语句:</p><pre><code>begin;insert into students(name) values(&apos;李白&apos;);-- 查询数据，此时有新增的数据, 注意: 如果这里后续没有执行提交事务操作，那么数据是没有真正的更新到物理表中select * from students;-- 只有这里提交事务，才把数据真正插入到物理表中commit;-- 新打开一个终端，重新连接MySQL数据库，查询students表,这时没有显示新增的数据，说明之前的事务没有提交，这就是事务的隔离性-- 一个事务所做的修改操作在提交事务之前，对于其他事务来说是不可见的select * from students;</code></pre><hr><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><hr><p>索引在MySQL中也叫做“键”，它是一个特殊的文件，它保存着数据表里所有记录的位置信息，更通俗的来说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度。</p><p>查看表中已有索引:</p><pre><code>show index from 表名;</code></pre><p>说明:主键列会自动创建索引</p><p>索引的创建:</p><pre><code>-- alter table 表名 add index 索引名[可选](列名, ..)-- 给name字段添加索引alter table classes add index my_name (name);</code></pre><p>说明:索引名不指定，默认使用字段名。</p><p>索引的删除:</p><pre><code>-- alter table 表名 drop index 索引名-- 如果不知道索引名，可以查看创表sql语句show create table classes;alter table classes drop index my_name;</code></pre><p>联合索引又叫复合索引，即一个索引覆盖表中两个或者多个字段，一般用在多个字段一起查询的时候。</p><pre><code>-- 创建联合索引alter table teacher add index (name,age);</code></pre><p>联合索引的好处:减少磁盘空间开销，因为每创建一个索引，其实就是创建了一个索引文件，那么会增加磁盘空间的开销。</p><p>联合索引的最左原则：在使用联合索引的时候，我们要遵守一个最左原则,即index(name,age)支持name、name和age组合查询,而不支持单独age 查询，因为没有用到创建的联合索引。</p><p>最左原则示例:</p><pre><code>-- 下面的查询使用到了联合索引select * from stu where name=&apos;张三&apos; -- 这里使用了联合索引的name部分select * from stu where name=&apos;李四&apos; and age=10 -- 这里完整的使用联合索引，包括 name 和 age 部分 -- 下面的查询没有使用到联合索引select * from stu where age=10 -- 因为联合索引里面没有这个组合，只有 name | name age 这两种组合</code></pre><hr><h2 id="PyMySQL的使用"><a href="#PyMySQL的使用" class="headerlink" title="PyMySQL的使用"></a>PyMySQL的使用</h2><hr><p>使用代码的方式操作数据库就称为数据库编程。</p><p>win电脑cd到python的安装目录Scripts文件夹下</p><p>安装：</p><pre><code>pip install pymysql</code></pre><p>pymysql的使用:</p><pre><code>#导包import pymysql#创建连接对象pymysql.connect(参数列表)#获取游标对象cursor =conn.cursor()#执行SQL语句row_count = cursor.execute(sql)#获取查询结果集result = cursor.fetchall()#将修改操作提交到数据库conn.commit()#回滚数据conn.rollback()#关闭游标cursor.close()#关闭连接conn.close()</code></pre><hr><p>查询操作:</p><pre><code>import pymysql# 创建连接对象conn = pymysql.connect(host=&apos;localhost&apos;, port=3306, user=&apos;root&apos;, password=&apos;*****&apos;, database=&apos;python&apos;, charset=&apos;utf8&apos;)# 获取游标对象cursor = conn.cursor()# 查询 SQL 语句sql = &quot;select * from test;&quot;# 执行 SQL 语句 返回值就是 SQL 语句在执行过程中影响的行数row_count = cursor.execute(sql)print(&quot;SQL 语句执行影响的行数%d&quot; % row_count)# 取出结果集中一行数据,　例如:(1, &apos;张三&apos;)#print(cursor.fetchone())# 取出结果集中的所有数据, 例如:((1, &apos;张三&apos;), (2, &apos;李四&apos;), (3, &apos;王五&apos;))for line in cursor.fetchall():    print(line)# 关闭游标cursor.close()# 关闭连接conn.close()</code></pre><hr><p>增删改操作：</p><pre><code>import pymysql# 创建连接对象conn = pymysql.connect(host=&apos;localhost&apos;, port=3306, user=&apos;root&apos;, password=&apos;824699&apos;,database=&apos;python&apos;, charset=&apos;utf8&apos;)# 获取游标对象cursor = conn.cursor()try:    # 添加 SQL 语句    # sql = &quot;insert into test(name) values(&apos;刘璐&apos;), (&apos;王美丽&apos;);&quot;    # 删除 SQ L语句    # sql = &quot;delete from test where id = 2;&quot;    # 修改 SQL 语句    sql = &quot;update test set name = &apos;王铁蛋&apos; where id = 1;&quot;    # 执行 SQL 语句    row_count = cursor.execute(sql)    print(&quot;SQL 语句执行影响的行数%d&quot; % row_count)    # 提交数据到数据库    conn.commit()except Exception as e:    # 回滚数据， 即撤销刚刚的SQL语句操作    conn.rollback()# 关闭游标cursor.close()# 关闭连接conn.close()</code></pre><hr><p>什么是SQL注入?用户提交带有恶意的数据与SQL语句进行字符串方式的拼接，从而影响了SQL语句的语义，最终产生数据泄露的现象。</p><p>如何防止SQL注入?SQL语句参数化</p><p>SQL语言中的参数使用%s来占位，此处不是python中的字符串格式化操作。将SQL语句中%s占位所需要的参数存在一个列表中，把参数列表传递给。execute方法中第二个参数。</p><p>防止SQL注入的示例代码:</p><pre><code>from pymysql import connectdef main():    find_name = input(&quot;请输入物品名称：&quot;)    # 创建Connection连接    conn = connect(host=&apos;localhost&apos;,port=3306,user=&apos;root&apos;,password=&apos;mysql&apos;,database=&apos;jing_dong&apos;,charset=&apos;utf8&apos;)    # 获得Cursor对象    cs1 = conn.cursor()    # 非安全的方式    # 输入 &apos; or 1 = 1 or &apos;   (单引号也要输入)    # sql = &quot;select * from goods where name=&apos;%s&apos;&quot; % find_name    # print(&quot;&quot;&quot;sql===&gt;%s&lt;====&quot;&quot;&quot; % sql)    # # 执行select语句，并返回受影响的行数：查询所有数据    # count = cs1.execute(sql)    # 安全的方式    # 构造参数列表    params = [find_name]    # 执行select语句，并返回受影响的行数：查询所有数据    count = cs1.execute(&quot;select * from goods where name=%s&quot;, params)    # 注意：    # 如果要是有多个参数，需要进行参数化    # 那么params = [数值1, 数值2....]，此时sql语句中有多个%s即可    # %s 不需要带引号    # 打印受影响的行数    print(count)    # 获取查询的结果    # result = cs1.fetchone()    result = cs1.fetchall()    # 打印查询的结果    print(result)    # 关闭Cursor对象    cs1.close()    # 关闭Connection对象    conn.close()if __name__ == &apos;__main__&apos;:    main()</code></pre><hr><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><hr><p>闭包的定义:在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，我们把这个使用外部函数变量的内部函数称为闭包。</p><p>闭包的形成条件:在函数嵌套(函数里面再定义函数)的前提下；内部函数使用了外部函数的变量(还包括外部函数的参数)；外部函数返回了内部函数。</p><p>示例代码</p><pre><code># 定义一个外部函数def func_out(num1):    # 定义一个内部函数    def func_inner(num2):        # 内部函数使用了外部函数的变量(num1)        result = num1 + num2        print(&quot;结果是:&quot;, result)    # 外部函数返回了内部函数，这里返回的内部函数就是闭包    return func_inner# 创建闭包实例    f = func_out(1)# 执行闭包f(2) #结果是: 3f(3) #结果是: 4</code></pre><p>闭包不仅可以保存外部函数的变量还可以提高代码的可重用行。</p><hr><p>修改闭包内使用的外部函数变量使用 nonlocal 关键字来完成。</p><pre><code># 定义一个外部函数def func_out(num1):    # 定义一个内部函数    def func_inner(num2):        # 这里本意想要修改外部num1的值，实际上是在内部函数定义了一个局部变量num1        nonlocal num1  # 告诉解释器，此处使用的是 外部变量a        # 修改外部变量num1        num1 = 10        # 内部函数使用了外部函数的变量(num1)        result = num1 + num2        print(&quot;结果是:&quot;, result)    #print(num1)    # func_inner(1)    # print(num1)    # 外部函数返回了内部函数，这里返回的内部函数就是闭包    return func_inner# 创建闭包实例f = func_out(1)# 执行闭包f(2) #结果是: 12</code></pre><hr><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><hr><p>就是给已有函数增加额外功能的函数，它本质上就是一个闭包函数。</p><p>装饰器的功能特点:不修改已有函数的源代码；不修改已有函数的调用方式；给已有函数增加额外的功能。</p><p>装饰器的语法格式:</p><pre><code># 装饰器# def decorator(fn): # fn:被装饰的目标函数.#     def inner():#         &apos;&apos;&apos;执行函数之前&apos;&apos;&apos;#         fn() # 执行被装饰的目标函数#         &apos;&apos;&apos;执行函数之后&apos;&apos;&apos;#     return inner</code></pre><p>示例代码：</p><pre><code># 添加一个登录验证的功能def check(fn):    def inner():        print(&quot;请先登录....&quot;)        fn()    return innerdef comment():    print(&quot;发表评论&quot;)# 使用装饰器来装饰函数comment = check(comment)comment()</code></pre><p>闭包函数有且只有一个参数，必须是函数类型，这样定义的函数才是装饰器。写代码要遵循开放封闭原则，它规定已经实现的功能代码不允许被修改，但可以被扩展。</p><hr><p>语法糖的书写格式是: <code>@装饰器名字</code>，通过语法糖的方式也可以完成对已有函数的装饰:</p><pre><code># 添加一个登录验证的功能def check(fn):    print(&quot;装饰器函数执行了&quot;)    def inner():        print(&quot;请先登录....&quot;)        fn()    return inner# 使用语法糖方式来装饰函数@checkdef comment():    print(&quot;发表评论&quot;)comment()</code></pre><hr><p>装饰器实现已有函数执行时间的统计:</p><pre><code>import time# 装饰器函数def get_time(func):    def inner():        begin = time.time()        func()        end = time.time()        print(&quot;函数执行花费%f&quot; % (end-begin))    return inner@get_timedef func1():    for i in range(100000):        print(i)func1()</code></pre><hr><p>装饰带有参数的函数:</p><pre><code># 添加输出日志的功能def logging(fn):    def inner(num1, num2):        print(&quot;--正在努力计算--&quot;)        fn(num1, num2)    return inner# 使用装饰器装饰函数@loggingdef sum_num(a, b):    result = a + b    print(result)sum_num(1, 2)</code></pre><hr><p>装饰带有返回值的函数:</p><pre><code># 添加输出日志的功能def logging(fn):    def inner(num1, num2):        print(&quot;--正在努力计算--&quot;)        result = fn(num1, num2)        return result    return inner# 使用装饰器装饰函数@loggingdef sum_num(a, b):    result = a + b    return resultresult = sum_num(1, 2)print(result)</code></pre><hr><p>装饰带有不定长参数的函数:</p><pre><code># 添加输出日志的功能def logging(fn):    def inner(*args, **kwargs):        print(&quot;--正在努力计算--&quot;)        fn(*args, **kwargs)    return inner# 使用语法糖装饰函数@loggingdef sum_num(*args, **kwargs):    result = 0    for value in args:        result += value    for value in kwargs.values():        result += value    print(result)sum_num(1, 2, a=10)</code></pre><hr><p>通用装饰器：</p><pre><code># 添加输出日志的功能def logging(fn):    def inner(*args, **kwargs):        print(&quot;--正在努力计算--&quot;)        result = fn(*args, **kwargs)        return result    return inner# 使用语法糖装饰函数@loggingdef sum_num(*args, **kwargs):    result = 0    for value in args:        result += value    for value in kwargs.values():        result += value    return result@loggingdef subtraction(a, b):    result = a - b    print(result)result = sum_num(1, 2, a=10)print(result)subtraction(4, 2)</code></pre><hr><p>多个装饰器的使用示例代码：</p><pre><code>def make_div(func):    &quot;&quot;&quot;对被装饰的函数的返回值 div标签&quot;&quot;&quot;    def inner(*args, **kwargs):        return &quot;&lt;div&gt;&quot; + func() + &quot;&lt;/div&gt;&quot;    return innerdef make_p(func):    &quot;&quot;&quot;对被装饰的函数的返回值 p标签&quot;&quot;&quot;    def inner(*args, **kwargs):        return &quot;&lt;p&gt;&quot; + func() + &quot;&lt;/p&gt;&quot;    return inner# 装饰过程: 1 content = make_p(content) 2 content = make_div(content)# content = make_div(make_p(content))@make_div@make_pdef content():    return &quot;人生苦短&quot;result = content()print(result)</code></pre><p>多个装饰器的装饰过程是: 离函数最近的装饰器先装饰，然后外面的装饰器再进行装饰，由内到外的装饰过程</p><hr><p>带有参数的装饰器:在装饰器外面再包裹上一个函数，让最外面的函数接收参数，返回的是装饰器，因为<code>@</code>符号后面必须是装饰器实例。</p><pre><code># 添加输出日志的功能def logging(flag):    def decorator(fn):        def inner(num1, num2):            if flag == &quot;+&quot;:                print(&quot;--正在努力加法计算--&quot;)            elif flag == &quot;-&quot;:                print(&quot;--正在努力减法计算--&quot;)            result = fn(num1, num2)            return result        return inner    # 返回装饰器    return decorator# 使用装饰器装饰函数@logging(&quot;+&quot;)def add(a, b):    result = a + b    return result@logging(&quot;-&quot;)def sub(a, b):    result = a - b    return resultresult = add(1, 2)print(result)result = sub(1, 2)print(result)</code></pre><hr><p>类装饰器：</p><pre><code>class Check(object):    def __init__(self, fn):        # 初始化操作在此完成        self.__fn = fn    # 实现__call__方法，表示对象是一个可调用对象，可以像调用函数一样进行调用。    def __call__(self, *args, **kwargs):        # 添加装饰功能        print(&quot;请先登陆...&quot;)        self.__fn()@Checkdef comment():    print(&quot;发表评论&quot;)comment()</code></pre><p><code>@Check</code> 等价于 <code>comment = Check(comment)</code>, 所以需要提供一个init方法，并多增加一个fn参数。</p><p>要想类的实例对象能够像函数一样调用，需要在类里面使用<code>call</code>方法，把类的实例变成可调用对象(callable)，也就是说可以像调用函数一样进行调用。</p><p>在call方法里进行对fn函数的装饰，可以添加额外的功能。</p><hr><h2 id="mini-web框架"><a href="#mini-web框架" class="headerlink" title="mini-web框架"></a>mini-web框架</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr><p>使用web框架专门负责处理用户的动态资源请求，这个web框架其实就是一个为web服务器提供服务的应用程序，简称web框架。</p><p>和静态资源相反, 动态资源会经常变化，比如: 我们在京东浏览商品时经常会根据条件进行筛选，选择不同条件, 浏览的商品就不同，这种资源web服务器无法提前准备好，需要web框架来帮web服务器进行准备，在这里web服务器可以把<code>.html</code>的资源请求认为是动态资源请求交由web框架进行处理。</p><p>WSGI协议:它是web服务器和web框架之间进行协同工作的一个规则，WSGI协议规定web服务器把动态资源的请求信息传给web框架处理，web框架把处理好的结果返回给web服务器。</p><hr><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="property属性"><a href="#property属性" class="headerlink" title="property属性"></a>property属性</h3><hr><p>property属性就是负责把一个方法当做属性进行使用，这样做可以简化代码使用。定义property属性有两种方式：装饰器方式和类属性方式。</p><hr><p>装饰器方式：</p><pre><code>class Person(object):    def __init__(self):        self.__age = 0    # 装饰器方式的property, 把age方法当做属性使用, 表示当获取属性时会执行下面修饰的方法    @property    def age(self):        return self.__age    # 把age方法当做属性使用, 表示当设置属性时会执行下面修饰的方法    @age.setter    def age(self, new_age):        if new_age &gt;= 150:            print(&quot;成精了&quot;)        else:            self.__age = new_age# 创建personp = Person()print(p.age)p.age = 100print(p.age)p.age = 1000</code></pre><p><code>@property</code>表示把方法当做属性使用, 表示当获取属性时会执行下面修饰的方法。<code>@方法名.setter</code> 表示把方法当做属性使用,表示当设置属性时会执行下面修饰的方法。装饰器方式的property属性修饰的方法名一定要一样。</p><hr><p>类属性方式:</p><pre><code>class Person(object):    def __init__(self):        self.__age = 0    def get_age(self):        &quot;&quot;&quot;当获取age属性的时候会执行该方法&quot;&quot;&quot;        return self.__age    def set_age(self, new_age):        &quot;&quot;&quot;当设置age属性的时候会执行该方法&quot;&quot;&quot;        if new_age &gt;= 150:            print(&quot;成精了&quot;)        else:            self.__age = new_age    # 类属性方式的property属性    age = property(get_age, set_age)# 创建personp = Person()print(p.age)p.age = 100print(p.age)p.age = 1000</code></pre><p>property的参数说明:第一个参数是获取属性时要执行的方法;第二个参数是设置属性时要执行的方法。</p><hr><h3 id="with语句和上下文管理器"><a href="#with语句和上下文管理器" class="headerlink" title="with语句和上下文管理器"></a>with语句和上下文管理器</h3><hr><p>向文件中写入数据的示例代码:</p><pre><code>try:    # 1、以读的方式打开文件    f = open(&quot;1.txt&quot;, &quot;r&quot;)    # 2、读取文件内容    f.write(&quot;xxxxx&quot;)except IOError as e:    print(&quot;文件操作出错&quot;, e)finally:    # 3、关闭文件    f.close()</code></pre><p>这种方法代码过于冗长,Python提供了 with 语句的这种写法，既简单又安全，并且 with 语句执行完成以后自动调用关闭文件操作，即使出现异常也会自动调用关闭文件操作。</p><p>with 语句的示例代码:</p><pre><code># 1、以写的方式打开文件with open(&quot;1.txt&quot;, &quot;w&quot;) as f:# 2、读取文件内容f.write(&quot;hello world&quot;)</code></pre><hr><p>一个类只要实现了<code>__enter__()</code>和<code>__exit__()</code>这个两个方法，通过该类创建的对象我们就称之为上下文管理器。上下文管理器可以使用 with 语句，with语句之所以这么强大，背后是由上下文管理器做支撑的。</p><p>自定义上下文管理器类,模拟文件操作:</p><pre><code>class File(object):    # 初始化方法    def __init__(self, file_name, file_model):        # 定义变量保存文件名和打开模式        self.file_name = file_name        self.file_model = file_model    # 上文方法    def __enter__(self):        print(&quot;进入上文方法&quot;)        # 返回文件资源        self.file = open(self.file_name,self.file_model)        return self.file    # 下文方法    def __exit__(self, exc_type, exc_val, exc_tb):        print(&quot;进入下文方法&quot;)        self.file.close()if __name__ == &apos;__main__&apos;:    # 使用with管理文件    with File(&quot;1.txt&quot;, &quot;r&quot;) as file:        file_data = file.read()        print(file_data)</code></pre><p><code>__enter__</code>表示上文方法，需要返回一个操作文件对象。<code>__exit__</code>表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法。</p><hr><p>假如想要让一个函数成为上下文管理器，Python 还提供了一个<code>@contextmanager</code>的装饰器，更进一步简化了上下文管理器的实现方式。通过 <code>yield</code> 将函数分割成两部分，yield 上面的语句在<code>__enter__</code>方法中执行，yield 下面的语句在<code>__exit__</code>方法中执行，紧跟在 yield 后面的参数是函数的返回值。</p><pre><code># 导入装饰器from contextlib import contextmanager# 装饰器装饰函数，让其称为一个上下文管理器对象@contextmanagerdef my_open(path, mode):    try:        # 打开文件        file = open(file_name, file_mode)        # yield之前的代码好比是上文方法        yield file    except Exception as e:        print(e)    finally:        print(&quot;over&quot;)        # yield下面的代码好比是下文方法        file.close()# 使用with语句with my_open(&apos;out.txt&apos;, &apos;w&apos;) as f:    f.write(&quot;hello , the simplest context manager&quot;)</code></pre><hr><h3 id="生成器的创建方式"><a href="#生成器的创建方式" class="headerlink" title="生成器的创建方式"></a>生成器的创建方式</h3><hr><p>根据程序员制定的规则循环生成数据，当条件不成立时则生成数据结束。数据不是一次性全部生成处理，而是使用一个，再生成一个，可以节约大量的内存。创建生成器的方式：生成器推导式和 yield 关键字。</p><hr><p>生成器推导式:</p><pre><code># 创建生成器my_generator = (i * 2 for i in range(5))print(my_generator)# next获取生成器下一个值# value = next(my_generator)# print(value)# 遍历生成器for value in my_generator:    print(value)</code></pre><p>代码说明:next 函数获取生成器中的下一个值;for 循环遍历生成器中的每一个值。</p><hr><p>yield 关键字:</p><p>只要在def函数里面看到有 yield 关键字那么就是生成器。</p><pre><code>def mygenerater(n):    for i in range(n):        print(&apos;开始生成...&apos;)        yield i        print(&apos;完成一次...&apos;)if __name__ == &apos;__main__&apos;:    g = mygenerater(2)    # 获取生成器中下一个值    # result = next(g)    # print(result)    # while True:    #     try:    #         result = next(g)    #         print(result)    #     except StopIteration as e:    #         break    # # for遍历生成器, for 循环内部自动处理了停止迭代异常，使用起来更加方便    for i in g:        print(i)</code></pre><p>代码说明:代码执行到 yield 会暂停，然后把结果返回出去，下次启动生成器会在暂停的位置继续往下执行。生成器如果把数据生成完成，再次获取生成器中的下一个数据会抛出一个StopIteration 异常，表示停止迭代异常。while 循环内部没有处理异常操作，需要手动添加处理异常操作。for 循环内部自动处理了停止迭代异常，使用起来更加方便，推荐大家使用。</p><hr><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><hr><hr>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2020/09/09/42.Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/09/09/42.Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="Linux主要目录速查表"><a href="#Linux主要目录速查表" class="headerlink" title="Linux主要目录速查表"></a>Linux主要目录速查表</h3><hr><pre><code>/：根目录，一般根目录下只存放目录，在 linux 下有且只有一个根目录，所有的东西都是从这里开始。当在终端里输入 /home，其实是在告诉电脑，先从 /（根目录）开始，再进入到 home 目录/bin、/usr/bin：可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等/boot：放置 linux 系统启动时用到的一些文件，如 linux 的内核文件：/boot/vmlinuz，系统引导管理器：/boot/grub/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有    /etc/inittab    /etc/fstab    /etc/init.d    /etc/X11    /etc/sysconfig    /etc/xinetd.d/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下    ~ 表示当前用户的家目录    ~edu 表示用户 edu 的家目录/lib、/usr/lib、/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载/opt：给主机额外安装软件所摆放的目录/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件有：/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等/root：系统管理员root的家目录/sbin、/usr/sbin、/usr/local/sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能&quot;查看&quot;而不能设置和使用/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内/usr：应用程序存放目录    /usr/bin：存放应用程序    /usr/share：存放共享数据    /usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件    /usr/local：存放软件升级包    /usr/share/doc：系统说明文件存放目录    /usr/share/man：程序说明文件存放目录/var：放置系统执行过程中经常变化的文件    /var/log：随时更改的日志文件    /var/spool/mail：邮件存放的目录    /var/run：程序或服务启动后，其 PID 存放在该目录下</code></pre><p>Ubuntu操作系统是属于Linux操作系统中的一种。Ubuntu 没有盘符这个概念，只有一个根目录<code>/</code>，所有文件都在它下面。</p><p>主要目录说明:<code>/</code>：根目录。<code>/bin</code>：可执行二进制文件的目录。<code>/etc</code>：系统配置文件存放的目录。<code>/home</code>：用户家目录。</p><hr><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><hr><p>在Linux中文件没有扩展名，可以通过颜色区分，也可以通过命令来区分<code>file 文件名</code>。在Linux中文件分为：普通文件、目录文件、设备文件、管道文件、链接文件。</p><hr><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><hr><p>读权限（r）、写权限（w）、可执行权限（x）。通常，Unix/Linux系统只允许文件的属主(所有者)或超级用户改变文件的读写权限。</p><p><code>d rwx rwx rwx</code> 第1个字母代表文件的类型：“d” 代表文件夹、“-” 代表普通文件、“c” 代表硬件字符设备、“b” 代表硬件块设备、“s”表示管道文件、“l” 代表软链接文件。</p><p>后9个字母分别代表三组权限：文件所有者、用户者、其他用户拥有的权限。每一个用户都有它自身的读、写和执行权限。</p><hr><h3 id="常用Linux命令"><a href="#常用Linux命令" class="headerlink" title="常用Linux命令"></a>常用Linux命令</h3><hr><pre><code>ctrl + shift + =     //放大终端窗口的字体显示ctrl + -     //缩小终端窗口的字体显示ls    //查看当前文件夹下的内容pwd        //查看当前所在文件夹cd     //切换文件夹touch [文件名]    //如果文件不存在，新建文件mkdir [目录名]    //创建目录，参数-p可递归创建目录rm [文件名]    //删除指定的文件名rm -r [文件夹名]    //删除指定的文件clear    //清屏tree    //以树状方式显示目录信息</code></pre><hr><p>Linux文件或者目录名称最长可以有256个字符，<code>.</code>代表当前目录，<code>..</code>代表上一级目录，以<code>.</code>开头的文件为隐藏文件，需要用<code>-a</code>参数才能显示。</p><pre><code>ls -a     //查看所有文件包含隐藏文件ls -l     //以列表形式查看文件，不包含隐藏文件ls -lh     //以列表形式查看文件，不包含隐藏文件 ，按照1024倍数显示&#123;KB MB GB&#125;ls -all    //以列表形式查看文件，包含隐藏文件 快捷方式【ll】</code></pre><p>通配符：</p><pre><code>【*】 匹配任意多个字符【0-256】  a*  一个以上字符 256以下 【?】 匹配任意一个字符  a？ 两个字符【[a-z]】 区间法 匹配a到z的所有字符 只能确定一个字符【[abcde]】 穷举法 权值法 匹配abcde的所有字符 只能确定一个字符</code></pre><p>重定向命令 </p><pre><code>//Linux允许将命令执行结果重定向到一个文件，本应显示在终端上的内容保存到指定文件中。ls &gt; test.txt     //test.txt 如果不存在，则创建，存在则覆盖其内容。&gt;输出重定向会覆盖原来的内容，&gt;&gt;输出重定向则会追加到文件的尾部。</code></pre><hr><p>切换工作目录：</p><pre><code>cd ~ 切换到当前用户的主目录cd .. 切换到上级目录 cd -  切换到上一次目录</code></pre><hr><p>查看或者合并文件内容：</p><pre><code>cat 文件名cat a.txt b.txt &gt; c.txt</code></pre><hr><p>建立链接文件：ln</p><pre><code>//如果没有-s选项代表建立一个硬链接文件，两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在。//硬链接和拷贝（复制）区别:无论修改了哪一个链接之后的文件,两个文件都会改变,保持一致,但是拷贝不会。ln 源文件 链接文件//软链接文件不占磁盘空间 但是删除源文件会影响软链接文件ln -s 源文件 链接文件</code></pre><hr><p>搜索文件里的文本内容：</p><pre><code>//行首,搜寻以a开头的行grep -n &apos;^a&apos; 1.txt//行尾,搜寻以 ke 结束的行grep -n &apos;ke$&apos; 1.txt//匹配 [] 里中一系列字符中的一个:搜寻匹配单词signal、signaL、Signal、SignaL的行grep -n &apos;[Ss]igna[Ll]&apos; 1.txt//匹配一个非换行符的字符:匹配 e 和 e 之间有任意一个字符，可以匹配 eee，eae，eve，但是不匹配 ee，eaaegrep -n &apos;e.e&apos; 1.txt</code></pre><hr><p>计算文件行数或字数：</p><pre><code>wc 文件名-l    统计行数-w    统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。-c    统计字节数-m    统计字符数。这个标志不能与 -c 标志一起使用。</code></pre><p>查找文件：</p><pre><code>find ./ -name test.sh    //查找当前目录下所有名为test.sh的文件find ./ -name &apos;*.sh&apos;    //查找当前目录下所有后缀为.sh的文件find ./ -name &quot;[A-Z]*&quot;    //查找当前目录下所有以大写字母开头的文件find  /tmp  -size   2M    //查找在/tmp 目录下等于2M的文件find  /tmp  -size  +2M    //查找在/tmp 目录下大于2M的文件find  /tmp  -size  -2M    //查找在/tmp 目录下小于2M的文件find ./ -size +4k -size -5M    //查找当前目录下大于4k，小于5M的文件find ./ -perm 0777    //查找当前目录下权限为 777 的文件或目录</code></pre><hr><p>拷贝文件：cp</p><pre><code>cp vim_configure/ code/ -ivr //把文件夹 vim_configure 拷贝到 code 目录里：</code></pre><p>移动文件：mv</p><hr><p>获取文件类型：</p><pre><code>file 文件名</code></pre><p>归档管理：tar</p><pre><code>//tar  [参数]  打包文件名  文件tar -cvf text.tar 1.text 2.text 3.text//解归档tar -xvf test.tar//一步归档压缩:把 1.c 2.c 3.c 4.c 压缩成 test.tar.gztar zcvf test.tar.gz 1.c 2.c 3.c 4.c//一步解归档压缩 tar zxvf 文件名.tar.gz</code></pre><hr><p>文件压缩解压：gzip</p><pre><code>//tar与gzip命令结合使用实现文件打包、压缩。tar只负责打包文件，但不压缩，用gzip压缩tar打包后的文件，其扩展名一般用xxxx.tar.gz。gzip  text.tar//解压缩：生成了一个文件 归档文件名.targzip -d 归档文件名.tar.gz </code></pre><p>文件压缩解压：bzip2</p><pre><code>//bzip2压缩：tar -cjvf 文件名.tar.bz2 文件1 文件2//bzip2解压缩：tar -xjvf 文件名.tar.bz2 -C 路径</code></pre><p>文件压缩解压：zip、unzip</p><pre><code>//压缩zip 文件名 文件1 文件2 生成一个文件为：文件名.zip//unzip解压缩：unzip 文件名.zip -C 路径</code></pre><hr><p>查看命令位置：which</p><hr><h3 id="用户、权限管理"><a href="#用户、权限管理" class="headerlink" title="用户、权限管理"></a>用户、权限管理</h3><hr><p>查看当前用户：<code>whoami</code></p><p>查看登录用户：<code>who -m</code></p><p>切换用户</p><pre><code>su    //切换到root用户su root    //切换到root用户su 普通用户    //切换到普通用户su - 普通用户    //切换到普通用户，同时切换普通用户所在的目录</code></pre><p>添加、删除组账号：</p><pre><code>groupadd 新建组账号groupdel 组账号</code></pre><p>修改用户所在组：</p><pre><code>usermod -g 用户组 用户名</code></pre><p>添加组：</p><pre><code>groupadd 组名     //  添加组  需要用户权限groupdel 组名    //删除组  需要用户权限和清空组成员usermod -g 组名 用户名1 用户名2】//修改用户所在组：需要用户权限</code></pre><p>修改文件权限：chmod 修改文件权限有两种使用格式：字母法与数字法。</p><pre><code>//字母法：chmod u/g/o/a  +/-/=  rwx  文件[ u/g/o/a ]     含义u    user 表示该文件的所有者 g    group 表示与该文件的所有者属于同一组( group )者，即用户组o    other 表示其他以外的人a    all 表示这三者皆是[ +-= ]     含义 +    增加权限  -    撤销权限 =    设定权限rwx     含义r    read 表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过ls查看这个目录的内容。w    write 表示可写入，对于一个目录，如果没有w权限，那么就意味着不能在目录下创建新的文件。x    excute 表示可执行，对于一个目录，如果没有x权限，那么就意味着不能通过cd进入这个目录。//数字法：“rwx” 这些权限也可以用数字来代替r    读取权限，数字代号为 &quot;4&quot;w    写入权限，数字代号为 &quot;2&quot;x    执行权限，数字代号为 &quot;1&quot; -    不具任何权限，数字代号为 &quot;0&quot;chmod u=rwx,g=rx,o=r filename //就等同于：chmod u=7,g=5,o=4 filenamechmod 751 file    //文件所有者：读、写、执行权限、同组用户：读、执行的权限、其它用户：执行的权限</code></pre><p>修改文件所有者：chown</p><p>修改文件所属组：chgrp</p><hr><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><hr><p>查看当前日历：cal</p><p>显示或设置时间：date</p><p>查看进程信息：ps</p><p>动态显示进程：top</p><p>终止进程：kill</p><p>后台程序：&amp;、jobs、fg</p><p>关机重启：reboot、shutdown、init</p><hr><h3 id="VI"><a href="#VI" class="headerlink" title="VI"></a>VI</h3><hr><p>VI编辑器有两个模式：文本编辑模式 命令行处理模式：</p><pre><code>1、vi 文件名  2、vim </code></pre><p>操作编辑器：</p><pre><code>【i】在光标当前位置插入【a】在光标右侧位置插入【o】在光标下一行位置开启新的一行插入【O】在光标上一行位置开启新的一行插入【I】在光标当前行行首插入【A】在光标当前行行尾插入</code></pre><p>退出编辑器：</p><pre><code>【ZZ】保存退出【:wq】保存退出【:x】保存退出【:w 文件名】保存到指定文件中【:q】 保存退出 针对未修改的文件 注意：未保存文件会提示 无法退出【:q!】 强制退出  退出 不保存【:! 命令】暂时离开vi 执行其他命令</code></pre><p>编辑器操作：</p><pre><code>【[n]x】删除光标位置后面n个字符【[n]X】删除光标位置前面n个字符【D】删除光标所在位置后面到行尾的所有字符【[n]dd】删除光标所在行及下面n行   剪切【p】在光标下一行粘贴【[n]yy】复制光标所在行及下面n行 【dG】删除光标所在行到文件结尾【J】合并光标所在行和下一行 中间用空格连接【.】执行上一次命令行操作【u】撤销</code></pre><p>编辑器定位：</p><pre><code>【ctrl+b】回滚 行号减小【ctrl+f】前滚 行号增加【gg】定位在文件第一行行首【G】定位在文件最后一行行首【:$】定位在文件最后一行行首【[n]G | [n]gg】定位在m行注意：在查找一些特殊含义的字符时，需要加上转义字符【/内容】查找【n】查找下一个【N】查找上一个【?】查找上一次的所搜内容【/^word】 查找以word开头的内容【/word$】 查找以word结尾的内容【/.】查找任意一个字符【/*】查找任意多个字符</code></pre><p>编辑器替换：</p><pre><code>【r】替换光标所在位置的字符【:r 文件名】在光标当前行的下一行插入一个文件 每次添加只能添加一个文件【:s/a/b/g】将光标所在行的a替换为b【:g/a/s//b/g】将文件中所有a替换为b【:n1,n2s/a/b/g】将行区间n1到n2的行中所有的a替换为b</code></pre><p>编辑器设置：</p><pre><code>【:set ic】搜索时不区分大小写【:set noic】搜索时区分大小写:set nu    //显示行号:set nonu    //不显示行号</code></pre><hr><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><hr><p>使用SSH服务，需要安装相应的服务器和客户端。客户端和服务器的关系：如果，A机器想被B机器远程控制，那么，A机器需要安装SSH服务器，B机器需要安装SSH客户端。</p><p>Xshell：是一个Windows平台下的SSH、TELNET和RLOGIN终端软件。它使得用户能轻松和安全地在Windows平台上访问Unix/Linux 主机。</p><p>Xftp：是一个应用于 Windows 平台的 FTP 和 SFTP 文件传输程序。Xftp能安全地在Unix/Linux 和 Windows 平台之间传输文件。</p><hr><h2 id="补充一些"><a href="#补充一些" class="headerlink" title="补充一些"></a>补充一些</h2><h3 id="重定向命令"><a href="#重定向命令" class="headerlink" title="重定向命令"></a>重定向命令</h3><hr><p>终端内容保存到文件使用重定向有两种方式: <code>&gt;</code> 和 <code>&gt;&gt;</code>。<code>&gt;</code> 表示每次只写入最新的数据，原有数据不保留。<code>&gt;&gt;</code> 表示每次在原有数据的基础上进行追加，原有数据会保留。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础</title>
    <link href="/2020/09/05/41.python%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/05/41.python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><hr><p>数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。</p><p>变量就是一个存储数据的时候当前数据所在的内存地址的名字而已。</p><p>定义变量：</p><pre><code>变量名 = 值my_name = &apos;TOM&apos;print(my_name)#TOM</code></pre><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><hr><p>数据类型</p><ul><li>整型：int</li><li>浮点型：float</li><li>字符串：str</li><li>布尔型：bool</li><li>列表：list</li><li>元组：tuple</li><li>集合：set</li><li>字典：dict</li></ul><blockquote><p>检测数据类型的方法：<code>type()</code></p></blockquote><pre><code>a = 1print(type(a))  # &lt;class &apos;int&apos;&gt; -- 整型b = 1.1print(type(b))  # &lt;class &apos;float&apos;&gt; -- 浮点型c = Trueprint(type(c))  # &lt;class &apos;bool&apos;&gt; -- 布尔型d = &apos;12345&apos;print(type(d))  # &lt;class &apos;str&apos;&gt; -- 字符串e = [10, 20, 30]print(type(e))  # &lt;class &apos;list&apos;&gt; -- 列表f = (10, 20, 30)print(type(f))  # &lt;class &apos;tuple&apos;&gt; -- 元组h = &#123;10, 20, 30&#125;print(type(h))  # &lt;class &apos;set&apos;&gt; -- 集合g = &#123;&apos;name&apos;: &apos;TOM&apos;, &apos;age&apos;: 20&#125;print(type(g))  # &lt;class &apos;dict&apos;&gt; -- 字典</code></pre><hr><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><hr><table><thead><tr><th style="text-align:center">格式符号</th><th style="text-align:center">转换</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">有符号的十进制整数</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">字符</td></tr><tr><td style="text-align:center">%u</td><td style="text-align:center">无符号十进制整数</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">八进制整数</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">十六进制整数（小写ox）</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">十六进制整数（大写OX）</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">科学计数法（小写’e’）</td></tr><tr><td style="text-align:center">%E</td><td style="text-align:center">科学计数法（大写’E’）</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:center">%f和%e的简写</td></tr><tr><td style="text-align:center">%G</td><td style="text-align:center">%f和%E的简写</td></tr></tbody></table><blockquote><p>技巧</p></blockquote><ul><li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</li><li>%.2f，表示小数点后显示的小数位数。</li><li><p>格式化字符串除了%s，还可以写为<code>f&#39;&#123;表达式&#125;&#39;</code></p><pre><code>age = 18name = &apos;TOM&apos;weight = 75.5student_id = 1# 我的名字是TOMprint(&apos;我的名字是%s&apos; % name)# 我的学号是0001print(&apos;我的学号是%4d&apos; % student_id)# 我的体重是75.50公斤print(&apos;我的体重是%.2f公斤&apos; % weight)# 我的名字是TOM，明年19岁了print(&apos;我的名字是%s，明年%d岁了&apos; % (name, age + 1))# 我的名字是TOM，明年19岁了print(f&apos;我的名字是&#123;name&#125;, 明年&#123;age + 1&#125;岁了&apos;)</code></pre></li></ul><hr><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><hr><pre><code>input(&quot;提示信息&quot;)</code></pre><p>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做字符串处理。</p><pre><code>password = input(&apos;请输入您的密码：&apos;)print(f&apos;您输入的密码是&#123;password&#125;&apos;)# &lt;class &apos;str&apos;&gt;print(type(password))</code></pre><hr><h2 id="转换数据类型"><a href="#转换数据类型" class="headerlink" title="转换数据类型"></a>转换数据类型</h2><hr><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">int(x [,base ])</td><td style="text-align:center">将x转换为一个整数</td></tr><tr><td style="text-align:center">float(x)</td><td style="text-align:center">将x转换为一个浮点数</td></tr><tr><td style="text-align:center">complex(real [,imag ])</td><td style="text-align:center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td style="text-align:center">str(x )</td><td style="text-align:center">将对象 x 转换为字符串</td></tr><tr><td style="text-align:center">repr(x )</td><td style="text-align:center">将对象 x 转换为表达式字符串</td></tr><tr><td style="text-align:center">eval(str )</td><td style="text-align:center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td style="text-align:center">tuple(s )</td><td style="text-align:center">将序列 s 转换为一个元组</td></tr><tr><td style="text-align:center">list(s )</td><td style="text-align:center">将序列 s 转换为一个列表</td></tr><tr><td style="text-align:center">chr(x )</td><td style="text-align:center">将一个整数转换为一个Unicode字符</td></tr><tr><td style="text-align:center">ord(x )</td><td style="text-align:center">将一个字符转换为它的ASCII整数值</td></tr><tr><td style="text-align:center">hex(x )</td><td style="text-align:center">将一个整数转换为一个十六进制字符串</td></tr><tr><td style="text-align:center">oct(x )</td><td style="text-align:center">将一个整数转换为一个八进制字符串</td></tr><tr><td style="text-align:center">bin(x )</td><td style="text-align:center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><pre><code># 1. float() -- 转换成浮点型num1 = 1print(float(num1))print(type(float(num1)))# 2. str() -- 转换成字符串类型num2 = 10print(type(str(num2)))# 3. tuple() -- 将一个序列转换成元组list1 = [10, 20, 30]print(tuple(list1))print(type(tuple(list1)))# 4. list() -- 将一个序列转换成列表t1 = (100, 200, 300)print(list(t1))print(type(list(t1)))# 5. eval() -- 将字符串中的数据转换成Python表达式原本类型str1 = &apos;10&apos;str2 = &apos;[1, 2, 3]&apos;str3 = &apos;(1000, 2000, 3000)&apos;print(type(eval(str1)))print(type(eval(str2)))print(type(eval(str3)))</code></pre><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><hr><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td>1-1 输出结果为 0</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td>10 / 2 输出结果为 5</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">整除</td><td>9 // 4 输出结果为2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">指数</td><td>2 *<em> 4 输出结果为 16，即 2 </em> 2 <em> 2 </em> 2</td></tr><tr><td style="text-align:center">()</td><td style="text-align:center">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><p>多个变量赋值</p><pre><code>num1, float1, str1 = 10, 0.5, &apos;hello world&apos;print(num1)print(float1)print(str1)</code></pre><p>多变量赋相同值</p><pre><code>a = b = 10print(a)print(b)</code></pre><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><p>数字之间的逻辑运算</p><pre><code>a = 0b = 1c = 2# and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字print(a and b)  # 0print(b and a)  # 0print(b and c)  # 2print(c and b)  # 1# or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字print(a or b)  # 1print(a or c)  # 2print(b or c)  # 1</code></pre><hr><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><hr><p>语法：</p><pre><code>if 条件1:    代码...    ......elif 条件2：    代码    ............else:    以上条件都不成立执行执行的代码</code></pre><p>实例：</p><pre><code>age = int(input(&apos;请输入您的年龄：&apos;))if age &lt; 18:    print(f&apos;您的年龄是&#123;age&#125;,童工一枚&apos;)elif (age &gt;= 18) and (age &lt;= 60):    print(f&apos;您的年龄是&#123;age&#125;,合法工龄&apos;)elif age &gt; 60:    print(f&apos;您的年龄是&#123;age&#125;,可以退休&apos;)</code></pre><hr><h3 id="猜拳游戏"><a href="#猜拳游戏" class="headerlink" title="猜拳游戏"></a>猜拳游戏</h3><hr><pre><code># 导入random模块import random# 计算电脑出拳的随机数字computer = random.randint(0, 2)print(computer)player = int(input(&apos;请出拳：0-石头，1-剪刀，2-布：&apos;))# 玩家胜利 p0:c1 或 p1:c2 或 p2:c0if (player == 0 and computer == 1) or (player == 1 and computer == 2) or (player == 2 and computer == 0):    print(&apos;玩家获胜&apos;)# 平局：玩家 == 电脑elif player == computer:    print(&apos;平局&apos;)else:    print(&apos;电脑获胜&apos;)</code></pre><hr><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><hr><p>语法：</p><pre><code>值1 if 条件 else 值2a = 1b = 2c = a if a &gt; b else bprint(c)</code></pre><hr><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><hr><p>while的语法</p><pre><code>while 条件:    代码    ......</code></pre><p>计算1-100累加和：</p><pre><code>i = 1result = 0while i &lt;= 100:    result += i    i += 1print(result)#5050</code></pre><hr><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><hr><p>语法</p><pre><code>for 临时变量 in 序列:    代码    ......</code></pre><p>使用</p><pre><code>str1 = &apos;HelloWorld&apos;for i in str1:    print(i)</code></pre><hr><h3 id="while…else"><a href="#while…else" class="headerlink" title="while…else"></a>while…else</h3><hr><p>语法</p><pre><code>while 条件:    代码else:    循环正常结束之后要执行的代码</code></pre><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><hr><h3 id="for…else"><a href="#for…else" class="headerlink" title="for…else"></a>for…else</h3><hr><p>语法</p><pre><code>for 临时变量 in 序列:    代码    ...else:    循环正常结束之后要执行的代码</code></pre><blockquote><p>break终止循环不会执行else下方缩进的代码。continue退出循环的方式，执行else下方缩进的代码。</p></blockquote><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="三引号字符串"><a href="#三引号字符串" class="headerlink" title="三引号字符串"></a>三引号字符串</h3><hr><pre><code>name3 = &apos;&apos;&apos; Tom &apos;&apos;&apos;name4 = &quot;&quot;&quot; Rose &quot;&quot;&quot;a = &apos;&apos;&apos; i am Tom,         nice to meet you! &apos;&apos;&apos;b = &quot;&quot;&quot; i am Rose,         nice to meet you! &quot;&quot;&quot;</code></pre><blockquote><p>注意：三引号形式的字符串支持换行。</p></blockquote><hr><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><hr><blockquote><p>注意：字符串下标从0开始。</p></blockquote><p>切片语法</p><pre><code>序列[开始位置下标:结束位置下标:步长]</code></pre><blockquote><p>注意:不包含结束位置下标对应的数据， 正负整数均可；步长是选取间隔，正负整数均可，默认步长为1。</p></blockquote><pre><code>name = &quot;abcdefg&quot;print(name[2:5:1])  # cdeprint(name[2:5])  # cdeprint(name[:5])  # abcdeprint(name[1:])  # bcdefgprint(name[:])  # abcdefgprint(name[::2])  # acegprint(name[:-1])  # abcdef, 负1表示倒数第一个数据print(name[-4:-1])  # defprint(name[::-1])  # gfedcba</code></pre><hr><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><hr><p>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</p><pre><code>#开始和结束位置下标可以省略，表示在整个字符串序列中查找字符串序列.find(子串, 开始位置下标, 结束位置下标)mystr = &quot;hello world and Python&quot;print(mystr.find(&apos;and&apos;))  # 12print(mystr.find(&apos;and&apos;, 15, 30))  # -1print(mystr.find(&apos;ands&apos;))  # -1</code></pre><p>rfind()和find()功能相同，但查找方向为右侧开始。</p><hr><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><hr><p>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</p><pre><code>#开始和结束位置下标可以省略，表示在整个字符串序列中查找。字符串序列.index(子串, 开始位置下标, 结束位置下标)mystr = &quot;hello world and Python&quot;print(mystr.index(&apos;and&apos;))  # 12print(mystr.index(&apos;ands&apos;))  # 报错</code></pre><p>rindex()index()功能相同，但查找方向为右侧开始。</p><hr><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><hr><p>返回某个子串在字符串中出现的次数。</p><pre><code>#开始和结束位置下标可以省略，表示在整个字符串序列中查找。字符串序列.count(子串, 开始位置下标, 结束位置下标)mystr = &quot;hello world and Python&quot;print(mystr.count(&apos;and&apos;))  # 1print(mystr.count(&apos;ands&apos;))  # 0</code></pre><hr><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><hr><p>替换</p><pre><code>#替换次数如果查出子串出现次数，则替换次数为该子串出现次数。字符串序列.replace(旧子串, 新子串, 替换次数)mystr = &quot;hello world and Python and&quot;# 结果：hello world he Python heprint(mystr.replace(&apos;and&apos;, &apos;he&apos;))# 结果：hello world he Python heprint(mystr.replace(&apos;and&apos;, &apos;he&apos;, 10))# 结果：hello world and Python andprint(mystr)</code></pre><blockquote><p>注意：数据按照是否能直接修改分为可变类型和不可变类型两种。字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</p></blockquote><hr><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><hr><p>按照指定字符分割字符串。</p><pre><code>字符串序列.split(分割字符, num)</code></pre><blockquote><p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p></blockquote><pre><code>mystr = &quot;hello world and Python and it&quot;# [&apos;hello world &apos;, &apos; Python &apos;, &apos; it&apos;]print(mystr.split(&apos;and&apos;))# [&apos;hello world &apos;, &apos; Python &apos;, &apos; it&apos;]print(mystr.split(&apos;and&apos;, 2))# [&apos;hello&apos;, &apos;world&apos;, &apos;and&apos;, &apos;Python&apos;, &apos;and&apos;, &apos;it&apos;]print(mystr.split(&apos; &apos;))# [&apos;hello&apos;, &apos;world&apos;, &apos;and Python and it&apos;]print(mystr.split(&apos; &apos;, 2))</code></pre><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><hr><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><hr><p>用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</p><pre><code>字符或子串.join(多字符串组成的序列)list1 = [&apos;mm&apos;, &apos;nn&apos;, &apos;bb&apos;, &apos;vv&apos;]t1 = (&apos;aa&apos;, &apos;b&apos;, &apos;cc&apos;, &apos;ddd&apos;)# 结果：mm_nn_bb_vvprint(&apos;_&apos;.join(list1))# 结果：aa...b...cc...dddprint(&apos;...&apos;.join(t1))</code></pre><hr><h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h3><hr><p>将字符串第一个字符转换成大写。</p><pre><code>mystr = &quot;hello world and Python and it&quot;# 结果：Hello world and python and itprint(mystr.capitalize())</code></pre><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote><hr><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><hr><p>将字符串每个单词首字母转换成大写。</p><pre><code>mystr = &quot;hello world and Python and it&quot;# 结果：Hello World And Python And Itprint(mystr.title())</code></pre><hr><h3 id="lower和upper"><a href="#lower和upper" class="headerlink" title="lower和upper"></a>lower和upper</h3><hr><p>lower()：将字符串中大写转小写。</p><pre><code>mystr = &quot;hello world and Python and it&quot;# 结果：hello world and python and itprint(mystr.lower())</code></pre><p>upper()：将字符串中小写转大写。</p><pre><code>mystr = &quot;hello world and Python and it&quot;# 结果：HELLO WORLD AND PYTHON AND ITprint(mystr.upper())</code></pre><hr><h3 id="lstrip和rstrip和strip"><a href="#lstrip和rstrip和strip" class="headerlink" title="lstrip和rstrip和strip"></a>lstrip和rstrip和strip</h3><hr><p>lstrip()：删除字符串左侧空白字符。</p><p>rstrip()：删除字符串右侧空白字符。</p><p>strip()：删除字符串两侧空白字符。</p><hr><h3 id="ljust和rjust和center"><a href="#ljust和rjust和center" class="headerlink" title="ljust和rjust和center"></a>ljust和rjust和center</h3><hr><p>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</p><p>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p><p>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p><pre><code>mystr = &quot;hello world and Python and it&quot;# 结果：hello world and Python and it.......print(mystr.ljust(36,&apos;.&apos;))# 结果：.......hello world and Python and itprint(mystr.rjust(36,&apos;.&apos;))# 结果：...hello world and Python and it....print(mystr.center(36,&apos;.&apos;))</code></pre><hr><h3 id="startswith和endswith"><a href="#startswith和endswith" class="headerlink" title="startswith和endswith"></a>startswith和endswith</h3><hr><p>startswith()：检查字符串是否是以指定子串开头，是则返回True，否则返回False。如果设置开始和结束位置下标，则在指定范围内检查。</p><pre><code>字符串序列.startswith(子串, 开始位置下标, 结束位置下标)mystr = &quot;hello world and Python and it&quot;# 结果：Trueprint(mystr.startswith(&apos;hello&apos;))# 结果Falseprint(mystr.startswith(&apos;hello&apos;, 5, 20))</code></pre><p>endswith()：检查字符串是否是以指定子串结尾，是则返回True，否则返回False。如果设置开始和结束位置下标，则在指定范围内检查。</p><pre><code>字符串序列.endswith(子串, 开始位置下标, 结束位置下标)mystr = &quot;hello world and Python and it&quot;# 结果：Trueprint(mystr.endswith(&apos;it&apos;))# 结果：Falseprint(mystr.endswith(&apos;Python&apos;, 2, 20))</code></pre><hr><h3 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha"></a>isalpha</h3><hr><p>如果字符串至少有一个字符并且所有字符都是字母则返回True, 否则返回 False。</p><pre><code>mystr1 = &apos;hello&apos;mystr2 = &apos;hello12345&apos;# 结果：Trueprint(mystr1.isalpha())# 结果：Falseprint(mystr2.isalpha())</code></pre><hr><h3 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit"></a>isdigit</h3><hr><p>如果字符串只包含数字则返回True否则返回 False。</p><pre><code>mystr1 = &apos;aaa12345&apos;mystr2 = &apos;12345&apos;# 结果： Falseprint(mystr1.isdigit())# 结果：Falseprint(mystr2.isdigit())</code></pre><hr><h3 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum"></a>isalnum</h3><hr><p>如果字符串至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False。</p><pre><code>mystr1 = &apos;aaa12345&apos;mystr2 = &apos;12345-&apos;# 结果：Trueprint(mystr1.isalnum())# 结果：Falseprint(mystr2.isalnum())</code></pre><hr><h3 id="isspace"><a href="#isspace" class="headerlink" title="isspace"></a>isspace</h3><hr><p>如果字符串中只包含空白，则返回True，否则返回False。</p><pre><code>mystr1 = &apos;1 2 3 4 5&apos;mystr2 = &apos;     &apos;# 结果：Falseprint(mystr1.isspace())# 结果：Trueprint(mystr2.isspace())</code></pre><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><hr><p>列表可以一次性存储多个数据，且可以为不同数据类型。可以对这些数据进行的操作有：增、删、改、查。</p><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><hr><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]print(name_list[0])  # Tomprint(name_list[1])  # Lilyprint(name_list[2])  # Rose</code></pre><hr><h3 id="index-1"><a href="#index-1" class="headerlink" title="index"></a>index</h3><hr><p>返回指定数据所在位置的下标 。</p><pre><code>列表序列.index(数据, 开始位置下标, 结束位置下标)name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]print(name_list.index(&apos;Lily&apos;, 0, 2))  # 1</code></pre><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><hr><h3 id="count-1"><a href="#count-1" class="headerlink" title="count"></a>count</h3><hr><p>统计指定数据在当前列表中出现的次数。</p><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]print(name_list.count(&apos;Lily&apos;))  # 1</code></pre><hr><h3 id="len"><a href="#len" class="headerlink" title="len"></a>len</h3><hr><p>访问列表长度，即列表中数据的个数。</p><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]print(len(name_list))  # 3</code></pre><hr><h3 id="in和not-in"><a href="#in和not-in" class="headerlink" title="in和not in"></a>in和not in</h3><hr><p>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</p><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]# 结果：Trueprint(&apos;Lily&apos; in name_list)# 结果：Falseprint(&apos;Lilys&apos; in name_list)</code></pre><p>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</p><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]# 结果：Falseprint(&apos;Lily&apos; not in name_list)# 结果：Trueprint(&apos;Lilys&apos; not in name_list)</code></pre><hr><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><hr><p>列表结尾追加数据。</p><pre><code>列表序列.append(数据)name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list.append(&apos;xiaoming&apos;)# 结果：[&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;, &apos;xiaoming&apos;]print(name_list)</code></pre><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，<strong>故列表为可变类型数据</strong>。</p></blockquote><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list.append([&apos;xiaoming&apos;, &apos;xiaohong&apos;])# 结果：[&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;, [&apos;xiaoming&apos;, &apos;xiaohong&apos;]]print(name_list)</code></pre><hr><h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><hr><p>列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</p><pre><code>列表序列.extend(数据)#单个数据name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list.extend(&apos;xiaoming&apos;)# 结果：[&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;, &apos;x&apos;, &apos;i&apos;, &apos;a&apos;, &apos;o&apos;, &apos;m&apos;, &apos;i&apos;, &apos;n&apos;, &apos;g&apos;]print(name_list)​#序列数据name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list.extend([&apos;xiaoming&apos;, &apos;xiaohong&apos;])# 结果：[&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;, &apos;xiaoming&apos;, &apos;xiaohong&apos;]print(name_list)</code></pre><hr><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><hr><p>指定位置新增数据。</p><pre><code>列表序列.insert(位置下标, 数据)name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list.insert(1, &apos;xiaoming&apos;)# 结果：[&apos;Tom&apos;, &apos;xiaoming&apos;, &apos;Lily&apos;, &apos;Rose&apos;]print(name_list)</code></pre><hr><h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><hr><pre><code>#del 目标name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]# 结果：报错提示：name &apos;name_list&apos; is not defineddel name_listprint(name_list)​#删除指定数据name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]del name_list[0]# 结果：[&apos;Lily&apos;, &apos;Rose&apos;]print(name_list)</code></pre><hr><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><hr><p>删除指定下标的数据(默认为最后一个)，并返回该数据。</p><pre><code>#列表序列.pop(下标)name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]del_name = name_list.pop(1)# 结果：Lilyprint(del_name)# 结果：[&apos;Tom&apos;, &apos;Rose&apos;]print(name_list)</code></pre><hr><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><hr><p>移除列表中某个数据的第一个匹配项。</p><pre><code>#列表序列.remove(数据)name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list.remove(&apos;Rose&apos;)# 结果：[&apos;Tom&apos;, &apos;Lily&apos;]print(name_list)</code></pre><hr><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><hr><p>清空列表</p><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list.clear()print(name_list) # 结果： []</code></pre><hr><h3 id="修改指定下标数据"><a href="#修改指定下标数据" class="headerlink" title="修改指定下标数据"></a>修改指定下标数据</h3><hr><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_list[0] = &apos;aaa&apos;# 结果：[&apos;aaa&apos;, &apos;Lily&apos;, &apos;Rose&apos;]print(name_list)</code></pre><hr><h3 id="逆置reverse"><a href="#逆置reverse" class="headerlink" title="逆置reverse"></a>逆置reverse</h3><hr><pre><code>num_list = [1, 5, 2, 3, 6, 8]num_list.reverse()# 结果：[8, 6, 3, 2, 5, 1]print(num_list)</code></pre><hr><h3 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h3><hr><pre><code>列表序列.sort( key=None, reverse=False)</code></pre><blockquote><p>注意：reverse表示排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</p></blockquote><pre><code>num_list = [1, 5, 2, 3, 6, 8]num_list.sort()# 结果：[1, 2, 3, 5, 6, 8]print(num_list)</code></pre><hr><h3 id="复制copy"><a href="#复制copy" class="headerlink" title="复制copy"></a>复制copy</h3><hr><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]name_li2 = name_list.copy()# 结果：[&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]print(name_li2)</code></pre><hr><h3 id="while遍历列表"><a href="#while遍历列表" class="headerlink" title="while遍历列表"></a>while遍历列表</h3><hr><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]i = 0while i &lt; len(name_list):    print(name_list[i])    i += 1</code></pre><hr><h3 id="for遍历列表"><a href="#for遍历列表" class="headerlink" title="for遍历列表"></a>for遍历列表</h3><hr><pre><code>name_list = [&apos;Tom&apos;, &apos;Lily&apos;, &apos;Rose&apos;]for i in name_list:    print(i)</code></pre><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><hr><p>一个元组可以存储多个数据，<strong>元组内的数据是不能修改的</strong>。元组特点：定义元组使用小括号，且逗号隔开各个数据，数据可以是不同的数据类型。</p><pre><code>#多个数据元组t1 = (10, 20, 30)#单个数据元组t2 = (10,)print(type(t2))  # tuplet3 = (20)print(type(t3))  # int</code></pre><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也要添加逗号，否则数据类型为唯一的这个数据的数据类型。</p></blockquote><p>按下标查找数据</p><pre><code>tuple1 = (&apos;aa&apos;, &apos;bb&apos;, &apos;cc&apos;, &apos;bb&apos;)print(tuple1[0])  # aa</code></pre><p>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。</p><pre><code>tuple1 = (&apos;aa&apos;, &apos;bb&apos;, &apos;cc&apos;, &apos;bb&apos;)print(tuple1.index(&apos;aa&apos;))  # 0</code></pre><p>count()：统计某个数据在当前元组出现的次数。</p><pre><code>tuple1 = (&apos;aa&apos;, &apos;bb&apos;, &apos;cc&apos;, &apos;bb&apos;)print(tuple1.count(&apos;bb&apos;))  # 2</code></pre><p>len()：统计元组中数据的个数。</p><pre><code>tuple1 = (&apos;aa&apos;, &apos;bb&apos;, &apos;cc&apos;, &apos;bb&apos;)print(len(tuple1))  # 4</code></pre><blockquote><p>注意：元组内的直接数据如果修改则立即报错</p></blockquote><blockquote><p>但是如果元组里面有列表，修改列表里面的数据则是支持的，故自觉很重要。</p></blockquote><pre><code>tuple2 = (10, 20, [&apos;aa&apos;, &apos;bb&apos;, &apos;cc&apos;], 50, 30)print(tuple2[2])  # 访问到列表# 结果：(10, 20, [&apos;aaaaa&apos;, &apos;bb&apos;, &apos;cc&apos;], 50, 30)tuple2[2][0] = &apos;aaaaa&apos;print(tuple2)</code></pre><hr><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><hr><p>字典里面的数据是以键值对形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应的键的名字查找数据即可。</p><p>字典特点：符号为大括号；数据为键值对形式出现；各个键值对之间用逗号隔开。</p><pre><code># 有数据字典dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;# 空字典dict2 = &#123;&#125;</code></pre><p>一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p><hr><h3 id="增和改"><a href="#增和改" class="headerlink" title="增和改"></a>增和改</h3><hr><p>写法：字典序列[key] = 值</p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p></blockquote><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;dict1[&apos;name&apos;] = &apos;Rose&apos;# 结果：&#123;&apos;name&apos;: &apos;Rose&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;print(dict1)dict1[&apos;id&apos;] = 110# &#123;&apos;name&apos;: &apos;Rose&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;, &apos;id&apos;: 110&#125;print(dict1)</code></pre><blockquote><p>注意：<strong>字典为可变类型</strong>。</p></blockquote><hr><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><hr><p>del()/del：删除字典或删除字典中指定键值对。</p><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;del dict1[&apos;gender&apos;]# 结果：&#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20&#125;print(dict1)</code></pre><p>clear()：清空字典</p><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;dict1.clear()print(dict1)  # &#123;&#125;</code></pre><hr><h3 id="key值查找"><a href="#key值查找" class="headerlink" title="key值查找"></a>key值查找</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;print(dict1[&apos;name&apos;])  # Tomprint(dict1[&apos;id&apos;])  # 报错</code></pre><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote><hr><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><hr><pre><code>字典序列.get(key, 默认值)</code></pre><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p></blockquote><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;print(dict1.get(&apos;name&apos;))  # Tomprint(dict1.get(&apos;id&apos;, 110))  # 110print(dict1.get(&apos;id&apos;))  # None</code></pre><hr><h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;print(dict1.keys())  # dict_keys([&apos;name&apos;, &apos;age&apos;, &apos;gender&apos;])</code></pre><hr><h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;print(dict1.values())  # dict_values([&apos;Tom&apos;, 20, &apos;男&apos;])</code></pre><hr><h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;print(dict1.items())  # dict_items([(&apos;name&apos;, &apos;Tom&apos;), (&apos;age&apos;, 20), (&apos;gender&apos;, &apos;男&apos;)])</code></pre><hr><h3 id="遍历字典的key"><a href="#遍历字典的key" class="headerlink" title="遍历字典的key"></a>遍历字典的key</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;for key in dict1.keys():    print(key)</code></pre><hr><h3 id="遍历字典的value"><a href="#遍历字典的value" class="headerlink" title="遍历字典的value"></a>遍历字典的value</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;for value in dict1.values():    print(value)</code></pre><hr><h3 id="遍历字典的元素"><a href="#遍历字典的元素" class="headerlink" title="遍历字典的元素"></a>遍历字典的元素</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;for item in dict1.items():    print(item)</code></pre><hr><h3 id="遍历字典的键值对"><a href="#遍历字典的键值对" class="headerlink" title="遍历字典的键值对"></a>遍历字典的键值对</h3><hr><pre><code>dict1 = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 20, &apos;gender&apos;: &apos;男&apos;&#125;for key, value in dict1.items():    print(f&apos;&#123;key&#125; = &#123;value&#125;&apos;)</code></pre><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><hr><p>创建集合使用<code>&#123;&#125;</code>或<code>set()</code>，但是如果要创建空集合只能使用<code>set()</code>，因为<code>&#123;&#125;</code>用来创建空字典。</p><pre><code>s1 = &#123;10, 20, 30, 40, 50&#125;print(s1)#&#123;40, 10, 50, 20, 30&#125;s2 = &#123;10, 30, 20, 10, 30, 40, 30, 50&#125;print(s2)#&#123;40, 10, 50, 20, 30&#125;s3 = set(&apos;abcdefg&apos;)print(s3)s4 = set()print(type(s4))  # sets5 = &#123;&#125;print(type(s5))  # dict</code></pre><p>特点：集合可以去掉重复数据；集合数据是无序的，故不支持下标。</p><hr><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><hr><p>add()</p><pre><code>s1 = &#123;10, 20&#125;s1.add(100)s1.add(10)print(s1)  # &#123;100, 10, 20&#125;</code></pre><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote><p>update(), 追加的数据是序列。</p><pre><code>s1 = &#123;10, 20&#125;# s1.update(100)  # 报错s1.update([100, 200])s1.update(&apos;abc&apos;)print(s1)</code></pre><hr><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><hr><p>remove()，删除集合中的指定数据，如果数据不存在则报错。</p><pre><code>s1 = &#123;10, 20&#125;s1.remove(10)print(s1)s1.remove(10)  # 报错print(s1)</code></pre><p>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</p><pre><code>s1 = &#123;10, 20&#125;s1.discard(10)print(s1)s1.discard(10)print(s1)</code></pre><p>pop()，随机删除集合中的某个数据，并返回这个数据。</p><pre><code>s1 = &#123;10, 20, 30, 40, 50&#125;del_num = s1.pop()print(del_num)print(s1)</code></pre><hr><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><hr><p>in：判断数据在集合序列。not in：判断数据不在集合序列</p><pre><code>s1 = &#123;10, 20, 30, 40, 50&#125;print(10 in s1)print(10 not in s1)</code></pre><hr><h2 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h2><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h3><hr><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">支持的容器类型</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">合并</td><td style="text-align:center">字符串、列表、元组</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">复制</td><td style="text-align:center">字符串、列表、元组</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">元素是否存在</td><td style="text-align:center">字符串、列表、元组、字典</td></tr><tr><td style="text-align:center">not in</td><td style="text-align:center">元素是否不存在</td><td style="text-align:center">字符串、列表、元组、字典</td></tr></tbody></table><hr><p><code>+</code>:</p><pre><code># 1. 字符串 str1 = &apos;aa&apos;str2 = &apos;bb&apos;str3 = str1 + str2print(str3)  # aabb# 2. 列表 list1 = [1, 2]list2 = [10, 20]list3 = list1 + list2print(list3)  # [1, 2, 10, 20]# 3. 元组 t1 = (1, 2)t2 = (10, 20)t3 = t1 + t2print(t3)  #(1, 2, 10, 20)</code></pre><hr><p><code>*</code>:</p><pre><code># 1. 字符串print(&apos;-&apos; * 10)  # ----------# 2. 列表list1 = [&apos;hello&apos;]print(list1 * 4)  # [&apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;, &apos;hello&apos;]# 3. 元组t1 = (&apos;world&apos;,)print(t1 * 4)  # (&apos;world&apos;, &apos;world&apos;, &apos;world&apos;, &apos;world&apos;)</code></pre><hr><p><code>in</code>或<code>not in</code>:</p><pre><code># 1. 字符串print(&apos;a&apos; in &apos;abcd&apos;)  # Trueprint(&apos;a&apos; not in &apos;abcd&apos;)  # False# 2. 列表list1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]print(&apos;a&apos; in list1)  # Trueprint(&apos;a&apos; not in list1)  # False# 3. 元组t1 = (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;)print(&apos;aa&apos; in t1)  # Falseprint(&apos;aa&apos; not in t1)  # True</code></pre><hr><h3 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h3><hr><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step，供for循环使用</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td></tr></tbody></table><hr><p>len()</p><pre><code># 1. 字符串str1 = &apos;abcdefg&apos;print(len(str1))  # 7# 2. 列表list1 = [10, 20, 30, 40]print(len(list1))  # 4# 3. 元组t1 = (10, 20, 30, 40, 50)print(len(t1))  # 5# 4. 集合s1 = &#123;10, 20, 30&#125;print(len(s1))  # 3# 5. 字典dict1 = &#123;&apos;name&apos;: &apos;Rose&apos;, &apos;age&apos;: 18&#125;print(len(dict1))  # 2</code></pre><hr><p>del()</p><pre><code># 1. 字符串str1 = &apos;abcdefg&apos;del str1print(str1)#error# 2. 列表list1 = [10, 20, 30, 40]del(list1[0])print(list1)  # [20, 30, 40]</code></pre><hr><p>max()</p><pre><code># 1. 字符串str1 = &apos;abcdefg&apos;print(max(str1))  # g# 2. 列表list1 = [10, 20, 30, 40]print(max(list1))  # 40</code></pre><hr><p>min()</p><pre><code># 1. 字符串str1 = &apos;abcdefg&apos;print(min(str1))  # a# 2. 列表list1 = [10, 20, 30, 40]print(min(list1))  # 10</code></pre><hr><p>range()</p><pre><code># 1 2 3 4 5 6 7 8 9for i in range(1, 10, 1):    print(i)# 1 3 5 7 9for i in range(1, 10, 2):    print(i)# 0 1 2 3 4 5 6 7 8 9for i in range(10):    print(i)</code></pre><blockquote><p>注意：range()生成的序列不包含end数字。</p></blockquote><hr><p>enumerate()</p><pre><code>enumerate(可遍历对象, start=0)</code></pre><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p></blockquote><pre><code>list1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]for i in enumerate(list1):    print(i)#(0, &apos;a&apos;)(1, &apos;b&apos;)(2, &apos;c&apos;)(4, &apos;e&apos;)for index, char in enumerate(list1, start=1):    print(f&apos;下标是&#123;index&#125;, 对应的字符是&#123;char&#125;&apos;)#下标是1, 对应的字符是a...</code></pre><hr><h3 id="容器类型转换"><a href="#容器类型转换" class="headerlink" title="容器类型转换"></a>容器类型转换</h3><hr><p>tuple()：将某个序列转换成元组</p><pre><code>list1 = [10, 20, 30, 40, 50, 20]s1 = &#123;100, 200, 300, 400, 500&#125;print(tuple(list1))#(10, 20, 30, 40, 50, 20)print(tuple(s1))#(100, 200, 300, 400, 500)</code></pre><p>list()：将某个序列转换成列表</p><pre><code>t1 = (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)s1 = &#123;100, 200, 300, 400, 500&#125;print(list(t1))#[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]print(list(s1))#[100, 200, 300, 400, 500]</code></pre><p>set()：将某个序列转换成集合</p><pre><code>list1 = [10, 20, 30, 40, 50, 20]t1 = (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)print(set(list1))#&#123;40, 10, 50, 20, 30&#125;print(set(t1))#&#123;&apos;c&apos;, &apos;d&apos;, &apos;a&apos;, &apos;b&apos;, &apos;e&apos;&#125;</code></pre><blockquote><p>注意：集合可以快速完成列表去重；集合不支持下标</p></blockquote><hr><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><hr><p>用一个表达式创建一个有规律的列表或控制一个有规律列表。列表推导式又叫列表生成式。</p><p>创建一个0-10的列表。</p><pre><code>#while循环实现# 1. 准备一个空列表list1 = []# 2. 书写循环，依次追加数字到空列表list1中i = 0while i &lt; 10:    list1.append(i)    i += 1print(list1)#for循环实现list1 = []for i in range(10):    list1.append(i)print(list1)#列表推导式实现list1 = [i for i in range(10)]print(list1)</code></pre><hr><p>带if的列表推导式</p><p>创建0-10的偶数列表:</p><pre><code>#range()步长实现list1 = [i for i in range(0, 10, 2)]print(list1)#if实现list1 = [i for i in range(10) if i % 2 == 0]print(list1)</code></pre><hr><p>多个for循环实现列表推导式</p><p>创建列表如下：</p><pre><code>[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</code></pre><p>代码如下：</p><pre><code>list1 = [(i, j) for i in range(1, 3) for j in range(3)]print(list1)</code></pre><hr><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><hr><p>如下两个列表，如何快速合并为一个字典？</p><pre><code>list1 = [&apos;name&apos;, &apos;age&apos;, &apos;gender&apos;]list2 = [&apos;Tom&apos;, 20, &apos;man&apos;]</code></pre><p>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</p><p>创建一个字典：字典key是1-5数字，value是这个数字的2次方：</p><pre><code>dict1 = &#123;i: i**2 for i in range(1, 5)&#125;print(dict1)  # &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</code></pre><p>将两个列表合并为一个字典：</p><pre><code>list1 = [&apos;name&apos;, &apos;age&apos;, &apos;gender&apos;]list2 = [&apos;Tom&apos;, 20, &apos;man&apos;]dict1 = &#123;list1[i]: list2[i] for i in range(len(list1))&#125;print(dict1)</code></pre><p>提取字典中目标数据</p><pre><code>counts = &#123;&apos;MBP&apos;: 268, &apos;HP&apos;: 125, &apos;DELL&apos;: 201, &apos;Lenovo&apos;: 199, &apos;acer&apos;: 99&#125;# 需求：提取上述电脑数量大于等于200的字典数据count1 = &#123;key: value for key, value in counts.items() if value &gt;= 200&#125;print(count1)  # &#123;&apos;MBP&apos;: 268, &apos;DELL&apos;: 201&#125;</code></pre><hr><h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><hr><p>创建一个集合，数据为下方列表的2次方。</p><pre><code>list1 = [1, 1, 2]</code></pre><p>代码如下：</p><pre><code>list1 = [1, 1, 2]set1 = &#123;i ** 2 for i in list1&#125;print(set1)  # &#123;1, 4&#125;</code></pre><blockquote><p>注意：集合有数据去重功能。</p></blockquote><hr><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><hr><p>函数就是将一段具有独立功能的代码块整合到一个整体并命名，在需要的位置调用这个名称即可完成对应的需求。函数在开发过程中，可以更高效的实现代码重用。</p><p>定义函数：</p><pre><code>def 函数名(参数):    代码1    代码2    ......</code></pre><p>调用函数</p><pre><code>函数名(参数)</code></pre><blockquote><p>注意：不同的需求，参数可有可无。在Python中，函数必须先定义后使用。<strong>一定是先定义函数，后调用函数。</strong></p></blockquote><p>代码</p><pre><code>def sum_num(a, b):    return a + b# 用result变量保存函数返回值result = sum_num(1, 2)print(result)</code></pre><p>函数的说明文档help(函数名)</p><pre><code>def sum_num(a, b):    &quot;&quot;&quot; 求和函数 &quot;&quot;&quot;    return a + bhelp(sum_num)</code></pre><hr><h2 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><hr><p>变量作用域指的是变量生效的范围，主要分为两类：局部变量和全局变量。</p><p>局部变量：定义在函数体内部的变量，即只在函数体内部生效。局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</p><p>全局变量：指的是在函数体内、外都能生效的变量。</p><pre><code>a = 100def testA():    print(a)def testB():    a = 200    print(a)testA()  # 100testB()  # 200print(f&apos;全局变量a = &#123;a&#125;&apos;)  # 全局变量a = 100</code></pre><p>在<code>testB</code>函数内部的<code>a = 200</code>中的变量a是在修改全局变量<code>a</code>吗？不是。<code>testB</code>函数内部的<code>a = 200</code>是定义了一个局部变量。</p><p>如何在函数体内部修改全局变量？</p><pre><code>a = 100def testA():    print(a)def testB():    # global 关键字声明a是全局变量    global a    a = 200    print(a)testA()  # 100testB()  # 200print(f&apos;全局变量a = &#123;a&#125;&apos;)  # 全局变量a = 200</code></pre><hr><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><hr><p>如果一个函数要有多个返回值，该如何书写代码？</p><pre><code>def return_num():    return 1, 2result = return_num()print(result)  # (1, 2)</code></pre><blockquote><p>注意：<code>return a, b</code>写法，返回多个数据的时候，默认是元组类型。return后面可以连接列表、元组或字典，以返回多个值。</p></blockquote><hr><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><hr><p>位置参数：调用函数时根据函数定义的参数位置来传递参数。</p><pre><code>def user_info(name, age, gender):    print(f&apos;您的名字是&#123;name&#125;, 年龄是&#123;age&#125;, 性别是&#123;gender&#125;&apos;)user_info(&apos;TOM&apos;, 20, &apos;男&apos;)</code></pre><blockquote><p>注意：传递和定义参数的顺序及个数必须一致。</p></blockquote><p>关键字参数：函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，<strong>同时也清除了参数的顺序需求</strong>。</p><pre><code>def user_info(name, age, gender):    print(f&apos;您的名字是&#123;name&#125;, 年龄是&#123;age&#125;, 性别是&#123;gender&#125;&apos;)user_info(&apos;Rose&apos;, age=20, gender=&apos;女&apos;)user_info(&apos;小明&apos;, gender=&apos;男&apos;, age=16)</code></pre><p>注意：<strong>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</strong></p><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p><pre><code>def user_info(name, age, gender=&apos;男&apos;):    print(f&apos;您的名字是&#123;name&#125;, 年龄是&#123;age&#125;, 性别是&#123;gender&#125;&apos;)user_info(&apos;TOM&apos;, 20)user_info(&apos;Rose&apos;, 18, &apos;女&apos;)</code></pre><p>不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</p><pre><code>def user_info(*args):    print(args)# (&apos;TOM&apos;,)user_info(&apos;TOM&apos;)# (&apos;TOM&apos;, 18)user_info(&apos;TOM&apos;, 18)</code></pre><blockquote><p>注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。</p></blockquote><p>包裹关键字传递</p><pre><code>def user_info(**kwargs):    print(kwargs)# &#123;&apos;name&apos;: &apos;TOM&apos;, &apos;age&apos;: 18, &apos;id&apos;: 110&#125;user_info(name=&apos;TOM&apos;, age=18, id=110)</code></pre><blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p></blockquote><hr><h3 id="拆包和交换变量值"><a href="#拆包和交换变量值" class="headerlink" title="拆包和交换变量值"></a>拆包和交换变量值</h3><hr><p>拆包：元组</p><pre><code>def return_num():    return 100, 200num1, num2 = return_num()print(num1)  # 100print(num2)  # 200</code></pre><p>拆包：字典</p><pre><code>dict1 = &#123;&apos;name&apos;: &apos;TOM&apos;, &apos;age&apos;: 18&#125;a, b = dict1# 对字典进行拆包，取出来的是字典的keyprint(a)  # nameprint(b)  # ageprint(dict1[a])  # TOMprint(dict1[b])  # 18</code></pre><p>交换变量值</p><p>交换两个变量的值。借助第三变量存储数据。</p><pre><code># 1. 定义中间变量c = 0# 2. 将a的数据存储到cc = a# 3. 将b的数据20赋值到a，此时a = 20a = b#4. 将之前c的数据10赋值到b，此时b = 10b = cprint(a)  # 20print(b)  # 10</code></pre><p>交换两个变量的值。方法二</p><pre><code>a, b = 1, 2a, b = b, aprint(a)  # 2print(b)  # 1</code></pre><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><hr><p>在python中，值是靠引用来传递来的。<strong>我们可以用<code>id()</code>来判断两个变量是否为同一个值的引用。</strong> 我们可以将id值理解为那块内存的地址标识。</p><pre><code># 1. int类型a = 1b = aprint(b)  # 1print(id(a))  # 140708464157520print(id(b))  # 140708464157520a = 2print(b)  # 1,说明int类型为不可变类型 print(id(a))  # 140708464157552，此时得到是的数据2的内存地址print(id(b))  # 140708464157520# 2. 列表aa = [10, 20]bb = aaprint(id(aa))  # 2325297783432print(id(bb))  # 2325297783432aa.append(30)print(bb)  # [10, 20, 30], 列表为可变类型print(id(aa))  # 2325297783432print(id(bb))  # 2325297783432</code></pre><p>引用当做实参，代码如下：</p><pre><code>def test1(a):    print(a)    print(id(a))    a += a    print(a)    print(id(a))# int：计算前后id值不同b = 100test1(b)# 列表：计算前后id值相同c = [11, 22]test1(c)</code></pre><hr><h3 id="可变和不可变类型"><a href="#可变和不可变类型" class="headerlink" title="可变和不可变类型"></a>可变和不可变类型</h3><hr><p>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变。</p><p>可变类型：列表、字典、集合。</p><p>不可变类型：整型、浮点型、字符串、元组。</p><hr><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><hr><p>3以内数字累加和</p><pre><code># 3 + 2 + 1def sum_numbers(num):    # 1.如果是1，直接返回1 -- 出口    if num == 1:        return 1    # 2.如果不是1，重复执行累加并返回结果    return num + sum_numbers(num-1)sum_result = sum_numbers(3)# 输出结果为6print(sum_result)</code></pre><hr><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><hr><p>如果一个函数有一个返回值，并且只有一句代码，可以使用lambda简化。</p><p>lambda语法</p><pre><code>lambda 参数列表 ： 表达式</code></pre><blockquote><p>注意：lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用。lambda表达式能接收任何数量的参数但只能返回一个表达式的值。</p></blockquote><pre><code># 函数def fn1():    return 200print(fn1)print(fn1())# lambda表达式,无参数fn2 = lambda: 100print(fn2)print(fn2())</code></pre><blockquote><p>注意：直接打印lambda表达式，输出的是此lambda的内存地址</p></blockquote><p>计算a + b</p><pre><code>def add(a, b):    return a + bresult = add(1, 2)print(result)#lambda实现,有参数fn1 = lambda a, b: a + bprint(fn1(1, 2))</code></pre><p>lambda的参数形式，默认参数</p><pre><code>fn1 = lambda a, b, c=100: a + b + cprint(fn1(10, 20))</code></pre><p>可变参数：<code>*args</code></p><pre><code>fn1 = lambda *args: argsprint(fn1(10, 20, 30))</code></pre><blockquote><p>注意：这里的可变参数传入到lambda之后，返回值为元组。</p></blockquote><p>可变参数：<code>**kwargs</code></p><pre><code>fn1 = lambda **kwargs: kwargsprint(fn1(name=&apos;python&apos;, age=20))</code></pre><p>lambda的应用，带判断的lambda</p><pre><code>fn1 = lambda a, b: a if a &gt; b else bprint(fn1(1000, 500))</code></pre><p>lambda的应用，列表数据按字典key的值排序</p><pre><code>students = [    &#123;&apos;name&apos;: &apos;TOM&apos;, &apos;age&apos;: 20&#125;,    &#123;&apos;name&apos;: &apos;ROSE&apos;, &apos;age&apos;: 19&#125;,    &#123;&apos;name&apos;: &apos;Jack&apos;, &apos;age&apos;: 22&#125;]# 按name值升序排列students.sort(key=lambda x: x[&apos;name&apos;])print(students)# 按name值降序排列students.sort(key=lambda x: x[&apos;name&apos;], reverse=True)print(students)# 按age值升序排列students.sort(key=lambda x: x[&apos;age&apos;])print(students)</code></pre><hr><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><hr><p><strong>把函数作为参数传入，这样的函数称为高阶函数</strong>，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p><p>体验高阶函数:</p><pre><code>#数字求绝对值计算abs(-10)  # 10#数字的四舍五入计算round(1.2)  # 1round(1.9)  # 2#需求：任意两个数字，按照指定要求整理数字后再进行求和计算。#方法1def add_num(a, b):    return abs(a) + abs(b)result = add_num(-1, 2)print(result)  # 3#方法2def sum_num(a, b, f):    return f(a) + f(b)result = sum_num(-1, 2, abs)print(result)  # 3</code></pre><blockquote><p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p></blockquote><hr><p>内置高阶函数map():map(func, lst)，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的列表(Python2)/迭代器(Python3)返回。</p><pre><code>#计算`list1`序列中各个数字的2次方。list1 = [1, 2, 3, 4, 5]def func(x):    return x ** 2result = map(func, list1)print(result)  # &lt;map object at 0x0000013769653198&gt;print(list(result))  # [1, 4, 9, 16, 25]</code></pre><hr><p>reduce():reduce(func，lst)，<strong>其中func必须有两个参数</strong>。每次func计算的结果继续和序列的下一个元素做累积计算。</p><pre><code>#计算`list1`序列中各个数字的累加和。import functoolslist1 = [1, 2, 3, 4, 5]def func(a, b):    return a + bresult = functools.reduce(func, list1)print(result)  # 15</code></pre><hr><p>filter():filter(func, lst)函数用于过滤序列, 过滤掉不符合条件的元素, 返回一个filter对象。如果要转换为列表, 可以使用list()来转换。</p><pre><code>list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]def func(x):    return x % 2 == 0result = filter(func, list1)print(result)  # &lt;filter object at 0x0000017AF9DC3198&gt;print(list(result))  # [2, 4, 6, 8, 10]</code></pre><hr><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><hr><p>文件操作的作用就是把一些内容(数据)存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力。</p><p>关闭文件 <code>f.close()</code>。</p><p>打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><pre><code>open(name, mode)#name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。#mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</code></pre><p>打开文件模式</p><table><thead><tr><th style="text-align:center">模式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:center">rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:center">r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:center">w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:center">wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:center">w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:center">wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:center">a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:center">ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:center">a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:center">ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><hr><p>写:</p><pre><code>#语法对象对象.write(&apos;内容&apos;)# 1. 打开文件f = open(&apos;test.txt&apos;, &apos;w&apos;)# 2.文件写入f.write(&apos;hello world&apos;)# 3. 关闭文件f.close()</code></pre><blockquote><p>注意：<code>w</code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。<code>r</code>模式：如果文件不存在则报错。</p></blockquote><hr><p>读：</p><p>read()</p><pre><code>文件对象.read(num)</code></pre><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p></blockquote><p>readlines()：可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><pre><code>f = open(&apos;test.txt&apos;)content = f.readlines()# [&apos;hello world\n&apos;, &apos;abcdefg\n&apos;, &apos;aaa\n&apos;, &apos;bbb\n&apos;, &apos;ccc&apos;]print(content)# 关闭文件f.close()</code></pre><p>readline()一次读取一行内容。</p><pre><code>f = open(&apos;test.txt&apos;)content = f.readline()print(f&apos;第一行：&#123;content&#125;&apos;)content = f.readline()print(f&apos;第二行：&#123;content&#125;&apos;)</code></pre><p>seek()：用来移动文件指针。</p><pre><code>文件对象.seek(偏移量, 起始位置)#起始位置：0：文件开头；1：当前位置；2：文件结尾</code></pre><hr><p>文件备份：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><pre><code>old_name = input(&apos;请输入您要备份的文件名：&apos;)# 提取文件后缀点的下标index = old_name.rfind(&apos;.&apos;)# print(index)  # 后缀中.的下标# print(old_name[:index])  # 源文件名（无后缀）# 组织新文件名 旧文件名 + [备份] + 后缀new_name = old_name[:index] + &apos;[备份]&apos; + old_name[index:]# 打印新文件名（带后缀）# print(new_name)# 打开文件old_f = open(old_name, &apos;rb&apos;)new_f = open(new_name, &apos;wb&apos;)# 将源文件数据写入备份文件while True:    con = old_f.read(1024)    if len(con) == 0:        break    new_f.write(con)# 关闭文件old_f.close()new_f.close()</code></pre><hr><p>文件和文件夹的操作:在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><pre><code>#导入os模块import os#使用os模块相关功能os.函数名()</code></pre><p>文件重命名</p><pre><code>os.rename(目标文件名, 新文件名)</code></pre><p>删除文件</p><pre><code>os.remove(目标文件名)</code></pre><p>创建文件夹</p><pre><code>os.mkdir(文件夹名字)</code></pre><p>删除文件夹</p><pre><code>os.rmdir(文件夹名字)</code></pre><p>获取当前目录</p><pre><code>os.getcwd()</code></pre><p>改变默认目录</p><pre><code>os.chdir(目录)</code></pre><p>获取目录列表</p><pre><code>os.listdir(目录)</code></pre><hr><p>批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><pre><code>import os# 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符flag = 1# 获取指定目录dir_name = &apos;./&apos;# 获取指定目录的文件列表file_list = os.listdir(dir_name)# print(file_list)# 遍历文件列表内的文件for name in file_list:    # 添加指定字符    if flag == 1:        new_name = &apos;Python-&apos; + name    # 删除指定字符    elif flag == 2:        num = len(&apos;Python-&apos;)        new_name = name[num:]    # 打印新文件名，测试程序正确性    print(new_name)    # 重命名    os.rename(dir_name+name, dir_name+new_name)</code></pre><hr><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><hr><p>面向对象就是将编程当成是一个事物，对外界来说，事物是直接使用的，不用去管他内部的情况。而编程就是设置事物能够做什么事。</p><p>类和对象的关系：用类去创建一个对象。</p><hr><p>定义类:Python2中类分为：经典类 和 新式类。</p><pre><code>class 类名():    代码    ......class Washer():    def wash(self):        print(&apos;我会洗衣服&apos;)</code></pre><blockquote><p>注意：类名要满足标识符命名规则，同时遵循大驼峰命名习惯。</p></blockquote><p>经典类：不由任意内置类型派生出的类，称之为经典类</p><pre><code>class 类名:    代码    ......</code></pre><hr><p>创建对象：对象又名实例。</p><pre><code>对象名 = 类名()# 创建对象haier1 = Washer()# &lt;__main__.Washer object at 0x0000018B7B224240&gt;print(haier1)# haier对象调用实例方法haier1.wash()</code></pre><blockquote><p>注意：创建对象的过程也叫实例化对象。</p></blockquote><hr><p>self指的是调用该函数的对象。</p><pre><code># 1. 定义类class Washer():    def wash(self):        print(&apos;我会洗衣服&apos;)        # &lt;__main__.Washer object at 0x0000024BA2B34240&gt;        print(self)# 2. 创建对象haier1 = Washer()# &lt;__main__.Washer object at 0x0000018B7B224240&gt;print(haier1)# haier1对象调用实例方法haier1.wash()haier2 = Washer()# &lt;__main__.Washer object at 0x0000022005857EF0&gt;print(haier2)</code></pre><blockquote><p>注意：打印对象和self得到的结果是一致的，都是当前对象的内存中存储地址。</p></blockquote><hr><p>类外面添加对象属性</p><pre><code>对象名.属性名 = 值haier1.width = 500haier1.height = 800</code></pre><p>类外面获取对象属性</p><pre><code>对象名.属性名print(f&apos;haier1洗衣机的宽度是&#123;haier1.width&#125;&apos;)print(f&apos;haier1洗衣机的高度是&#123;haier1.height&#125;&apos;)</code></pre><p>类里面获取对象属性</p><pre><code>self.属性名# 定义类class Washer():    def print_info(self):        # 类里面获取实例属性        print(f&apos;haier1洗衣机的宽度是&#123;self.width&#125;&apos;)        print(f&apos;haier1洗衣机的高度是&#123;self.height&#125;&apos;)# 创建对象haier1 = Washer()# 添加实例属性haier1.width = 500haier1.height = 800haier1.print_info()</code></pre><hr><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><hr><p>在Python中，<code>__xx__()</code>的函数叫做魔法方法，指的是具有特殊功能的函数。</p><hr><p><code>__init__()</code>方法的作用：初始化对象。</p><pre><code>class Washer():    # 定义初始化功能的函数    def __init__(self):        # 添加实例属性        self.width = 500        self.height = 800    def print_info(self):        # 类里面调用实例属性        print(f&apos;洗衣机的宽度是&#123;self.width&#125;, 高度是&#123;self.height&#125;&apos;)haier1 = Washer()haier1.print_info()</code></pre><blockquote><p>注意：<code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用。<code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</p></blockquote><hr><p>带参数的<code>__init__()</code>：</p><pre><code>class Washer():    def __init__(self, width, height):        self.width = width        self.height = height    def print_info(self):        print(f&apos;洗衣机的宽度是&#123;self.width&#125;&apos;)        print(f&apos;洗衣机的高度是&#123;self.height&#125;&apos;)haier1 = Washer(10, 20)haier1.print_info()haier2 = Washer(30, 40)haier2.print_info()</code></pre><hr><p> <code>__str__()</code>：当使用print输出对象的时候，默认打印对象的内存地址。如果类定义了<code>__str__</code>方法，那么就会打印从在这个方法中return的数据。</p><pre><code>class Washer():    def __init__(self, width, height):        self.width = width        self.height = height    def __str__(self):        return &apos;这是海尔洗衣机的说明书&apos;haier1 = Washer(10, 20)# 这是海尔洗衣机的说明书print(haier1)</code></pre><hr><p><code>__del__()</code>：当删除对象时，python解释器也会默认调用<code>__del__()</code>方法。</p><pre><code>class Washer():    def __init__(self, width, height):        self.width = width        self.height = height    def __del__(self):        print(f&apos;&#123;self&#125;对象已经被删除&apos;)haier1 = Washer(10, 20)# &lt;__main__.Washer object at 0x0000026118223278&gt;对象已经被删除del haier1</code></pre><hr><h2 id="面向对象之继承"><a href="#面向对象之继承" class="headerlink" title="面向对象之继承"></a>面向对象之继承</h2><hr><p>经典类或旧式类：不由任意内置类型派生出的类，称之为经典类。</p><pre><code>class 类名:    代码    ......</code></pre><p>新式类</p><pre><code>class 类名(object):  代码</code></pre><p>Python面向对象的继承指的是多个类之间的所属关系，即子类默认继承父类的所有属性和方法，具体如下：</p><pre><code># 父类Aclass A(object):    def __init__(self):        self.num = 1    def info_print(self):        print(self.num)# 子类Bclass B(A):    passresult = B()result.info_print()  # 1</code></pre><blockquote><p>在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类。</p></blockquote><hr><h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><hr><pre><code># 1. 师父类class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)# 2. 徒弟类class Prentice(Master):    pass# 3. 创建对象daqiudaqiu = Prentice()# 4. 对象访问实例属性print(daqiu.kongfu)# 5. 对象调用实例方法daqiu.make_cake()</code></pre><hr><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><hr><p>所谓多继承意思就是一个类同时继承了多个父类。</p><pre><code>class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)# 创建学校类class School(object):    def __init__(self):        self.kongfu = &apos;[school煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class Prentice(School, Master):    passdaqiu = Prentice()print(daqiu.kongfu)daqiu.make_cake()</code></pre><blockquote><p>注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</p></blockquote><hr><h3 id="子类重写父类同名方法和属性"><a href="#子类重写父类同名方法和属性" class="headerlink" title="子类重写父类同名方法和属性"></a>子类重写父类同名方法和属性</h3><hr><pre><code>class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class School(object):    def __init__(self):        self.kongfu = &apos;[school煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)# 独创配方class Prentice(School, Master):    def __init__(self):        self.kongfu = &apos;[独创煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)daqiu = Prentice()print(daqiu.kongfu)daqiu.make_cake()print(Prentice.__mro__)</code></pre><blockquote><p>子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</p></blockquote><hr><h3 id="子类调用父类的同名方法和属性"><a href="#子类调用父类的同名方法和属性" class="headerlink" title="子类调用父类的同名方法和属性"></a>子类调用父类的同名方法和属性</h3><hr><pre><code>class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class School(object):    def __init__(self):        self.kongfu = &apos;[school煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class Prentice(School, Master):    def __init__(self):        self.kongfu = &apos;[独创煎饼果子配方]&apos;    def make_cake(self):        # 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化        self.__init__()        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)    # 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化    def make_master_cake(self):        Master.__init__(self)        Master.make_cake(self)    def make_school_cake(self):        School.__init__(self)        School.make_cake(self)daqiu = Prentice()daqiu.make_cake()daqiu.make_master_cake()daqiu.make_school_cake()daqiu.make_cake()</code></pre><hr><h3 id="多层继承"><a href="#多层继承" class="headerlink" title="多层继承"></a>多层继承</h3><hr><pre><code>class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class School(object):    def __init__(self):        self.kongfu = &apos;[school煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class Prentice(School, Master):    def __init__(self):        self.kongfu = &apos;[独创煎饼果子配方]&apos;    def make_cake(self):        self.__init__()        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)    def make_master_cake(self):        Master.__init__(self)        Master.make_cake(self)    def make_school_cake(self):        School.__init__(self)        School.make_cake(self)# 徒孙类class Tusun(Prentice):    passxiaoqiu = Tusun()xiaoqiu.make_cake()xiaoqiu.make_school_cake()xiaoqiu.make_master_cake()</code></pre><hr><h3 id="super-调用父类方法"><a href="#super-调用父类方法" class="headerlink" title="super()调用父类方法"></a>super()调用父类方法</h3><hr><pre><code>class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class School(Master):    def __init__(self):        self.kongfu = &apos;[school煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)        # 方法2.1        # super(School, self).__init__()        # super(School, self).make_cake()        # 方法2.2        super().__init__()        super().make_cake()class Prentice(School):    def __init__(self):        self.kongfu = &apos;[独创煎饼果子技术]&apos;    def make_cake(self):        self.__init__()        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)    # 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装    def make_master_cake(self):        Master.__init__(self)        Master.make_cake(self)    def make_school_cake(self):        School.__init__(self)        School.make_cake(self)    # 一次性调用父类的同名属性和方法    def make_old_cake(self):        # 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改        # Master.__init__(self)        # Master.make_cake(self)        # School.__init__(self)        # School.make_cake(self)        # 方法二: super()        # 方法2.1 super(当前类名, self).函数()        # super(Prentice, self).__init__()        # super(Prentice, self).make_cake()        # 方法2.2 super().函数()        super().__init__()        super().make_cake()daqiu = Prentice()daqiu.make_old_cake()</code></pre><blockquote><p>注意：使用super() 可以自动查找父类。调用顺序遵循 <code>__mro__</code> 类属性的顺序。比较适合单继承使用。</p></blockquote><hr><h3 id="私有权限"><a href="#私有权限" class="headerlink" title="私有权限"></a>私有权限</h3><hr><p>定义私有属性和方法</p><p>在Python中，可以为实例属性和方法设置私有权限，即设置某个实例属性或实例方法不继承给子类。</p><p>设置私有权限的方法：在属性名和方法名前面加上两个下划线__。</p><pre><code>class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class School(object):    def __init__(self):        self.kongfu = &apos;[school煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class Prentice(School, Master):    def __init__(self):        self.kongfu = &apos;[独创煎饼果子配方]&apos;        # 定义私有属性        self.__money = 2000000    # 定义私有方法    def __info_print(self):        print(self.kongfu)        print(self.__money)    def make_cake(self):        self.__init__()        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)    def make_master_cake(self):        Master.__init__(self)        Master.make_cake(self)    def make_school_cake(self):        School.__init__(self)        School.make_cake(self)# 徒孙类class Tusun(Prentice):    passdaqiu = Prentice()# 对象不能访问私有属性和私有方法# print(daqiu.__money)# daqiu.__info_print()xiaoqiu = Tusun()# 子类无法继承父类的私有属性和私有方法# print(xiaoqiu.__money)  # 无法访问实例属性__money# xiaoqiu.__info_print()</code></pre><blockquote><p>注意：私有属性和私有方法只能在类里面访问和修改。</p></blockquote><hr><p>获取和修改私有属性值</p><p>在Python中，一般定义函数名<code>get_xx</code>用来获取私有属性，定义<code>set_xx</code>用来修改私有属性值。</p><pre><code>class Master(object):    def __init__(self):        self.kongfu = &apos;[古法煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class School(object):    def __init__(self):        self.kongfu = &apos;[school煎饼果子配方]&apos;    def make_cake(self):        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)class Prentice(School, Master):    def __init__(self):        self.kongfu = &apos;[独创煎饼果子配方]&apos;        self.__money = 2000000    # 获取私有属性    def get_money(self):        return self.__money    # 修改私有属性    def set_money(self):        self.__money = 500    def __info_print(self):        print(self.kongfu)        print(self.__money)    def make_cake(self):        self.__init__()        print(f&apos;运用&#123;self.kongfu&#125;制作煎饼果子&apos;)    def make_master_cake(self):        Master.__init__(self)        Master.make_cake(self)    def make_school_cake(self):        School.__init__(self)        School.make_cake(self)# 徒孙类class Tusun(Prentice):    passdaqiu = Prentice()xiaoqiu = Tusun()# 调用get_money函数获取私有属性money的值print(xiaoqiu.get_money())# 调用set_money函数修改私有属性money的值xiaoqiu.set_money()print(xiaoqiu.get_money())</code></pre><hr><h2 id="面向对象之其他"><a href="#面向对象之其他" class="headerlink" title="面向对象之其他"></a>面向对象之其他</h2><h3 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h3><hr><p>封装：将属性和方法书写到类的里面的操作即为封装，封装可以为属性和方法添加私有权限。</p><p>继承：子类默认继承父类的所有属性和方法，子类可以重写父类属性和方法。</p><p>多态：传入不同的对象，产生不同的结果</p><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><hr><p>多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）。</p><p>多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</p><pre><code>class Dog(object):    def work(self):  # 父类提供统一的方法，哪怕是空方法        print(&apos;指哪打哪...&apos;)class ArmyDog(Dog):  # 继承Dog类    def work(self):  # 子类重写父类同名方法        print(&apos;追击敌人...&apos;)class DrugDog(Dog):    def work(self):        print(&apos;追查毒品...&apos;)class Person(object):    def work_with_dog(self, dog):  # 传入不同的对象，执行不同的代码，即不同的work函数        dog.work()ad = ArmyDog()dd = DrugDog()daqiu = Person()daqiu.work_with_dog(ad)daqiu.work_with_dog(dd)</code></pre><hr><h3 id="类属性和实例属性"><a href="#类属性和实例属性" class="headerlink" title="类属性和实例属性"></a>类属性和实例属性</h3><hr><p>类属性就是类对象所拥有的属性，它被该类的所有实例对象所共有。类属性可以使用类对象或实例对象访问。</p><pre><code>class Dog(object):    tooth = 10wangcai = Dog()xiaohei = Dog()print(Dog.tooth)  # 10print(wangcai.tooth)  # 10print(xiaohei.tooth)  # 10</code></pre><hr><h3 id="修改类属性"><a href="#修改类属性" class="headerlink" title="修改类属性"></a>修改类属性</h3><hr><p>类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</p><pre><code>class Dog(object):    tooth = 10wangcai = Dog()xiaohei = Dog()# 修改类属性Dog.tooth = 12print(Dog.tooth)  # 12print(wangcai.tooth)  # 12print(xiaohei.tooth)  # 12# 不能通过对象修改属性，如果这样操作，实则是创建了一个实例属性wangcai.tooth = 20print(Dog.tooth)  # 12print(wangcai.tooth)  # 20print(xiaohei.tooth)  # 12</code></pre><hr><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><hr><pre><code>class Dog(object):    def __init__(self):        self.age = 5    def info_print(self):        print(self.age)wangcai = Dog()print(wangcai.age)  # 5# print(Dog.age)  # 报错：实例属性不能通过类访问wangcai.info_print()  # 5</code></pre><hr><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><hr><p>类方法特点:需要用装饰器<code>@classmethod</code>来标识其为类方法，对于类方法，<strong>第一个参数必须是类对象</strong>，一般以<code>cls</code>作为第一个参数。</p><p>当方法中需要使用类对象(如访问私有类属性等)时，定义类方法。类方法一般和类属性配合使用。</p><pre><code>class Dog(object):    __tooth = 10    @classmethod    def get_tooth(cls):        return cls.__toothwangcai = Dog()result = wangcai.get_tooth()print(result)  # 10</code></pre><hr><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><hr><p>静态方法特点：需要通过装饰器<code>@staticmethod</code>来进行修饰，<strong>静态方法既不需要传递类对象也不需要传递实例对象（形参没有self/cls）</strong>。静态方法也能够通过 <strong>实例对象</strong> 和 <strong>类对象</strong> 去访问。</p><p>当方法中 <strong>既不需要使用实例对象</strong>(如实例对象，实例属性)，<strong>也不需要使用类对象</strong> (如类属性、类方法、创建实例等)时，定义静态方法。取消不需要的参数传递，有利于减少不必要的内存占用和性能消耗。</p><pre><code>class Dog(object):    @staticmethod    def info_print():        print(&apos;这是一个狗类，用于创建狗实例....&apos;)wangcai = Dog()# 静态方法既可以使用对象访问又可以使用类访问wangcai.info_print()Dog.info_print()</code></pre><hr><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><hr><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。</p><p>例如：以<code>r</code>方式打开一个不存在的文件。</p><pre><code>open(&apos;test.txt&apos;, &apos;r&apos;)</code></pre><p>异常的写法</p><pre><code>try:    可能发生错误的代码except:    如果出现异常执行的代码</code></pre><p>需求：尝试以<code>r</code>模式打开文件，如果文件不存在，则以<code>w</code>方式打开。</p><pre><code>try:    f = open(&apos;test.txt&apos;, &apos;r&apos;)except:    f = open(&apos;test.txt&apos;, &apos;w&apos;)</code></pre><hr><p>捕获指定异常</p><pre><code>try:    可能发生错误的代码except 异常类型:    如果捕获到该异常类型执行的代码</code></pre><hr><p>捕获多个指定异常：当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</p><pre><code>try:    print(1/0)except (NameError, ZeroDivisionError):    print(&apos;有错误&apos;)</code></pre><hr><p>捕获异常描述信息</p><pre><code>try:    print(num)except (NameError, ZeroDivisionError) as result:    print(result)</code></pre><hr><p>捕获所有异常：Exception是所有程序异常类的父类。</p><pre><code>try:    print(num)except Exception as result:    print(result)</code></pre><hr><p>异常的else：else表示的是如果没有异常要执行的代码。</p><pre><code>try:    print(1)except Exception as result:    print(result)else:    print(&apos;我是else，是没有异常的时候执行的代码&apos;)</code></pre><hr><p>异常的finally:finally表示的是无论是否异常都要执行的代码，例如关闭文件。</p><pre><code>try:    f = open(&apos;test.txt&apos;, &apos;r&apos;)except Exception as result:    f = open(&apos;test.txt&apos;, &apos;w&apos;)else:    print(&apos;没有异常，真开心&apos;)finally:    f.close()</code></pre><hr><p>自定义异常:在Python中，抛出自定义异常的语法为<code>raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（用户输入密码，如果输入的长度不足3位，则报错，即抛出自定义异常，并捕获该异常）。</p><pre><code># 自定义异常类，继承Exceptionclass ShortInputError(Exception):    def __init__(self, length, min_len):        self.length = length        self.min_len = min_len    # 设置抛出异常的描述信息    def __str__(self):        return f&apos;你输入的长度是&#123;self.length&#125;, 不能少于&#123;self.min_len&#125;个字符&apos;def main():    try:        con = input(&apos;请输入密码：&apos;)        if len(con) &lt; 3:            raise ShortInputError(len(con), 3)    except Exception as result:        print(result)    else:        print(&apos;密码已经输入完成&apos;)main()</code></pre><hr><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><hr><p>Python模块(Module)，是一个Python文件，以 <code>.py</code> 结尾，包含了 Python 对象定义和Python语句。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><p>导入模块的方式</p><ul><li>import 模块名</li><li>from 模块名 import 功能名</li><li>from 模块名 import *</li><li>import 模块名 as 别名</li><li>from 模块名 import 功能名 as 别名</li></ul><hr><p>import</p><pre><code># 1. 导入模块import 模块名import 模块名1, 模块名2...# 2. 调用功能模块名.功能名()# 体验import mathprint(math.sqrt(9))  # 3.0</code></pre><hr><p>from..import..</p><pre><code>from 模块名 import 功能1, 功能2, 功能3...# 体验from math import sqrtprint(sqrt(9))</code></pre><hr><p>from .. import *</p><pre><code>from 模块名 import *# 体验from math import *print(sqrt(9))</code></pre><hr><p>as定义别名</p><pre><code># 模块定义别名import 模块名 as 别名# 功能定义别名from 模块名 import 功能 as 别名# 体验# 模块别名import time as tttt.sleep(2)print(&apos;hello&apos;)# 功能别名from time import sleep as slsl(2)print(&apos;hello&apos;)</code></pre><hr><h3 id="制作模块"><a href="#制作模块" class="headerlink" title="制作模块"></a>制作模块</h3><hr><p>制作模块:在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。<strong>也就是说自定义模块名必须要符合标识符命名规则。</strong></p><p>新建一个Python文件，命名为<code>my_module1.py</code>，并定义<code>testA</code>函数。</p><pre><code>def testA(a, b):    print(a + b)</code></pre><p>在实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息。例如，在<code>my_module1.py</code>文件中添加测试代码。</p><pre><code>def testA(a, b):    print(a + b)testA(1, 1)</code></pre><p>此时，无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行<code>testA</code>函数的调用。</p><p>解决办法如下：</p><pre><code>def testA(a, b):    print(a + b)# 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行testA函数调用if __name__ == &apos;__main__&apos;:    testA(1, 1)</code></pre><p>调用模块</p><pre><code>import my_module1my_module1.testA(1, 1)</code></pre><hr><h3 id="模块定位顺序"><a href="#模块定位顺序" class="headerlink" title="模块定位顺序"></a>模块定位顺序</h3><hr><p>如果使用<code>from .. import ..</code>或<code>from .. import *</code>导入多个模块的时候，且模块内有同名功能。当调用这个同名功能的时候，调用到的是后面导入的模块的功能。</p><pre><code># 模块1代码def my_test(a, b):    print(a + b)# 模块2代码def my_test(a, b):    print(a - b)# 导入模块和调用功能代码from my_module1 import my_testfrom my_module2 import my_test# my_test函数是模块2中的函数my_test(1, 1)</code></pre><p>当导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li></ol><p>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p><ul><li>注意<ul><li>自己的文件名不要和已有模块名重复，否则导致模块功能无法使用</li><li><code>使用from 模块名 import 功能</code>的时候，如果功能名字重复，调用到的是最后定义或导入的功能。</li></ul></li></ul><hr><h3 id="all"><a href="#all" class="headerlink" title="__all__"></a><code>__all__</code></h3><hr><p>如果一个模块文件中有<code>__all__</code>变量，当使用<code>from xxx import *</code>导入时，只能导入这个列表中的元素。</p><pre><code># my_module1模块代码__all__ = [&apos;testA&apos;]def testA():    print(&apos;testA&apos;)def testB():    print(&apos;testB&apos;)# 导入模块的文件代码from my_module1 import *testA()testB()# 报错</code></pre><hr><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><hr><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为包。</p><p>制作包：[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</p><p>注意：新建包后，包内部会自动创建<code>__init__.py</code>文件，这个文件控制着包的导入行为。</p><p>新建包<code>mypackage</code>，新建包内模块：<code>my_module1</code> 和 <code>my_module2</code>，模块内代码如下</p><pre><code># my_module1print(1)def info_print1():    print(&apos;my_module1&apos;)# my_module2print(2)def info_print2():    print(&apos;my_module2&apos;)</code></pre><p>导入包</p><pre><code># 方法一import 包名.模块名包名.模块名.目标# 体验import my_package.my_module1my_package.my_module1.info_print1()#方法二：必须在`__init__.py`文件中添加`__all__ = []`，控制允许导入的模块列表。from 包名 import *模块名.目标# 体验from my_package import *my_module1.info_print1()</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从oc到swift</title>
    <link href="/2020/08/29/40.%E4%BB%8Eoc%E5%88%B0swift/"/>
    <url>/2020/08/29/40.%E4%BB%8Eoc%E5%88%B0swift/</url>
    
    <content type="html"><![CDATA[<h2 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>OC程序的源文件后缀名为<code>.m</code>。 m代表message，代表OC的消息机制。OC语言完全兼容C语言，所以在<code>.m</code>文件中可以写C语言的任何代码，甚至C++的代 码也可以写在<code>.m</code>文件下。 </p><p><code>#import</code> 指令:同一个文件，无论被<code>#import</code>多少次，在预编译的时候只会包含1次。包括<code>#import &quot;&quot;</code>和<code>#import &lt;&gt;</code>。</p><p><code>.m</code>是Objective-C的源文件。<code>.mm</code>是Objective-C++的源文件。</p><p><code>.h</code>是头文件，包含方法，属性的声明。<code>.m</code>是类的实现文件，参与编译的文件，用来实现类中声明的方法。</p><p>Boolean类型数据允许取值true或false,也可以是0或非0的整数替代true和false。</p><pre><code>@try &#123;     //可能出错的代码块 &#125; @catch (NSException *exception) &#123;     // 一旦出了错 可以的补救代码。&#125;@finally &#123;     //无论出错不出错都会执行的代 &#125;</code></pre><p>面向对象设计四个个主要特征: 抽象性、 封装性、 多态性、 继承性。 </p><hr><h3 id="NSLog"><a href="#NSLog" class="headerlink" title="NSLog"></a>NSLog</h3><hr><p>NSLog 是printf函数的增强版 </p><pre><code>NSLog(@&quot;Hello World!&quot;); </code></pre><p><code>@&quot;&quot;</code>这个符号表示将一个C的字符串转化为OC中的字符串对象NSString。</p><p>OC字符串必须使用@符号开头。<code>@</code>符号放置的位置在双引号外面。在打印OC字符串的时候使用格式控制符<code>%@</code> 。NSString类型的指针变量只能存储OC字符串常量的地址。</p><p>OC中大部分的关键字都是以<code>@</code>开头的,比如<code>@interface</code>,<code>@implementation</code>,<code>@end</code>。</p><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><hr><p><code>.h</code>文件为类的声明文件，用于声明成员变量、方法。类的声明使用关键字 <code>@interface</code>和<code>@end</code>。<code>.h</code>中的方法只是做一个声明，并不对方法进行实现。</p><p><code>.m</code>：类的实现文件，用于实现<code>.h</code>中声明的方法。类的实现使用关键字 <code>@implementation</code>和<code>@end</code>。</p><p>方法的声明和实现，都必须以<code>+</code> 或者 <code>-</code> 开头。 <code>+</code>表示类方法（静态方法）, <code>-</code>表示对象方法（动态方法）。</p><p>在<code>.h</code>中声明的所有方法作用域都是public类型，不能更改。</p><p>成员变量的常用作用域有3种:</p><pre><code>@public 全局都可以访问 @protected    只能在类内部和子类中访问 @private 只能在类内部访问</code></pre><hr><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><hr><p>创建对象的写法 </p><pre><code>类名 * 对象名 = [类名 new]; </code></pre><p>只要是用new操作符定义的实体就会在堆内存中开辟一个新的空间。1）在堆中开辟一段存储空间 2）初始化成员变量（写在类声明大括号中的属性就叫做成员变量，也叫做实例变量） 3）返回开辟空间的首地址。</p><p>访问对象的属性可以用： </p><pre><code>对象-&gt;对象成员；</code></pre><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><hr><p>oc没有严格的方法重载. 在oc中方法名不允许相同。 </p><p>OC中的方法分为：对象方法和类方法。</p><p>对象方法：对象方法以<code>-</code>开头如<code>-（void）xx</code> ;对象方法只能由对象来调用;对象方法中可以访问当前对象的成员变量;调用格式<code>[对象名    对象方法名]</code> 。凡事类型都用()括起来。</p><p>类方法：以<code>+</code>开头如<code>+（void）xxx</code>;类方法只能由类来调用;类方法中不能访问实例变量(成员变量)，因为类方法由类来调用，并没有创建存储空间来存储类中的成员变量;调用格式：<code>[类名  类方法名]</code>。</p><p>有参方法，冒号也是方法名的一部分</p><pre><code>//返回值类型 void ; 方法名run: : :，参数有3个，都是int型的，参数的参数名 steps  km times - (void)run:(int)steps :(int)km :(int)times;// 声明三个带参数的方法，方法名是 runWith: andWith: andWith: - (void)runWith:(int)steps andWith:(int)km andWith:(int)times;</code></pre><p>有参方法的调用：</p><pre><code>//[对象名 方法名 参数][zhansgan eat:@&quot;辣条&quot;];// [对象名 方法名:参数:参数];[zhansgan run:3 :10 :5];[zhansgan runWith:5 andWith:20 andWith:2];</code></pre><hr><h3 id="对象的存储"><a href="#对象的存储" class="headerlink" title="对象的存储"></a>对象的存储</h3><hr><p>类创建对象，每个对象在内存中都占据一定的存储空间，每个对象都有一份属于自己的单独的成员变量，所有的对象公用类的成员方法，方法在整个内存中只有一份，类本身在内存中占据一份存储空间，类的方法存储于此。</p><p>每一个对象都包含一个isa指针，这个指针指向当前对象所属的类。 当调用方法的时候如<code>[p eat]</code> 表示给p所指向的对象发送一条eat消息，表示要调用对象的eat方法，此时对象会顺着内部的isa指针找到存储于类中的方法，开始执行，此时方法所修改的所有的信息，都是对应的对象的。</p><hr><h3 id="pragma-mark"><a href="#pragma-mark" class="headerlink" title="pragma mark"></a>pragma mark</h3><hr><pre><code>#pragma mark -//“-”后面不能随手敲个空格 #pragma mark 分组（标识）名称</code></pre><hr><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><hr><p><code>@interface</code> <code>@end</code>和<code>@implementation</code> <code>@end</code>不能嵌套包含。</p><p>只有类的声明没有类的实现，会报错。</p><hr><h3 id="NSString"><a href="#NSString" class="headerlink" title="NSString"></a>NSString</h3><hr><p>NSString是Objective-C中核心处理字符串的类之一。</p><p>创建常量字符串，注意使用“@”符号：</p><pre><code>NSString * str = @&quot;hahahaha&quot;; NSString * str2 = [[NSString alloc] initWithString:str];</code></pre><p>创建空字符串，给予赋值：</p><pre><code>NSString * str1 = [NSString new ];str1 = @&quot;啊哈哈哈&quot;;</code></pre><p>创建格式化字符串：占位符（由一个%加一个字符组成）：</p><pre><code>NSString * str3 = [NSString stringWithFormat:@&quot;图片 xxxx %02d- %02d.jpg&quot;,9,1];NSLog(@&quot;Hello, World! %@ &quot;,str3);//图片 xxxx %09- %01.jpg</code></pre><p>计算字符串长度</p><pre><code>NSLog(@&quot;字符串的长度  %ld&quot;, [str2 length]);</code></pre><hr><h3 id="对象与对象之间的关系"><a href="#对象与对象之间的关系" class="headerlink" title="对象与对象之间的关系"></a>对象与对象之间的关系</h3><hr><p>一个对象作为另外1个对象的成员变量</p><pre><code>//女孩有一部手机@interface Girl :NSObject&#123;Phone *_phone;&#125;@end//女孩用手机打电话@interface Girl :NSObject - (void)callWithPhone:(Phone *)phone;@end</code></pre><p>组合关系:1个对象是由多个对象组合起来的。比如：计算机对象，是由主板对象、CPU对象、内存对象、硬盘对象组合起来的。  </p><p>依赖关系：就是一个对象要1件事情的时候必须有另一个对象。比如，B类是A类⽅方法的参数，我们就说A类依赖于B类。</p><p>关联关系:当一个对象拥有另外一个对象的时候, 当B对象为A对象的成员变量的时候,B对象与A对象之间存在一种关联关系。</p><hr><h3 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h3><hr><p>单一职责原则、开放封闭原则</p><hr><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>OC中的方法分为两种</p><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><hr><p>以“-”减号开头的方法就是对象方法。对象方法的调用，必须创建对象，然后通过对象名去调用。 </p><p>声明 </p><pre><code>-（返回值类型）方法名：（参数类型）参数名称； - (void)square : (int)num;</code></pre><hr><h4 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a>类方法</h4><hr><p>以<code>+</code>加号开头的方法叫做类方法。这个方法不依赖于对象，不需要创建对象来调用，而是直接使用类名调用。</p><pre><code>+（返回值类型）方法名：（参数类型）参数名称； + (void)square : (int)num;</code></pre><p><strong>类方法使用注意事项： 1. 类方法中不能访问成员变量。 2. 类方法和对象方法可以同名。 3. 类方法中不能通过self调用同名方法，会死循环。 4. 对象方法当中可以通过类名直接调用类方法。 5. 在没有属性时，建议使用类方法。</strong></p><hr><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>没有名字的对象。 </p><h3 id="self关键字"><a href="#self关键字" class="headerlink" title="self关键字"></a>self关键字</h3><hr><p>self是一个指针变量，用于在方法中指向调用该方法的对象。 </p><p>self的应用场景 1）用在类方法中，代表当前类。 2）用在对象方法中，代表当前对象。 3）访问成员变量：<code>self-&gt;成员变量</code>。 </p><p>self使用注意</p><pre><code>在对象方法中【self 对象方法】；  // 死循环 在类方法中【self 对象方法】；  // 死循环</code></pre><hr><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装:把复杂的数据或者操作进行隐藏,只操作数据或者方法的接口。封装的好处:隐藏成员变量，不让外部直接访问，提高安全性。控制外界访问成员权限。</p><h4 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h4><hr><p>命名规范：方法名必须以set开头。set后面跟成员变量名称，成员变量的首字母必须大写。返回值一定是void。一定要接收一个参数，而且参数类型跟成员变量类型一致。形参的名称不能跟成员变量名一样。</p><pre><code>- (void)set成员变量名 (首字母大写，去掉下划线) : (成员变量类型)成员变量名称 （去掉下划线）；- (void)setAge:(int)age;</code></pre><hr><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h4><hr><p>命名规范：肯定有返回值，返回值类型肯定与成员变量类型一致。方法名跟成员变量名一样。不需要接收任何参数</p><p>格式： </p><pre><code>- （成员变量类型）成员变量名称（去掉下划线）; - (int) age;</code></pre><p>使用</p><pre><code>// Student类的声明@interface Student : NSObject&#123;   int _age;&#125;- (void)setAge:(int)newAge;//set方法- (int)age;//get方法@end//Student类实现:@implementation Student //setter方法实现- (void)setAge:(int)newAge&#123;_age = newAge;&#125;//getter方法- (int)age&#123;return _age;&#125;@end调用:Student *s = [Student new];// 设置age的值[s setAge:10];// 取出age的值int age = [s age];// 输出NSLog(@&quot;age is %d&quot;, age);</code></pre><hr><h3 id="类的继承和派生"><a href="#类的继承和派生" class="headerlink" title="类的继承和派生"></a>类的继承和派生</h3><hr><p><strong>OC中的继承是单继承:也就是说一个类只能一个父类,不能继承多个父类。子类不能定义和父类同名的成员变量,但是可以继承父类的变量。</strong></p><p>基类的私有属性<code>@private</code>能被继承,不能被使用。<code>@public</code>公有成员能被继承,也能被外部方法访问。<code>@protected</code>保护成员能够被继承、在子类中使用,但不能够被外部函数访问。在<code>@interface @end</code>之间声明的成员变量如果不做特别的说明,那么其默认是 protected的。</p><p>在类的实现即<code>.m</code>文件，<code>@implementation</code>中也可以声明成员变量,是<code>@private</code>的。</p><p>方法的重写：从父类继承的方法,可能这个方法并不适合子类,可以在子类中重写父类的方法。</p><pre><code>@interface Animal : NSObject&#123;  int _tuiNum; //腿的个数  int _eyeNum; //眼睛个数&#125;-(void)setTuiNum:(int)tuiNum;-(int)tuiNum;-(void)setEyeNum:(int)eyeNum;-(int)eyeNum;-(void)eat;-(void)run;@end#import &quot;Animal.h&quot;@interface Dog : Animal&#123;&#125;-(void)eat; //覆盖父类的eat的方法@end</code></pre><p>重写之后,父类的对象调用父类的方法;子类的对象,调用子类的方法,不会引起冲突。从父类继承的方法,不适用于子类时,可以直接声明父类的同名方法,并定义。不用考虑父类中,方法已存在的问题。</p><p>重写后,子类可以通过super调用父类的方法。</p><pre><code>- （void）eat&#123; [super eat];&#125;</code></pre><hr><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><hr><p>OC中并没有像Java中提供的私有方法,OC中的私有,可以理解为相对私有。</p><p>方法在<code>.m</code>中实现,不在<code>.h</code>中声明,此时该方法被称为私有方法:私有方法不可以被子类继承</p><pre><code>@interface MyClass&#123;// 添加变量&#125;- (void)PublicMethod;//公共方法,可以被继承类继承@end// 而在类的.m文件中,直接实现的方法：- (void)PrivateMethod&#123; ////&#125;@end</code></pre><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><hr><p>多态:同一种行为,对于不同的事物具有不同的表现形式。多态的条件:有继承关系、有方法重写。</p><p><strong>父类的声明变量指向子类对象。如果存在多态,父类是可以访问子类特有的方法。</strong></p><hr><h3 id="类对象的用法"><a href="#类对象的用法" class="headerlink" title="类对象的用法"></a>类对象的用法</h3><hr><p>可以用来调用方法</p><pre><code>Dog *d = [Dog new];Dog *d1 = [Dog new];Class c = [d1 class];// 用类名调用类方法[Dog test];[c test];</code></pre><p>可以用来初始化对象</p><pre><code>Class c = [Dog class];[c test];// 用类对象创建对象Dog *d = [c new];[d eat];</code></pre><hr><h3 id="SEL方法选择器"><a href="#SEL方法选择器" class="headerlink" title="SEL方法选择器"></a>SEL方法选择器</h3><hr><p>SEL类型作用:可以定义变量；可以用来作为方法的形参；可以用来作为方法的实参。</p><hr><h4 id="Static关键"><a href="#Static关键" class="headerlink" title="Static关键"></a>Static关键</h4><hr><p>static修饰局部变量:延长布局变量的生命周期。</p><p>static修饰全局变量:当前变量只能在当前文件中使用。</p><p>static修饰函数:函数只能在当前文件中使用。</p><p>使用static修饰实例变量是不被允许的。</p><p>使用static修饰方法也是不被允许的。</p><p>使用static<code>@interface和@end</code>之间是不被允许的（写局部变量本来就不被允许）。</p><pre><code>//狗类的声明static int m=10; //此句话也可以放到.m中@interface Dog:NSObject&#123;  int _speed;&#125;-(void)run;@end// Dog.m文件内容#import &quot;Dog.h&quot;#pragma mark 狗类的实现@implementation Dog-(void)run&#123;//定义局部静态变量 mstatic int m=10;NSLog(@&quot;m = %d&quot;,m);m++;&#125;@end</code></pre><p>注意Static型全局变量的可见性,局限于当前.m文件，其他的文件中的类,无法访问到该变量。</p><hr><h3 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h3><hr><p>点语法是编译器特性，当编译器看到对象使用点语法，会自动把点语法转换为调用set或get方法的形式。</p><pre><code>Student *stu = [Student new];// 设置age的值stu.age = 10; // 等价于[stu setAge:10];// 取出age的值int age = stu.age; // 等价于int age = [stu age];// 输出NSLog(@&quot;age is %i&quot;, age);</code></pre><p>self在set方法中使用</p><pre><code>- (void)setAge:(int)age&#123;self.age = age;&#125;错误用法，会死循环。上面的代码相当于：- (void)setAge:(int)age&#123;[self setAge:age];&#125;</code></pre><p>self在get方法中使用</p><pre><code>- (int)age&#123;return self.age;&#125;错误用法：死循环。相当于：- (int)age&#123;return [self age];&#125;</code></pre><hr><h3 id="property关键字"><a href="#property关键字" class="headerlink" title="property关键字"></a>property关键字</h3><hr><p><code>@property</code>是编译器的指令。它告诉编译器,声明属性的set、get方法。好处是:免去我们手工书写get和set方法繁琐的代码。</p><p>格式：</p><pre><code>@property 类型 方法名@property int age;//相当于进行了age的set和get方法的声明-(void)setAge:(int)age;-(int)age;</code></pre><hr><h3 id="synthesize关键字"><a href="#synthesize关键字" class="headerlink" title="synthesize关键字"></a>synthesize关键字</h3><hr><p>如果<code>@synthesize</code>变量名要先在<code>.h</code>文件中声明</p><pre><code>@property int age;.h-(void)setAge:(int)age;-(int)age;.m@synthesize age;展开形式如下:-(void)setAge:(int)age&#123;self-&gt;age = age;&#125;-(int)age&#123;return age;&#125;</code></pre><p><strong>@property和@synthesize搭配使用,用于简化set和get方法的定义和实现。</strong></p><hr><h3 id="id类型"><a href="#id类型" class="headerlink" title="id类型"></a>id类型</h3><hr><p>id类型应用场景</p><pre><code>//狗的类,狗继承自动物Dog *dog = [Dog new];[dog run];//定义多态类型NSObjcet *dog1 = [Dog new];[(Dog *)dog run];//定义id类型id dog2 = [Dog new];[obj run];</code></pre><p>id作为成员变量</p><pre><code>// 类的声明@interface Person : NSObject@property int age;@property id obj; // 可以接收任何对象@end// 类的实现@implementation Person@end// main函数int main()&#123;   Person *p = [Person new];   [p setObj:@&quot;小王子&quot;];   NSLog(@&quot;%d&quot;,[p obj]);   return 0;&#125;</code></pre><hr><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><hr><p>构造方法:用来初始化对象实例变量值的方法,是个对象方法,<code>-</code>开头。</p><p>完整的创建一个可用的对象:</p><pre><code>Person *p=[Person new];</code></pre><p>new方法的内部会分别调用两个方法来完成3件事情:使用alloc方法来分配存储空间(返回分配的对象);使用init方法来对对象进行初始化；返回对象的首地址。</p><p>可以把new方法拆开如下:调用类方法+alloc分配存储空间,返回未经初始化的对象 </p><pre><code>Person *p1=[Person alloc];</code></pre><p>调用对象方法-init进行初始化,返回对象本身</p><pre><code>Person *p2=[p1 init];</code></pre><p>以上两个过程整合为一句:</p><pre><code>Person *p=[[Person alloc] init];</code></pre><p>init方法就是构造方法,是用来初始化对象的方法,注意这是一个对象方法,以减号开头。默认初始化完毕后,所有成员变量的值都为0。</p><p><strong>自定义构造方法的代码实现</strong></p><p>问题1：给Hero类定义一个构造方法,自定义名字信息。</p><pre><code>// 声明@property NSString *name;- (instancetype)initWithName:(NSString *)name；// 实现- (instancetype)initWithName:(NSString *)name&#123;    if (self = [super init])    &#123;        _name = name;    &#125;    return self;&#125;@end</code></pre><p>问题2：给Hero类定义一个构造方法,自定义名字信息和年龄。</p><pre><code>// 声明@property NSString *name;@property int age;- (instancetype)initWithName:(NSString *)name andAge:(int)age；// 实现- (instancetype)initWithName:(NSString *)name andAge:(int)age&#123;    if (self = [super init])    &#123;        _name = name;        _age = age;    &#125;    return self;&#125;@end</code></pre><hr><h3 id="NSMutableArray"><a href="#NSMutableArray" class="headerlink" title="NSMutableArray"></a>NSMutableArray</h3><hr><p>数组长度不固定，可以随便往里面添加或者删除元素。</p><p>创建可变数组</p><pre><code>NSMutableArray *arrayM = [NSMutableArray array];</code></pre><p>数组添加成员</p><pre><code>- (void)addObject:(ObjectType)object;</code></pre><p>删除数组成员</p><pre><code>// 用成员名进行删除- (void)removeObject:(ObjectType)object;// 删除指定位置的元素- (void)removeObjectAtIndex:(NSUInteger)index;</code></pre><hr><h2 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h2><h3 id="处理值缺失的情况"><a href="#处理值缺失的情况" class="headerlink" title="处理值缺失的情况"></a>处理值缺失的情况</h3><hr><p><code>?</code>代表可能值确实，可以使用<code>if let</code>或者<code>??</code>来处理。</p><pre><code>var optionalName: String? = &quot;John Appleseed&quot;var greeting = &quot;Hello!&quot;//如果不是 nil，会将值解包并赋给 let 后面的常量if let name = optionalName &#123;    greeting = &quot;Hello, \(name)&quot;&#125;print(greeting)//Hello, John Appleseed</code></pre><p><code>??</code>前面的变量为<code>nil</code>，则用<code>??</code>后面的变量；<code>??</code>前面的不为<code>nil</code>，则用<code>??</code>前面的变量。</p><pre><code>let nickName: String? = nillet fullName: String = &quot;John Appleseed&quot;let informalGreeting = &quot;Hi \(nickName ?? fullName)&quot;print(informalGreeting)//Hi John Appleseed</code></pre><hr><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><hr><p>使用<code>let</code>来声明常量，使用<code>var</code>来声明变量。</p><p>int转String</p><pre><code>let label = &quot;The width is&quot;let width = 94let widthLabel = label + String(width)</code></pre><p>或者</p><pre><code>let apples = 3let appleSummary = &quot;I have \(apples) apples.&quot;</code></pre><p>使用方括号<code>[]</code>来创建数组和字典。数组添加元素用<code>append</code>。</p><p>初始化一个空数组或者空字典：</p><pre><code>let emptyArray = [String]()let emptyDictionary = [String: Float]()</code></pre><p>使用 <code>for-in</code>、<code>while</code> 和 <code>repeat-while</code> 来进行循环。</p><p>switch：不需要在每个子句结尾写 break。</p><pre><code>let vegetable = &quot;red pepper&quot;switch vegetable &#123;case &quot;celery&quot;:    print(&quot;Add some raisins and make ants on a log.&quot;)case &quot;cucumber&quot;, &quot;watercress&quot;:    print(&quot;That would make a good tea sandwich.&quot;)case let x where x.hasSuffix(&quot;pepper&quot;):    print(&quot;Is it a spicy \(x)?&quot;)default:    print(&quot;Everything tastes good in soup.&quot;)&#125;</code></pre><p>字典是一个无序的集合，所以他们的键和值以任意顺序迭代结束。</p><pre><code>let interestingNumbers = [    &quot;Prime&quot;: [2, 3, 5, 7, 11, 13],    &quot;Fibonacci&quot;: [1, 1, 2, 3, 5, 8],    &quot;Square&quot;: [1, 4, 9, 16, 25],]var largest = 0for (kind, numbers) in interestingNumbers &#123;    for number in numbers &#123;        if number &gt; largest &#123;            largest = number        &#125;    &#125;&#125;print(largest)</code></pre><p>while</p><pre><code>var n = 2while n &lt; 100 &#123;    n *= 2&#125;print(n)//128var m = 2repeat &#123;    m *= 2&#125; while m &lt; 100print(m)//128</code></pre><p><code>..&lt;</code>来表示下标范围,不包含上界。如果想包含的话需要使用 <code>...</code>：</p><pre><code>var total = 0for i in 0..&lt;4 &#123;    total += i&#125;print(total)//6</code></pre><p>条件循环：</p><pre><code>for i in 1...10 where i % 2 == 0&#123;    print(i)&#125;</code></pre><p>倒叙遍历：</p><pre><code>for i in (1...10).reversed()&#123;    print(i)&#125;</code></pre><p>生成随机数：</p><pre><code>Int.random(in: 1...6)//1-6之间随机数</code></pre><p>四舍五入double，返回double：</p><pre><code>round(4.44) //4.0</code></pre><p>使用<code>func</code>来声明一个函数，使用<code>-&gt;</code>来指定函数返回值的类型。</p><pre><code>func greet(person: String, day: String) -&gt; String &#123;    return &quot;Hello \(person), today is \(day).&quot;&#125;print(greet(person:&quot;Bob&quot;, day: &quot;Tuesday&quot;))//Hello Bob, today is Tuesday.</code></pre><p>使用元组来生成复合值，比如让一个函数返回多个值。该元组的元素可以用名称或数字来获取:</p><pre><code>func calculateStatistics(scores: [Int]) -&gt; (min: Int, max: Int, sum: Int) &#123;    var min = scores[0]    var max = scores[0]    var sum = 0    for score in scores &#123;        if score &gt; max &#123;            max = score        &#125; else if score &lt; min &#123;            min = score        &#125;        sum += score    &#125;    return (min, max, sum)&#125;let statistics = calculateStatistics(scores:[5, 3, 100, 3, 9])print(statistics.sum)//120print(statistics.2)//120</code></pre><p>两个参数名时候的外部参数和内部参数：</p><pre><code>func numSun(wai nei : Int) &#123;    print(nei)&#125;numSun(wai: 3)func numSun(_ nei : Int) &#123;    print(nei)&#125;numSun(3)</code></pre><p>函数可以嵌套。</p><p>函数可以作为另一个函数的返回值:</p><pre><code>func makeIncrementer() -&gt; ((Int) -&gt; Int) &#123;    func addOne(number: Int) -&gt; Int &#123;        return 1 + number    &#125;    return addOne&#125;var increment = makeIncrementer()increment(7)//8</code></pre><p>函数也可以当做参数传入另一个函数:</p><pre><code>func hasAnyMatches(list: [Int], condition: (Int) -&gt; Bool) -&gt; Bool &#123;    for item in list &#123;        if condition(item) &#123;            return true        &#125;    &#125;    return false&#125;func lessThanTen(number: Int) -&gt; Bool &#123;    return number &lt; 10&#125;var numbers = [20, 19, 7, 12]var bol = hasAnyMatches(list: numbers, condition: lessThanTen)print(&quot;\(bol)&quot;)</code></pre><p>闭包:</p><pre><code>numbers.map(&#123;    (number: Int) -&gt; Int in    let result = 3 * number    return result&#125;)//或者var numbers = [20, 19, 7, 12]let mappedNumbers = numbers.map(&#123; number in 3 * number &#125;)print(mappedNumbers)//[60, 57, 21, 36]</code></pre><p>使用 class 和类名来创建一个类。</p><p>要创建一个类的实例，在类名后面加上括号。使用点语法来访问实例的属性和方法。</p><p>使用 init 来创建一个构造器。</p><pre><code>class NamedShape &#123;    var numberOfSides: Int = 0    var name: String    init(name: String) &#123;        self.name = name    &#125;    func simpleDescription() -&gt; String &#123;        return &quot;A shape with \(numberOfSides) sides.&quot;    &#125;&#125;</code></pre><p>如果需要在对象释放之前进行一些清理工作，使用 deinit 创建一个析构函数。</p><p>使用 enum 来创建一个枚举。</p><p>使用 struct 来创建一个结构体。结构体是传值，类是传引用。</p><p>使用 protocol 来声明一个协议。mutating。extension。</p><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><hr><p>给<code>Image View</code>重新设置Assets资源图片：</p><pre><code>@IBOutlet weak var leftImage: UIImageView!leftImage.image = UIImage(named: &quot;show2&quot;)</code></pre><hr><p>摇晃手机结束：</p><pre><code>override func motionEnded(_ motion: UIEvent.EventSubtype, with event: UIEvent?) &#123;  &#125;</code></pre><hr><p>设置view的tag，然后同一个方法中区分：</p><pre><code>@IBAction func tagBtn(_ sender: UIButton) &#123;    print(sender.tag)&#125;</code></pre><hr><p>播放音频：</p><pre><code>import AVFoundationvar player: AVAudioPlayer!func palyAV() &#123;    let url = Bundle.main.url(forResource: &quot;文件名&quot;, withExtension: &quot;格式名&quot;)    do&#123;        player = try AVAudioPlayer(contentsOf: url!)        player.play()    &#125; catch &#123;    &#125;&#125;</code></pre><hr><p>弹出框：</p><pre><code>let alter = UIAlertController(title: &quot;title&quot;, message: &quot;message&quot;, preferredStyle: .alert)alter.addAction(UIAlertAction(title: &quot;ok&quot;, style: .default, handler: &#123;(_) in    print(&quot;点击了ok&quot;)&#125;))present(alter,animated: true,completion: nil)</code></pre><hr><p>动态设置宽度：</p><pre><code>rightImage.frame.size.width = view.frame.width / 10</code></pre><hr><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><hr><p>control拖拽控件，可以选择Outlet和Action。</p><p>Autoresizing:设置上下左右宽高六个属性。</p><p>stackview</p><p>页面控件：<code>View Controller</code>。输入框：<code>Text Field</code>。 </p><hr><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><hr><p>图标制作网站：</p><pre><code>https://appicon.co/</code></pre><p>快捷键</p><pre><code>command + R        编译运行command + m        最小化command + z        撤销command + d        复制粘贴出来一个选中的ui控件command + 删除键    光标在一行的最后位置，删除整行/删除光标前的内容</code></pre><p>局域网真机调试：</p><pre><code>Window-Devices and Simulators</code></pre><hr><p>iOS</p><p><a href="https://github.com/dequan1331/HybridPageKit">https://github.com/dequan1331/HybridPageKit</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法</title>
    <link href="/2020/07/06/37.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <url>/2020/07/06/37.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="1、数据结构分类"><a href="#1、数据结构分类" class="headerlink" title="1、数据结构分类"></a>1、数据结构分类</h3><hr><p>数据结构就是把数据元素按照一定的关系组织起来的集合，用来组织和存储数据。</p><p>把数据结构分为逻辑结构和物理结构两大类。</p><p>逻辑结构分类：集合结构、线性结构、树形结构、图形结构。</p><p>物理结构：顺序存储结构、链式存储结构。</p><p>顺序存储结构：把数据元素放到地址连续的存储单元里面，其数据间的逻辑关系和物理关系是一致的 ，比如我们常用的<strong>数组就是顺序存储结构</strong>。<strong>查找快、插入删除慢</strong>。</p><p>链式存储结构：是把数据元素存放在任意的存储单元里面，这组存储单元可以是连续的也可以是不连续的。此时，数据元素之间并不能反映元素间的逻辑关系，因此在链式存储结构中引进了一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<strong>查找慢，增删快</strong>。</p><hr><h3 id="2、算法介绍"><a href="#2、算法介绍" class="headerlink" title="2、算法介绍"></a>2、算法介绍</h3><hr><p>算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法解决问题的策略机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。<strong>根据一定的条件，对一些数据进行计算，得到需要的结果</strong>。</p><p>一个优秀的算法追求以下两个目标：1.花最少的时间完成需求；2.占用最少的内存空间完成需求。</p><hr><h3 id="3、算法的时间复杂度"><a href="#3、算法的时间复杂度" class="headerlink" title="3、算法的时间复杂度"></a>3、算法的时间复杂度</h3><hr><p>算法的时间复杂度分析</p><p>事后分析估算方法：计算方法执行时间<code>System.currentTimeMillis()</code>。</p><p>事前分析估算方法：算法采用的策略和方案；问题的输入规模(所谓的问题输入规模就是输入量的多少)。最重要的就是把核心操作的次数和输入规模关联起来。</p><p>总结：随着输入规模的增大，算法的常数操作可以忽略不计。随着输入规模的增大，与最高次项相乘的常数可以忽略。最高次项的指数大的，随着n的增长，结果也会变得增长特别快。算法函数中n最高次幂越小，算法效率越高。</p><hr><h3 id="4、时间复杂度大O记法"><a href="#4、时间复杂度大O记法" class="headerlink" title="4、时间复杂度大O记法"></a>4、时间复杂度大O记法</h3><hr><p>执行次数=执行时间。用大写O()来体现算法时间复杂度的记法，我们称之为大O记法。</p><p>大O阶的表示法有以下几个规则可以使用：</p><p>1.用常数1取代运行时间中的所有加法常数；</p><p>2.在修改后的运行次数中，只保留高阶项；</p><p>3.如果最高阶项存在，且常数因子不为1，则去除与这个项相乘的常数。</p><p>复杂程度从低到高依次为：O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)。</p><hr><h3 id="5、算法的空间复杂度"><a href="#5、算法的空间复杂度" class="headerlink" title="5、算法的空间复杂度"></a>5、算法的空间复杂度</h3><hr><p>数据类型 内存占用字节数：byte 1、short 2、int 4、long 8、float 4、double 8、boolean 1、char 2。</p><p>计算机访问内存的方式都是一次一个字节。</p><p>一个引用（机器地址）需要8个字节表示：</p><pre><code>Date date = new Date()；//则date这个变量需要占用8个字节来表示</code></pre><p>创建一个对象，比如new Date()，除了Date对象内部存储的数据(例如年月日等信息)占用的内存，该对象本身也有内存开销，每个对象的自身开销是16个字节，用来保存对象的头信息。</p><p>一般内存的使用，如果不够8个字节，都会被自动填充为8字节。</p><p>java中数组被被限定为对象，他们一般都会因为记录长度而需要额外的内存，一个原始数据类型的数组一般需要24字节的头信息(16个自己的对象开销，4字节用于保存长度以及4个填充字节)再加上保存值所需的内存。</p><pre><code>int[] temp=new int[n];//申请n*4个字节+数组自身头信息开销24个字节</code></pre><hr><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="1、Comparable接口"><a href="#1、Comparable接口" class="headerlink" title="1、Comparable接口"></a>1、Comparable接口</h3><hr><pre><code>public class Student implements Comparable&lt;Student&gt;&#123;    private String username;    private int age;    public String getUsername() &#123;        return username;    &#125;    public void setUsername(String username) &#123;        this.username = username;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    @Override    public String toString() &#123;        return &quot;Student&#123;&quot; +                &quot;username=&apos;&quot; + username + &apos;\&apos;&apos; +                &quot;, age=&quot; + age +                &apos;&#125;&apos;;    &#125;    @Override    public int compareTo(Student o) &#123;        return this.getAge()-o.getAge();    &#125;&#125;public class TestComparable &#123;    public static void main(String[] args) &#123;        //创建两个Student对象，并调用getMax方法，完成测试        Student s1 = new Student();        s1.setUsername(&quot;张三&quot;);        s1.setAge(18);        Student s2 = new Student();        s2.setUsername(&quot;李四&quot;);        s2.setAge(20);        Comparable max = getMax(s1, s2);        System.out.println(max);    &#125;    public static Comparable getMax(Comparable c1,Comparable c2)&#123;        int result = c1.compareTo(c2);        //如果result&lt;0,则c1比c2小；        //如果result&gt;0，则c1比c2大；        //如果result==0,则c1和c2一样大；        if (result&gt;=0)&#123;            return c1;        &#125;else&#123;            return c2;        &#125;    &#125;&#125;</code></pre><hr><h3 id="2、冒泡排序"><a href="#2、冒泡排序" class="headerlink" title="2、冒泡排序"></a>2、冒泡排序</h3><hr><p>比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。最终最后位置的元素就是最大值。</p><pre><code>public class Bubble &#123;    /*     *  对数组的元素进行排序    */    public static void sort(Comparable[] a)&#123;        for(int i=a.length-1;i&gt;0;i--)&#123;            for(int j=0;j&lt;i;j++)&#123;                //比较索引j和索引j+1处的值                if (greater(a[j],a[j+1]))&#123;                    exch(a,j,j+1);                &#125;            &#125;        &#125;    &#125;    /*     *  比较v元素是否大于w元素     */    private static  boolean greater(Comparable v,Comparable w)&#123;        return v.compareTo(w)&gt;0;    &#125;    /*    数组元素i和j交换位置     */    private static void exch(Comparable[] a,int i,int j)&#123;        Comparable temp;        temp = a[i];        a[i]=a[j];        a[j]=temp;    &#125;&#125;public class BubbleTest &#123;    public static void main(String[] args) &#123;        Integer[] arr = &#123;4,5,6,3,2,1&#125;;        Bubble.sort(arr);        System.out.println(Arrays.toString(arr));//&#123;1,2,3,4,5,6&#125;    &#125;&#125;</code></pre><p>冒泡排序的时间复杂度为O(N^2)。</p><hr><h3 id="3、选择排序"><a href="#3、选择排序" class="headerlink" title="3、选择排序"></a>3、选择排序</h3><hr><p>每一次遍历的过程中，都假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较，如果当前索引处的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引。然后交换第一个索引处和最小值所在的索引处的值。</p><pre><code>public class Selection &#123;    /*       对数组中的元素进行排序    */    public static void sort(Comparable[] a)&#123;        for(int i=0;i&lt;=a.length-2;i++)&#123;            //定义一个变量，记录最小元素所在的索引，默认为参与选择排序的第一个元素所在的位置            int minIndex = i;            for(int j=i+1;j&lt;a.length;j++)&#123;                //需要比较最小索引minIndex处的值和j索引处的值；                if (greater(a[minIndex],a[j]))&#123;                    minIndex=j;                &#125;            &#125;            //交换最小元素所在索引minIndex处的值和索引i处的值            exch(a,i,minIndex);        &#125;    &#125;    /*        比较v元素是否大于w元素     */    private static  boolean greater(Comparable v,Comparable w)&#123;        return v.compareTo(w)&gt;0;    &#125;    /*    数组元素i和j交换位置     */    private static void exch(Comparable[] a,int i,int j)&#123;        Comparable temp;        temp = a[i];        a[i]=a[j];        a[j]=temp;    &#125;&#125;public class SelectionTest &#123;    public static void main(String[] args) &#123;        //原始数据        Integer[] a = &#123;4,6,8,7,9,2,10,1&#125;;        Selection.sort(a);        System.out.println(Arrays.toString(a));//&#123;1,2,4,5,7,8,9,10&#125;    &#125;&#125;</code></pre><p>时间复杂度为O(N^2)。</p><hr><h3 id="4、插入排序"><a href="#4、插入排序" class="headerlink" title="4、插入排序"></a>4、插入排序</h3><hr><p>把所有的元素分为两组，已经排序的和未排序的；找到未排序的组中的第一个元素，向已经排序的组中进行插入；倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待插入元素放到这个位置，其他的元素向后移动一位。类似打扑克牌时，新牌往手里牌的排序。</p><pre><code>public class Insertion &#123;    /*       对数组a中的元素进行排序    */    public static void sort(Comparable[] a)&#123;        for(int i=1;i&lt;a.length;i++)&#123;            for(int j=i;j&gt;0;j--)&#123;                //比较索引j处的值和索引j-1处的值，如果索引j-1处的值比索引j处的值大，则交换数据，如果不大，那么就找到合适的位置了，退出循环即可；                if (greater(a[j-1],a[j]))&#123;                    exch(a,j-1,j);                &#125;else&#123;                    break;                &#125;            &#125;        &#125;    &#125;    /*        比较v元素是否大于w元素     */    private static  boolean greater(Comparable v,Comparable w)&#123;        return v.compareTo(w)&gt;0;    &#125;    /*    数组元素i和j交换位置     */    private static void exch(Comparable[] a,int i,int j)&#123;        Comparable temp;        temp = a[i];        a[i]=a[j];        a[j]=temp;    &#125;&#125;public class InsertionTest &#123;    public static void main(String[] args) &#123;        Integer[] a = &#123;4,3,2,10,12,1,5,6&#125;;        Insertion.sort(a);        System.out.println(Arrays.toString(a));//&#123;1,2,3,4,5,6,10,12&#125;    &#125;&#125;</code></pre><p>时间复杂度为O(N^2)。</p><hr><h3 id="5、希尔排序"><a href="#5、希尔排序" class="headerlink" title="5、希尔排序"></a>5、希尔排序</h3><hr><p>选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组；对分好组的每一组数据完成插入排序；减小增长量，最小减为1，重复第二步操作。</p><p>增长量h的确定：</p><pre><code>int h=1while(h&lt;(数组长度/2))&#123;    h=2h+1&#125;//循环结束后我们就可以确定h的最大值//h的减小规则为：h=h/2</code></pre><p>代码</p><pre><code>public class Shell &#123;    /*       对数组a中的元素进行排序    */    public static void sort(Comparable[] a)&#123;        //1.根据数组a的长度，确定增长量h的初始值；        int h = 1;        while(h&lt;a.length/2)&#123;            h=2*h+1;        &#125;        //2.希尔排序        while(h&gt;=1)&#123;            //排序            //2.1.找到待插入的元素            for (int i=h;i&lt;a.length;i++)&#123;                //2.2把待插入的元素插入到有序数列中                for (int j=i;j&gt;=h;j-=h)&#123;                    //待插入的元素是a[j],比较a[j]和a[j-h]                    if (greater(a[j-h],a[j]))&#123;                        //交换元素                        exch(a,j-h,j);                    &#125;else&#123;                        //待插入元素已经找到了合适的位置，结束循环；                        break;                    &#125;                &#125;            &#125;            //减小h的值            h= h/2;        &#125;    &#125;    /*        比较v元素是否大于w元素     */    private static  boolean greater(Comparable v,Comparable w)&#123;        return v.compareTo(w)&gt;0;    &#125;    /*    数组元素i和j交换位置     */    private static void exch(Comparable[] a,int i,int j)&#123;        Comparable temp;        temp = a[i];        a[i]=a[j];        a[j]=temp;    &#125;&#125;public class ShellTest &#123;    public static void main(String[] args) &#123;        Integer[] a = &#123;9,1,2,5,7,4,8,6,3,5&#125;;        Shell.sort(a);        System.out.println(Arrays.toString(a));//&#123;1,2,3,4,5,5,6,7,8,9&#125;    &#125;&#125;</code></pre><hr><h3 id="6、归并排序"><a href="#6、归并排序" class="headerlink" title="6、归并排序"></a>6、归并排序</h3><hr><p>尽可能的一组数据拆分成两个元素相等的子组，并对每一个子组继续拆分，直到拆分后的每个子组的元素个数是1为止。将相邻的两个子组进行合并成一个有序的大组；不断的重复步骤2，直到最终只有一个组为止。</p><pre><code>public class Merge &#123;    //归并所需要的辅助数组    private static Comparable[] assist;    /*       比较v元素是否小于w元素    */    private static boolean less(Comparable v, Comparable w) &#123;        return v.compareTo(w)&lt;0;    &#125;    /*    数组元素i和j交换位置     */    private static void exch(Comparable[] a, int i, int j) &#123;        Comparable t = a[i];        a[i] = a[j];        a[j] = t;    &#125;    /*           对数组a中的元素进行排序        */    public static void sort(Comparable[] a) &#123;        //1.初始化辅助数组assist；        assist = new Comparable[a.length];        //2.定义一个lo变量，和hi变量，分别记录数组中最小的索引和最大的索引；        int lo=0;        int hi=a.length-1;        //3.调用sort重载方法完成数组a中，从索引lo到索引hi的元素的排序        sort(a,lo,hi);    &#125;    /*    对数组a中从lo到hi的元素进行排序     */    private static void sort(Comparable[] a, int lo, int hi) &#123;        //做安全性校验；        if (hi&lt;=lo)&#123;            return;        &#125;        //对lo到hi之间的数据进行分为两个组        int mid = lo+(hi-lo)/2;//   5,9  mid=7        //分别对每一组数据进行排序        sort(a,lo,mid);        sort(a,mid+1,hi);        //再把两个组中的数据进行归并        merge(a,lo,mid,hi);    &#125;    /*    对数组中，从lo到mid为一组，从mid+1到hi为一组，对这两组数据进行归并     */    private static void merge(Comparable[] a, int lo, int mid, int hi) &#123;        //定义三个指针        int i=lo;        int p1=lo;        int p2=mid+1;        //遍历，移动p1指针和p2指针，比较对应索引处的值，找出小的那个，放到辅助数组的对应索引处        while(p1&lt;=mid &amp;&amp; p2&lt;=hi)&#123;            //比较对应索引处的值            if (less(a[p1],a[p2]))&#123;                assist[i++] = a[p1++];            &#125;else&#123;                assist[i++]=a[p2++];            &#125;        &#125;        //遍历，如果p1的指针没有走完，那么顺序移动p1指针，把对应的元素放到辅助数组的对应索引处        while(p1&lt;=mid)&#123;            assist[i++]=a[p1++];        &#125;        //遍历，如果p2的指针没有走完，那么顺序移动p2指针，把对应的元素放到辅助数组的对应索引处        while(p2&lt;=hi)&#123;            assist[i++]=a[p2++];        &#125;        //把辅助数组中的元素拷贝到原数组中        for(int index=lo;index&lt;=hi;index++)&#123;            a[index]=assist[index];        &#125;    &#125;&#125;public class MergeTest &#123;    public static void main(String[] args) &#123;        Integer[] a = &#123;8,4,5,7,1,3,6,2&#125;;        Merge.sort(a);        System.out.println(Arrays.toString(a));//&#123;1,2,3,4,5,6,7,8&#125;    &#125;&#125;</code></pre><p>归并排序的时间复杂度为O(nlogn)。归并排序的缺点：需要申请额外的数组空间，导致空间复杂度提升，是典型的以空间换时间的操作。</p><hr><h3 id="7、快速排序"><a href="#7、快速排序" class="headerlink" title="7、快速排序"></a>7、快速排序</h3><hr><p>首先设定一个分界值，通过该分界值将数组分成左右两部分；将大于或等于分界值的数据放到到数组右边，小于分界值的数据放到数组的左边。此时左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值；</p><p>然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p><p>重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左侧和右侧两个部分的数据排完序后，整个数组的排序也就完成了。</p><p>切分原理：把一个数组切分成两个子数组的基本思想：</p><p>1.找一个基准值，用两个指针分别指向数组的头部和尾部；</p><p>2.先从尾部向头部开始搜索一个比基准值小的元素，搜索到即停止，并记录指针的位置；</p><p>3.再从头部向尾部开始搜索一个比基准值大的元素，搜索到即停止，并记录指针的位置；</p><p>4.交换当前左边指针位置和右边指针位置的元素；</p><p>5.重复2,3,4步骤，直到左边指针的值大于右边指针的值停止。</p><pre><code>public class Quick &#123;    /*      比较v元素是否小于w元素   */    private static boolean less(Comparable v, Comparable w) &#123;        return v.compareTo(w) &lt; 0;    &#125;    /*   数组元素i和j交换位置    */    private static void exch(Comparable[] a, int i, int j) &#123;        Comparable t = a[i];        a[i] = a[j];        a[j] = t;    &#125;    //对数组内的元素进行排序    public static void sort(Comparable[] a) &#123;        int lo = 0;        int hi = a.length-1;        sort(a,lo,hi);    &#125;    //对数组a中从索引lo到索引hi之间的元素进行排序    private static void sort(Comparable[] a, int lo, int hi) &#123;        //安全性校验        if (hi&lt;=lo)&#123;            return;        &#125;        //需要对数组中lo索引到hi索引处的元素进行分组（左子组和右子组）；        int partition = partition(a, lo, hi);//返回的是分组的分界值所在的索引，分界值位置变换后的索引        //让左子组有序        sort(a,lo,partition-1);        //让右子组有序        sort(a,partition+1,hi);    &#125;    //对数组a中，从索引 lo到索引 hi之间的元素进行分组，并返回分组界限对应的索引    public static int partition(Comparable[] a, int lo, int hi) &#123;       //确定分界值        Comparable key = a[lo];        //定义两个指针，分别指向待切分元素的最小索引处和最大索引处的下一个位置        int left=lo;        int right=hi+1;        //切分        while(true)&#123;            //先从右往左扫描，移动right指针，找到一个比分界值小的元素，停止            while(less(key,a[--right]))&#123;                if (right==lo)&#123;                    break;                &#125;            &#125;            //再从左往右扫描，移动left指针，找到一个比分界值大的元素，停止            while(less(a[++left],key))&#123;                if (left==hi)&#123;                    break;                &#125;            &#125;            //判断 left&gt;=right,如果是，则证明元素扫描完毕，结束循环，如果不是，则交换元素即可            if (left&gt;=right)&#123;                break;            &#125;else&#123;                exch(a,left,right);            &#125;        &#125;        //交换分界值        exch(a,lo,right);       return right;    &#125;&#125;public class QuickTest &#123;    public static void main(String[] args) &#123;        Integer[] a= &#123;6, 1, 2, 7, 9, 3, 4, 5, 8&#125;;        Quick.sort(a);        System.out.println(Arrays.toString(a));//&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;    &#125;&#125;</code></pre><p>快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并从而将整个数组排序，而快速排序的方式则是当两个数组都有序时，整个数组自然就有序了。在归并排序中，一个数组被等分为两半，归并调用发生在处理整个数组之前，在快速排序中，切分数组的位置取决于数组的内容，递归调用发生在处理整个数组之后。</p><p>快速排序的时间复杂度为O(nlogn)。</p><hr><h3 id="8、排序的稳定性"><a href="#8、排序的稳定性" class="headerlink" title="8、排序的稳定性"></a>8、排序的稳定性</h3><hr><p>数组arr中有若干元素，其中A元素和B元素相等，并且A元素在B元素前面，如果使用某种排序算法排序后，能够保证A元素依然在B元素的前面，可以说这个该算法是稳定的。</p><p>如果一组数据只需要一次排序，则稳定性一般是没有意义的，如果一组数据需要多次排序，稳定性是有意义的。例如要排序的内容是一组商品对象，第一次排序按照价格由低到高排序，第二次排序按照销量由高到低排序，如果第二次排序使用稳定性算法，就可以使得相同销量的对象依旧保持着价格高低的顺序展现，只有销量不同的对象才需要重新排序。这样既可以保持第一次排序的原有意义，而且可以减少系统开销。</p><p>稳定排序算法：冒泡排序、插入排序、归并排序。</p><p>不稳定的排序算法：选择排序、希尔排序、快速排序。</p><hr><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><hr><p>若A元素在B元素的前面，则称A为B的前驱元素。若B元素在A元素的后面，则称B为A的后继元素。</p><p>第一个数据元素没有前驱，这个数据元素被称为头结点；最后一个数据元素没有后继，这个数据元素被称为尾结点；除了第一个和最后一个数据元素外，其他数据元素有且仅有一个前驱和一个后继。</p><p>线性表中数据存储的方式可以是顺序存储，也可以是链式存储，按照数据的存储方式不同，可以把线性表分为顺序表和链表。</p><hr><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><hr><p>顺序表是在计算机内存中以数组的形式保存的线性表，线性表的顺序存储是指用一组地址连续的存储单元，依次存储线性表中的各个元素、使得线性表中再逻辑结构上响铃的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系。</p><p>基本API、扩容、缩容、SequenceList能支持foreach循环，则需要做如下操作：让SequenceList实现Iterable接口，重写iterator方法；在SequenceList内部提供一个内部类SIterator,实现Iterator接口，重写hasNext方法和next方法。</p><pre><code>public class SequenceList&lt;T&gt; implements Iterable&lt;T&gt;&#123;    //存储元素的数组    private T[] eles;    //记录当前顺序表中的元素个数    private int N;    //构造方法    public SequenceList(int capacity)&#123;        //初始化数组        this.eles=(T[])new Object[capacity];        //初始化长度        this.N=0;    &#125;    //将一个线性表置为空表    public void clear()&#123;        this.N=0;    &#125;    //判断当前线性表是否为空表    public boolean isEmpty()&#123;       return N==0;    &#125;    //获取线性表的长度    public int length()&#123;        return N;    &#125;    //获取指定位置的元素    public T get(int i)&#123;        return eles[i];    &#125;    //向线型表中添加元素t    public void insert(T t)&#123;        if (N==eles.length)&#123;            resize(2*eles.length);        &#125;        eles[N++]=t;    &#125;    //在i元素处插入元素t    public void insert(int i,T t)&#123;        if (N==eles.length)&#123;            resize(2*eles.length);        &#125;        //先把i索引处的元素及其后面的元素依次向后移动一位        for(int index=N;index&gt;i;index--)&#123;            eles[index]=eles[index-1];        &#125;        //再把t元素放到i索引处即可        eles[i]=t;        //元素个数+1        N++;    &#125;    //删除指定位置i处的元素，并返回该元素    public T remove(int i)&#123;        //记录索引i处的值        T current = eles[i];        //索引i后面元素依次向前移动一位即可        for(int index=i;index&lt;N-1;index++)&#123;            eles[index]=eles[index+1];        &#125;        //元素个数-1        N--;        if (N&lt;eles.length/4)&#123;            resize(eles.length/2);        &#125;        return current;    &#125;    //查找t元素第一次出现的位置    public int indexOf(T t)&#123;        for(int i=0;i&lt;N;i++)&#123;            if (eles[i].equals(t))&#123;                return i;            &#125;        &#125;        return -1;    &#125;    //根据参数newSize，重置eles的大小    public void resize(int newSize)&#123;        //定义一个临时数组，指向原数组        T[] temp=eles;        //创建新数组        eles=(T[])new Object[newSize];        //把原数组的数据拷贝到新数组即可        for(int i=0;i&lt;N;i++)&#123;            eles[i]=temp[i];        &#125;    &#125;    @Override    public Iterator&lt;T&gt; iterator() &#123;        return new SIterator();    &#125;    private class SIterator implements Iterator&#123;        private int cusor;        public SIterator()&#123;            this.cusor=0;        &#125;        @Override        public boolean hasNext() &#123;            return cusor&lt;N;        &#125;        @Override        public Object next() &#123;            return eles[cusor++];        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class SequenceListTest &#123;    public static void main(String[] args) &#123;        //创建顺序表对象        SequenceList&lt;String&gt; sl = new SequenceList&lt;&gt;(10);        //测试插入        sl.insert(&quot;姚明&quot;);        sl.insert(&quot;科比&quot;);        sl.insert(&quot;麦迪&quot;);        sl.insert(1,&quot;詹姆斯&quot;);        for (String s : sl) &#123;            System.out.println(s);        &#125;        System.out.println(&quot;------------------------------------------&quot;);        //测试获取        String getResult = sl.get(1);        System.out.println(&quot;获取索引1处的结果为：&quot;+getResult);        //测试删除        String removeResult = sl.remove(0);        System.out.println(&quot;删除的元素是：&quot;+removeResult);        //测试清空        sl.clear();        System.out.println(&quot;清空后的线性表中的元素个数为:&quot;+sl.length());    &#125;&#125;</code></pre><p>由于顺序表的底层由数组实现，数组的长度是固定的，所以在操作的过程中涉及到了容器扩容操作。这样会导致顺序表在使用过程中的时间复杂度不是线性的，在某些需要扩容的结点处，耗时会突增，尤其是元素越多，这个问题越明显。</p><p><strong>java中ArrayList集合的底层也是一种顺序表，使用数组实现，同样提供了增删改查、扩容、遍历等功能。</strong></p><hr><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><hr><p>链表由一系列的结点（链表中的每一个元素称为结点）组成，结点可以在运行时动态生成。</p><pre><code>public class Node&lt;T&gt; &#123;    //存储元素    public T item;    //指向下一个结点    public Node next;    public Node(T item, Node next) &#123;        this.item = item;        this.next = next;    &#125;&#125;public static void main(String[] args) throws Exception &#123;    //构建结点    Node&lt;Integer&gt; first = new Node&lt;Integer&gt;(11, null);    Node&lt;Integer&gt; second = new Node&lt;Integer&gt;(13, null);    Node&lt;Integer&gt; third = new Node&lt;Integer&gt;(12, null);    Node&lt;Integer&gt; fourth = new Node&lt;Integer&gt;(8, null);    Node&lt;Integer&gt; fifth = new Node&lt;Integer&gt;(9, null);    //生成链表    first.next = second;    second.next = third;    third.next = fourth;    fourth.next = fifth;&#125;</code></pre><hr><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><hr><p>单向链表是链表的一种，它由多个结点组成，每个结点都由一个数据域和一个指针域组成，数据域用来存储数据，指针域用来指向其后继结点。链表的头结点的数据域不存储数据，指针域指向第一个真正存储数据的结点。</p><p>实现基本API、遍历、链表的反转。</p><pre><code>public class LinkList&lt;T&gt; implements Iterable&lt;T&gt;&#123;    //记录头结点    private Node head;    //记录链表的长度    private int N;    //结点类    private class Node &#123;        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next) &#123;            this.item = item;            this.next = next;        &#125;    &#125;    public LinkList() &#123;        //初始化头结点、        this.head = new Node(null,null);        //初始化元素个数        this.N=0;    &#125;    //清空链表    public void clear() &#123;        head.next=null;        this.N=0;    &#125;    //获取链表的长度    public int length() &#123;        return N;    &#125;    //判断链表是否为空    public boolean isEmpty() &#123;        return N==0;    &#125;    //获取指定位置i出的元素    public T get(int i) &#123;        //通过循环,从头结点开始往后找，依次找i次，就可以找到对应的元素        Node n = head.next;        for(int index=0;index&lt;i;index++)&#123;            n=n.next;        &#125;        return n.item;    &#125;    //向链表中添加元素t    public void insert(T t) &#123;        //找到当前最后一个结点        Node n = head;        while(n.next!=null)&#123;            n=n.next;        &#125;        //创建新结点，保存元素t        Node newNode = new Node(t, null);        //让当前最后一个结点指向新结点        n.next=newNode;        //元素的个数+1        N++;    &#125;    //向指定位置i出，添加元素t    public void insert(int i, T t) &#123;        //找到i位置前一个结点        Node pre = head;        for(int index=0;index&lt;=i-1;index++)&#123;            pre=pre.next;        &#125;        //找到i位置的结点        Node curr = pre.next;        //创建新结点，并且新结点需要指向原来i位置的结点        Node newNode = new Node(t, curr);        //原来i位置的前一个节点指向新结点即可        pre.next=newNode;        //元素的个数+1        N++;    &#125;    //删除指定位置i处的元素，并返回被删除的元素    public T remove(int i) &#123;        //找到i位置的前一个节点        Node pre = head;        for(int index=0;index&lt;=i-1;i++)&#123;            pre=pre.next;        &#125;        //要找到i位置的结点        Node curr = pre.next;        //找到i位置的下一个结点        Node nextNode = curr.next;        //前一个结点指向下一个结点        pre.next=nextNode;        //元素个数-1        N--;        return curr.item;    &#125;    //查找元素t在链表中第一次出现的位置    public int indexOf(T t) &#123;        //从头结点开始，依次找到每一个结点，取出item，和t比较，如果相同，就找到了        Node n = head;        for(int i=0;n.next!=null;i++)&#123;            n=n.next;            if (n.item.equals(t))&#123;                return i;            &#125;        &#125;        return -1;    &#125;    @Override    public Iterator&lt;T&gt; iterator() &#123;        return new LIterator();    &#125;    private class LIterator implements Iterator&#123;        private Node n;        public LIterator()&#123;            this.n=head;        &#125;        @Override        public boolean hasNext() &#123;            return n.next!=null;        &#125;        @Override        public Object next() &#123;            n = n.next;            return n.item;        &#125;    &#125;    //用来反转整个链表    public void reverse()&#123;        //判断当前链表是否为空链表，如果是空链表，则结束运行，如果不是，则调用重载的reverse方法完成反转        if (isEmpty())&#123;            return;        &#125;        reverse(head.next);    &#125;    //反转指定的结点curr，并把反转后的结点返回    public Node reverse(Node curr)&#123;        if (curr.next==null)&#123;            head.next=curr;            return curr;        &#125;        //递归的反转当前结点curr的下一个结点；返回值就是链表反转后，当前结点的上一个结点        Node pre = reverse(curr.next);        //让返回的结点的下一个结点变为当前结点curr；        pre.next=curr;        //把当前结点的下一个结点变为null        curr.next=null;        return curr;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class LinkListTest &#123;    public static void main(String[] args) &#123;        //创建顺序表对象        LinkList&lt;String&gt; sl = new LinkList&lt;&gt;();        //测试插入        sl.insert(&quot;姚明&quot;);        sl.insert(&quot;科比&quot;);        sl.insert(&quot;麦迪&quot;);        sl.insert(1,&quot;詹姆斯&quot;);        for (String s : sl) &#123;            System.out.println(s);        &#125;        System.out.println(&quot;------------------------------------------&quot;);        //测试获取        String getResult = sl.get(1);        System.out.println(&quot;获取索引1处的结果为：&quot;+getResult);        //测试删除        String removeResult = sl.remove(0);        System.out.println(&quot;删除的元素是：&quot;+removeResult);        //测试清空        sl.clear();        System.out.println(&quot;清空后的线性表中的元素个数为:&quot;+sl.length());    &#125;&#125;</code></pre><hr><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><hr><p>双向链表也叫双向表，是链表的一种，它由多个结点组成，每个结点都由一个数据域和两个指针域组成，数据域用来存储数据，其中一个指针域用来指向其后继结点，另一个指针域用来指向前驱结点。链表的头结点的数据域不存储数据，指向前驱结点的指针域值为null，指向后继结点的指针域指向第一个真正存储数据的结点。</p><p>实现基本API、遍历。</p><pre><code>public class TowWayLinkList&lt;T&gt; implements Iterable&lt;T&gt; &#123;    //首结点    private Node head;    //最后一个结点    private Node last;    //链表的长度    private int N;    //结点类    private class Node&#123;        public Node(T item, Node pre, Node next) &#123;            this.item = item;            this.pre = pre;            this.next = next;        &#125;        //存储数据        public T item;        //指向上一个结点        public Node pre;        //指向下一个结点        public Node next;    &#125;    public TowWayLinkList() &#123;       //初始化头结点和尾结点        this.head = new Node(null,null,null);        this.last=null;        //初始化元素个数        this.N=0;    &#125;    //清空链表    public void clear()&#123;        this.head.next=null;        this.head.pre=null;        this.head.item=null;        this.last=null;        this.N=0;    &#125;    //获取链表长度    public int length()&#123;        return N;    &#125;    //判断链表是否为空    public boolean isEmpty()&#123;        return N==0;    &#125;    //获取第一个元素    public T getFirst()&#123;        if (isEmpty())&#123;            return null;        &#125;        return head.next.item;    &#125;    //获取最后一个元素    public T getLast()&#123;        if (isEmpty())&#123;            return null;        &#125;        return last.item;    &#125;    //插入元素t    public void insert(T t)&#123;        if (isEmpty())&#123;            //如果链表为空：            //创建新的结点            Node newNode = new Node(t,head, null);            //让新结点称为尾结点            last=newNode;            //让头结点指向尾结点            head.next=last;        &#125;else &#123;            //如果链表不为空            Node oldLast = last;            //创建新的结点            Node newNode = new Node(t, oldLast, null);            //让当前的尾结点指向新结点            oldLast.next=newNode;            //让新结点称为尾结点            last = newNode;        &#125;        //元素个数+1        N++;    &#125;    //向指定位置i处插入元素t    public void insert(int i,T t)&#123;        //找到i位置的前一个结点        Node pre = head;        for(int index=0;index&lt;i;index++)&#123;            pre=pre.next;        &#125;        //找到i位置的结点        Node curr = pre.next;        //创建新结点        Node newNode = new Node(t, pre, curr);        //让i位置的前一个结点的下一个结点变为新结点        pre.next=newNode;        //让i位置的前一个结点变为新结点        curr.pre=newNode;        //元素个数+1        N++;    &#125;    //获取指定位置i处的元素    public T get(int i)&#123;        Node n = head.next;        for(int index=0;index&lt;i;index++)&#123;            n=n.next;        &#125;        return n.item;    &#125;    //找到元素t在链表中第一次出现的位置    public int indexOf(T t)&#123;        Node n = head;        for(int i=0;n.next!=null;i++)&#123;            n=n.next;            if (n.next.equals(t))&#123;                return i;            &#125;        &#125;        return -1;    &#125;    //删除位置i处的元素，并返回该元素    public T remove(int i)&#123;        //找到i位置的前一个结点        Node pre = head;        for(int index=0;index&lt;i;index++)&#123;            pre=pre.next;        &#125;        //找到i位置的结点        Node curr = pre.next;        //找到i位置的下一个结点        Node nextNode= curr.next;        //让i位置的前一个结点的下一个结点变为i位置的下一个结点        pre.next=nextNode;        //让i位置的下一个结点的上一个结点变为i位置的前一个结点        nextNode.pre=pre;        //元素的个数-1        N--;        return curr.item;    &#125;    @Override    public Iterator&lt;T&gt; iterator() &#123;        return new TIterator();    &#125;    private class TIterator implements Iterator&#123;        private Node n;        public TIterator()&#123;            this.n=head;        &#125;        @Override        public boolean hasNext() &#123;            return n.next!=null;        &#125;        @Override        public Object next() &#123;            n=n.next;            return n.item;        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class TowWayLinkListTest &#123;    public static void main(String[] args) &#123;        //创建双向链表对象        TowWayLinkList&lt;String&gt; sl = new TowWayLinkList&lt;&gt;();        //测试插入        sl.insert(&quot;姚明&quot;);        sl.insert(&quot;科比&quot;);        sl.insert(&quot;麦迪&quot;);        sl.insert(1,&quot;詹姆斯&quot;);        for (String s : sl) &#123;            System.out.println(s);        &#125;        System.out.println(&quot;--------------------------------------&quot;);        System.out.println(&quot;第一个元素是：&quot;+sl.getFirst());        System.out.println(&quot;最后一个元素是：&quot;+sl.getLast());        System.out.println(&quot;------------------------------------------&quot;);        //测试获取        String getResult = sl.get(1);        System.out.println(&quot;获取索引1处的结果为：&quot;+getResult);        //测试删除        String removeResult = sl.remove(0);        System.out.println(&quot;删除的元素是：&quot;+removeResult);        //测试清空        sl.clear();        System.out.println(&quot;清空后的线性表中的元素个数为:&quot;+sl.length());    &#125;&#125;</code></pre><p><strong>java中LinkedList集合也是使用双向链表实现，结点类有三个域，并提供了增删改查等相关方法。</strong></p><p>链表的物理地址是不连续的，它不需要预先指定存储空间大小，或者在存储过程中涉及到扩容等操作,同时它并没有涉及的元素的交换。</p><p>相比较顺序表，链表的查询操作性能会比较低。因此，如果我们的程序中查询操作比较多，建议使用顺序表，增删操作比较多，建议使用链表。</p><hr><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><hr><p>快慢指针获取中间值。slow与fast指针都指向链表第一个节点，然后slow每次移动一个指针，fast每次移动两个指针。</p><pre><code>public class FastSlowTest &#123;    public static void main(String[] args) throws Exception &#123;        //创建结点        Node&lt;String&gt; first = new Node&lt;String&gt;(&quot;aa&quot;, null);        Node&lt;String&gt; second = new Node&lt;String&gt;(&quot;bb&quot;, null);        Node&lt;String&gt; third = new Node&lt;String&gt;(&quot;cc&quot;, null);        Node&lt;String&gt; fourth = new Node&lt;String&gt;(&quot;dd&quot;, null);        Node&lt;String&gt; fifth = new Node&lt;String&gt;(&quot;ee&quot;, null);        Node&lt;String&gt; six = new Node&lt;String&gt;(&quot;ff&quot;, null);        Node&lt;String&gt; seven = new Node&lt;String&gt;(&quot;gg&quot;, null);        //完成结点之间的指向        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;        fifth.next = six;        six.next = seven;        //查找中间值        String mid = getMid(first);        System.out.println(&quot;中间值为：&quot;+mid);    &#125;    /**     * @param first 链表的首结点     * @return 链表的中间结点的值     */    public static String getMid(Node&lt;String&gt; first) &#123;        //定义两个指针        Node&lt;String&gt; fast = first;        Node&lt;String&gt; slow = first;        //使用两个指针遍历链表，当快指针指向的结点没有下一个结点了，就可以结束了，结束之后，慢指针指向的结点就是中间值        while(fast!=null &amp;&amp;fast.next!=null)&#123;            //变化fast的值和slow的值            fast = fast.next.next;            slow=slow.next;        &#125;        return slow.item;    &#125;    //结点类    private static class Node&lt;T&gt; &#123;        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next) &#123;            this.item = item;            this.next = next;        &#125;    &#125;&#125;</code></pre><p>快慢指针检查是否有环。两个指针有速度差，那么迟早两个指针会相遇，只要相遇那么就说明有环。</p><pre><code>public class CircleListCheckTest &#123;    public static void main(String[] args) throws Exception &#123;        //创建结点        Node&lt;String&gt; first = new Node&lt;String&gt;(&quot;aa&quot;, null);        Node&lt;String&gt; second = new Node&lt;String&gt;(&quot;bb&quot;, null);        Node&lt;String&gt; third = new Node&lt;String&gt;(&quot;cc&quot;, null);        Node&lt;String&gt; fourth = new Node&lt;String&gt;(&quot;dd&quot;, null);        Node&lt;String&gt; fifth = new Node&lt;String&gt;(&quot;ee&quot;, null);        Node&lt;String&gt; six = new Node&lt;String&gt;(&quot;ff&quot;, null);        Node&lt;String&gt; seven = new Node&lt;String&gt;(&quot;gg&quot;, null);        //完成结点之间的指向        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;        fifth.next = six;        six.next = seven;//        //产生环//        seven.next = third;        //判断链表是否有环        boolean circle = isCircle(first);        System.out.println(&quot;first链表中是否有环：&quot;+circle);    &#125;    /**     * 判断链表中是否有环     * @param first 链表首结点     * @return ture为有环，false为无环     */    public static boolean isCircle(Node&lt;String&gt; first) &#123;        //定义快慢指针        Node&lt;String&gt; fast = first;        Node&lt;String&gt; slow = first;        //遍历链表，如果快慢指针指向了同一个结点，那么证明有环        while(fast!=null &amp;&amp; fast.next!=null)&#123;            //变换fast和slow            fast = fast.next.next;            slow = slow.next;            if (fast.equals(slow))&#123;                return true;            &#125;        &#125;        return false;    &#125;    //结点类    private static class Node&lt;T&gt; &#123;        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next) &#123;            this.item = item;            this.next = next;        &#125;    &#125;&#125;</code></pre><p>快慢指针查找有环链表入口。当快慢指针相遇时，我们可以判断到链表中有环，这时重新设定一个新指针指向链表的起点，且步长与慢指针一样为1，则慢指针与“新”指针相遇的地方就是环的入口。</p><pre><code>public class CircleListInTest &#123;    public static void main(String[] args) throws Exception &#123;        Node&lt;String&gt; first = new Node&lt;String&gt;(&quot;aa&quot;, null);        Node&lt;String&gt; second = new Node&lt;String&gt;(&quot;bb&quot;, null);        Node&lt;String&gt; third = new Node&lt;String&gt;(&quot;cc&quot;, null);        Node&lt;String&gt; fourth = new Node&lt;String&gt;(&quot;dd&quot;, null);        Node&lt;String&gt; fifth = new Node&lt;String&gt;(&quot;ee&quot;, null);        Node&lt;String&gt; six = new Node&lt;String&gt;(&quot;ff&quot;, null);        Node&lt;String&gt; seven = new Node&lt;String&gt;(&quot;gg&quot;, null);        //完成结点之间的指向        first.next = second;        second.next = third;        third.next = fourth;        fourth.next = fifth;        fifth.next = six;        six.next = seven;        //产生环        seven.next = third;        //查找环的入口结点        Node&lt;String&gt; entrance = getEntrance(first);        System.out.println(&quot;first链表中环的入口结点元素为：&quot;+entrance.item);    &#125;    /**     * 查找有环链表中环的入口结点     * @param first 链表首结点     * @return 环的入口结点     */    public static Node getEntrance(Node&lt;String&gt; first) &#123;        //定义快慢指针        Node&lt;String&gt; fast = first;        Node&lt;String&gt; slow = first;        Node&lt;String&gt; temp = null;        //遍历链表，先找到环(快慢指针相遇),准备一个临时指针，指向链表的首结点，继续遍历，直到慢指针和临时指针相遇，那么相遇时所指向的结点就是环的入口        while(fast!=null &amp;&amp; fast.next!=null)&#123;            //变换快慢指针            fast = fast.next.next;            slow = slow.next;            //判断快慢指针是否相遇            if (fast.equals(slow))&#123;                temp = first;                continue;            &#125;            //让临时结点变换            if (temp!=null)&#123;                temp = temp.next;                //判断临时指针是否和慢指针相遇                if (temp.equals(slow))&#123;                    break;                &#125;            &#125;        &#125;        return temp;    &#125;    //结点类    private static class Node&lt;T&gt; &#123;        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next) &#123;            this.item = item;            this.next = next;        &#125;    &#125;&#125;</code></pre><hr><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><hr><p>在单向链表中，最后一个节点的指针为null，不指向任何结点，因为没有下一个元素了。要实现循环链表，我们只需要让单向链表的最后一个节点的指针指向头结点即可。</p><hr><h3 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h3><hr><p>构建含有41个结点的单向循环链表，分别存储1~41的值，分别代表这41个人；使用计数器count，记录当前报数的值；遍历链表，每循环一次，count++；判断count的值，如果是3，则从链表中删除这个结点并打印结点的值，把count重置为0。</p><pre><code>public class JosephTest &#123;    public static void main(String[] args) &#123;        //解决约瑟夫问题        //1.构建循环链表，包含41个结点，分别存储1~41之间的值        //用来就首结点        Node&lt;Integer&gt; first = null;        //用来记录前一个结点        Node&lt;Integer&gt; pre = null;        for(int i = 1;i&lt;=41;i++)&#123;            //如果是第一个结点            if (i==1)&#123;                first = new Node&lt;&gt;(i,null);                pre = first;                continue;            &#125;            //如果不是第一个结点            Node&lt;Integer&gt; newNode = new Node&lt;&gt;(i, null);            pre.next=newNode;            pre=newNode;            //如果是最后一个结点，那么需要让最后一个结点的下一个结点变为first,变为循环链表了            if (i==41)&#123;                pre.next=first;            &#125;        &#125;        //2.需要count计数器，模拟报数        int count=0;        //3.遍历循环链表        //记录每次遍历拿到的结点，默认从首结点开始        Node&lt;Integer&gt; n = first;        //记录当前结点的上一个结点        Node&lt;Integer&gt; before = null;        while(n!=n.next)&#123;            //模拟报数            count++;            //判断当前报数是不是为3            if (count==3)&#123;                //如果是3，则把当前结点删除调用，打印当前结点，重置count=0，让当前结点n后移                before.next=n.next;                System.out.print(n.item+&quot;,&quot;);                count=0;                n=n.next;            &#125;else&#123;                //如果不是3，让before变为当前结点，让当前结点后移；                before=n;                n=n.next;            &#125;        &#125;        //打印最后一个元素        System.out.println(n.item);    &#125;    //结点类    private static class Node&lt;T&gt; &#123;        //存储数据        T item;        //下一个结点        Node next;        public Node(T item, Node next) &#123;            this.item = item;            this.next = next;        &#125;    &#125;&#125;</code></pre><hr><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><hr><p>栈是一种基于先进后出(FILO)的数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。</p><p>我们称数据进入到栈的动作为压栈，数据从栈中出去的动作为弹栈。</p><hr><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><hr><p>压栈、弹栈、遍历。</p><pre><code>public class Stack&lt;T&gt; implements Iterable&lt;T&gt;&#123;    //记录首结点    private Node head;    //栈中元素的个数    private int N;    private class Node&#123;        public T item;        public Node next;        public Node(T item, Node next) &#123;            this.item = item;            this.next = next;        &#125;    &#125;    public Stack() &#123;        this.head = new Node(null,null);        this.N=0;    &#125;    //判断当前栈中元素个数是否为0    public boolean isEmpty()&#123;        return N==0;    &#125;    //获取栈中元素的个数    public int size()&#123;        return N;    &#125;    //把t元素压入栈    public void push(T t)&#123;        //找到首结点指向的第一个结点        Node oldFirst = head.next;        //创建新结点        Node newNode = new Node(t, null);        //让首结点指向新结点        head.next = newNode;        //让新结点指向原来的第一个结点        newNode.next=oldFirst;        //元素个数+1；        N++;    &#125;    //弹出栈顶元素    public T pop()&#123;        //找到首结点指向的第一个结点        Node oldFirst = head.next;        if (oldFirst==null)&#123;            return null;        &#125;        //让首结点指向原来第一个结点的下一个结点        head.next=oldFirst.next;        //元素个数-1；        N--;        return oldFirst.item;    &#125;    @Override    public Iterator&lt;T&gt; iterator() &#123;        return new SIterator();    &#125;    private class SIterator implements Iterator&#123;        private Node n;        public SIterator()&#123;            this.n=head;        &#125;        @Override        public boolean hasNext() &#123;            return n.next!=null;        &#125;        @Override        public Object next() &#123;            n = n.next;            return n.item;        &#125;    &#125;&#125;-</code></pre><p>测试</p><pre><code>public class StackTest &#123;    public static void main(String[] args) &#123;        //创建栈对象        Stack&lt;String&gt; stack = new Stack&lt;&gt;();        //测试压栈        stack.push(&quot;a&quot;);        stack.push(&quot;b&quot;);        stack.push(&quot;c&quot;);        stack.push(&quot;d&quot;);        for (String item : stack) &#123;            System.out.println(item);        &#125;        System.out.println(&quot;------------------------------&quot;);        //测试弹栈        String result = stack.pop();        System.out.println(&quot;弹出的元素是：&quot;+result);        System.out.println(&quot;剩余的元素个数：&quot;+stack.size());    &#125;&#125;</code></pre><hr><h3 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h3><hr><p>给定一个字符串，里边可能包含”()”小括号和其他字符，请编写程序检查该字符串的中的小括号是否成对出现。</p><p>创建一个栈用来存储左括号；从左往右遍历字符串，拿到每一个字符；判断该字符是不是左括号，如果是，放入栈中存储；判断该字符是不是右括号，如果不是，继续下一次循环；如果该字符是右括号，则从栈中弹出一个元素t；判断元素t是否为null，如果不是，则证明有对应的左括号，如果不是，则证明没有对应的左括号；循环结束后，判断栈中还有没有剩余的左括号，如果有，则不匹配，如果没有，则匹配。</p><pre><code>public class BracketsMatchTest &#123;    public static void main(String[] args) &#123;        String str = &quot;上海(长安)())&quot;;        boolean match = isMatch(str);        System.out.println(str+&quot;中的括号是否匹配：&quot;+match);    &#125;    /**     * 判断str中的括号是否匹配     * @param str 括号组成的字符串     * @return 如果匹配，返回true，如果不匹配，返回false     */    public static boolean isMatch(String str)&#123;        //1.创建栈对象，用来存储左括号        Stack&lt;String&gt; chars = new Stack&lt;&gt;();        //2.从左往右遍历字符串        for (int i = 0; i &lt; str.length(); i++) &#123;            String currChar = str.charAt(i)+ &quot;&quot;;            //3.判断当前字符是否为左括号，如果是，则把字符放入到栈中            if (currChar.equals(&quot;(&quot;))&#123;                chars.push(currChar);            &#125;else if(currChar.equals(&quot;)&quot;))&#123;                //4.继续判断当前字符是否是有括号，如果是，则从栈中弹出一个左括号，并判断弹出的结果是否为null,如果为null证明没有匹配的左括号，如果不为null，则证明有匹配的左括号                String pop = chars.pop();                if (pop==null)&#123;                    return false;                &#125;            &#125;        &#125;        //5.判断栈中还有没有剩余的左括号，如果有，则证明括号不匹配        if (chars.size()==0)&#123;            return true;        &#125;else&#123;            return false;        &#125;    &#125;&#125;</code></pre><hr><h3 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h3><hr><p>创建一个栈对象oprands存储操作数；从左往右遍历逆波兰表达式，得到每一个字符串；判断该字符串是不是运算符，如果不是，把该该操作数压入oprands栈中；如果是运算符，则从oprands栈中弹出两个操作数o1,o2；使用该运算符计算o1和o2，得到结果result；把该结果压入oprands栈中 ；遍历结束后，拿出栈中最终的结果返回。</p><pre><code>public class ReversePolishNotationTest &#123;    public static void main(String[] args) &#123;        //中缀表达式 3*（17-15）+18/6 的逆波兰表达式如下 6+3=9        String[] notation = &#123;&quot;3&quot;, &quot;17&quot;, &quot;15&quot;, &quot;-&quot;, &quot;*&quot;, &quot;18&quot;, &quot;6&quot;, &quot;/&quot;, &quot;+&quot;&#125;;        int result = caculate(notation);        System.out.println(&quot;逆波兰表达式的结果为：&quot; + result);    &#125;    /**     * @param notaion 逆波兰表达式的数组表示方式     * @return 逆波兰表达式的计算结果     */    public static int caculate(String[] notaion) &#123;        //1.定义一个栈，用来存储操作数        Stack&lt;Integer&gt; oprands = new Stack&lt;&gt;();        //2.从左往右遍历逆波兰表达式，得到每一个元素        for (int i = 0; i &lt; notaion.length; i++) &#123;            String curr = notaion[i];            //3.判断当前元素是运算符还是操作数            Integer o1;            Integer o2;            Integer result;            switch (curr) &#123;                case &quot;+&quot;:                    //4.运算符，从栈中弹出两个操作数，完成运算，运算完的结果再压入栈中                    o1 = oprands.pop();                    o2 = oprands.pop();                    result = o2 + o1;                    oprands.push(result);                    break;                case &quot;-&quot;:                    //4.运算符，从栈中弹出两个操作数，完成运算，运算完的结果再压入栈中                    o1 = oprands.pop();                    o2 = oprands.pop();                    result = o2 - o1;                    oprands.push(result);                    break;                case &quot;*&quot;:                    //4.运算符，从栈中弹出两个操作数，完成运算，运算完的结果再压入栈中                    o1 = oprands.pop();                    o2 = oprands.pop();                    result = o2 * o1;                    oprands.push(result);                    break;                case &quot;/&quot;:                    //4.运算符，从栈中弹出两个操作数，完成运算，运算完的结果再压入栈中                    o1 = oprands.pop();                    o2 = oprands.pop();                    result = o2 / o1;                    oprands.push(result);                    break;                default:                    //5.操作数，把该操作数放入到栈中；                    oprands.push(Integer.parseInt(curr));                    break;            &#125;        &#125;        //6.得到栈中最后一个元素，就是逆波兰表达式的结果        int result = oprands.pop();        return result;    &#125;&#125;</code></pre><hr><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><hr><p>队列是一种基于先进先出(FIFO)的数据结构，是一种只能在一端进行插入,在另一端进行删除操作的特殊线性表，它按照先进先出的原则存储数据，先进入的数据，在读取数据时先读被读出来。</p><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><hr><p>插入、删除、遍历。</p><pre><code>public class Queue&lt;T&gt; implements Iterable&lt;T&gt;&#123;    //记录首结点    private Node head;    //记录最后一个结点    private Node last;    //记录队列中元素的个数    private int N;    private class Node&#123;        public T item;        public Node next;        public Node(T item, Node next) &#123;            this.item = item;            this.next = next;        &#125;    &#125;    public Queue() &#123;        this.head = new Node(null,null);        this.last=null;        this.N=0;    &#125;    //判断队列是否为空    public boolean isEmpty()&#123;        return N==0;    &#125;    //返回队列中元素的个数    public int size()&#123;        return N;    &#125;    //向队列中插入元素t    public void enqueue(T t)&#123;        if (last==null)&#123;            //当前尾结点last为null            last= new Node(t,null);            head.next=last;        &#125; else &#123;            //当前尾结点last不为null            Node oldLast = last;            last = new Node(t, null);            oldLast.next=last;        &#125;        //元素个数+1        N++;    &#125;    //从队列中拿出一个元素    public T dequeue()&#123;        if (isEmpty())&#123;            return null;        &#125;        Node oldFirst = head.next;        head.next = oldFirst.next;        N--;        //因为出队列其实是在删除元素，因此如果队列中的元素被删除完了，需要重置last=null;        if (isEmpty())&#123;            last=null;        &#125;        return oldFirst.item;    &#125;    @Override    public Iterator&lt;T&gt; iterator() &#123;        return new QIterator();    &#125;    private class QIterator implements Iterator&#123;        private Node n;        public QIterator()&#123;            this.n=head;        &#125;        @Override        public boolean hasNext() &#123;            return n.next!=null;        &#125;        @Override        public Object next() &#123;            n = n.next;            return n.item;        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class QueueTest &#123;    public static void main(String[] args) &#123;        //创建队列对象        Queue&lt;String&gt; q = new Queue&lt;&gt;();        //测试队列的enqueue方法        q.enqueue(&quot;a&quot;);        q.enqueue(&quot;b&quot;);        q.enqueue(&quot;c&quot;);        q.enqueue(&quot;d&quot;);        for (String str : q) &#123;            System.out.println(str);        &#125;        System.out.println(&quot;-------------------------------&quot;);        //测试队列的dequeue方法        String result = q.dequeue();        System.out.println(&quot;出队列的元素是：&quot;+result);        System.out.println(&quot;剩余的元素个数：&quot;+q.size());    &#125;&#125;</code></pre><hr><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><hr><p>符号表最主要的目的就是将一个键和一个值联系起来，符号表能够将存储的数据元素是一个键和一个值共同组成的键值对数据，我们可以根据键来查找对应的值。<strong>符号表中，键具有唯一性</strong>。</p><hr><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><hr><pre><code>public class SymbolTable&lt;Key,Value&gt; &#123;    //记录首结点    private Node head;    //记录符号表中元素的个数    private int N;    private class Node&#123;        //键        public Key key;        //值        public Value value;        //下一个结点        public Node next;        public Node(Key key, Value value, Node next) &#123;            this.key = key;            this.value = value;            this.next = next;        &#125;    &#125;    public SymbolTable() &#123;        this.head = new Node(null,null,null);        this.N=0;    &#125;    //获取符号表中键值对的个数    public int size()&#123;        return N;    &#125;    //往符号表中插入键值对    public void put(Key key,Value value)&#123;        //符号表中已经存在了键为key的键值对，那么只需要找到该结点，替换值为value即可        Node n = head;        while(n.next!=null)&#123;            //变换n            n = n.next;            //判断n结点存储的键是否为key，如果是，则替换n结点的值            if (n.key.equals(key))&#123;                n.value = value;                return;            &#125;        &#125;        //如果符号表中不存在键为key的键值对，只需要创建新的结点，保存要插入的键值对，把新结点插入到链表的头部  head.next=新结点即可        Node newNode = new Node(key, value, null);        Node oldFirst = head.next;        newNode.next = oldFirst;        head.next = newNode;        //元素个数+1；        N++;    &#125;    //删除符号表中键为key的键值对    public void delete(Key key)&#123;        //找到键为key的结点，把该结点从链表中删除        Node n = head;        while(n.next!=null)&#123;            //判断n结点的下一个结点的键是否为key，如果是，就删除该结点            if (n.next.key.equals(key))&#123;                n.next = n.next.next;                N--;                return;            &#125;            //变换n            n = n.next;        &#125;    &#125;    //从符号表中获取key对应的值    public Value get(Key key)&#123;        //找到键为key的结点        Node n = head;        while(n.next!=null)&#123;            //变换n            n = n.next;            if (n.key.equals(key))&#123;                return n.value;            &#125;        &#125;        return null;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class SymbolTableTest &#123;    public static void main(String[] args) &#123;        //创建符号表对象        SymbolTable&lt;Integer, String&gt; symbolTable = new SymbolTable&lt;&gt;();        //测试put方法（插入,替换）        symbolTable.put(1,&quot;乔峰&quot;);        symbolTable.put(2,&quot;虚竹&quot;);        symbolTable.put(3,&quot;段誉&quot;);        System.out.println(&quot;插入完毕后，元素的个数为:&quot;+symbolTable.size());        symbolTable.put(2, &quot;慕容复&quot;);        System.out.println(&quot;替换完毕后的元素的个数为:&quot;+symbolTable.size());        //测试get方法        System.out.println(&quot;替换完毕后，键2对应的值为:&quot;+symbolTable.get(2));        //测试删除方法        symbolTable.delete(2);        System.out.println(&quot;删除完毕后，元素的个数:&quot;+symbolTable.size());    &#125;&#125;</code></pre><hr><h3 id="有序符号表"><a href="#有序符号表" class="headerlink" title="有序符号表"></a>有序符号表</h3><hr><p>要根据键的大小进行排序，插入数据时要考虑顺序。</p><pre><code>public class OrderSymbolTable&lt;Key extends Comparable&lt;Key&gt;,Value&gt; &#123;    //记录首结点    private Node head;    //记录符号表中元素的个数    private int N;    private class Node&#123;        //键        public Key key;        //值        public Value value;        //下一个结点        public Node next;        public Node(Key key, Value value, Node next) &#123;            this.key = key;            this.value = value;            this.next = next;        &#125;    &#125;    public OrderSymbolTable() &#123;        this.head = new Node(null,null,null);        this.N=0;    &#125;    //获取符号表中键值对的个数    public int size()&#123;        return N;    &#125;    //往符号表中插入键值对    public void put(Key key,Value value)&#123;        //定义两个Node变量，分别记录当前结点和当前结点的上一个结点        Node curr = head.next;        Node pre = head;        while(curr!=null &amp;&amp; key.compareTo(curr.key)&gt;0)&#123;            //变换当前结点和前一个结点即可            pre = curr;            curr = curr.next;        &#125;        //如果当前结点curr的键和要插入的key一样，则替换        if (curr!=null &amp;&amp; key.compareTo(curr.key)==0)&#123;            curr.value = value;            return;        &#125;        //如果当前结点curr的键和要插入的key不一样，把新的结点插入到curr之前        Node newNode = new Node(key, value, curr);        pre.next = newNode;        //元素的个数+1；        N++;    &#125;    //删除符号表中键为key的键值对    public void delete(Key key)&#123;        //找到键为key的结点，把该结点从链表中删除        Node n = head;        while(n.next!=null)&#123;            //判断n结点的下一个结点的键是否为key，如果是，就删除该结点            if (n.next.key.equals(key))&#123;                n.next = n.next.next;                N--;                return;            &#125;            //变换n            n = n.next;        &#125;    &#125;    //从符号表中获取key对应的值    public Value get(Key key)&#123;        //找到键为key的结点        Node n = head;        while(n.next!=null)&#123;            //变换n            n = n.next;            if (n.key.equals(key))&#123;                return n.value;            &#125;        &#125;        return null;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class OrderSymbolTableTest &#123;    public static void main(String[] args) &#123;        //创建有序符号表对象        OrderSymbolTable&lt;Integer, String&gt; table = new OrderSymbolTable&lt;&gt;();        table.put(1,&quot;张三&quot;);        table.put(2,&quot;李四&quot;);        table.put(4,&quot;赵六&quot;);        table.put(7,&quot;田七&quot;);        table.put(3,&quot;王五&quot;);    &#125;&#125;</code></pre><hr><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><hr><p>树是由n（n&gt;=1）个有限结点组成一个具有层次关系的集合。树具有以下特点：每个结点有零个或多个子结点；没有父结点的结点为根结点；每一个非根结点只有一个父结点；每个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父结点的一个子树。</p><p>结点的度：一个结点含有的子树的个数称为该结点的度。</p><p>叶结点：度为0的结点称为叶结点，也可以叫做终端结点。</p><p>分支结点：度不为0的结点称为分支结点，也可以叫做非终端结点。</p><p>结点的层次：从根结点开始，根结点的层次为1，根的直接后继层次为2，以此类推。</p><p>结点的层序编号：将树中的结点，按照从上层到下层，同层从左到右的次序排成一个线性序列，把他们编成连续的自然数。</p><p>树的度：树中所有结点的度的最大值。</p><p>树的高度(深度)：树中结点的最大层次。</p><p>森林：m（m&gt;=0）个互不相交的树的集合，将一颗非空树的根结点删去，树就变成一个森林；给森林增加一个统一的根结点，森林就变成一棵树。</p><p>孩子结点：一个结点的直接后继结点称为该结点的孩子结点。</p><p>双亲结点(父结点)：一个结点的直接前驱称为该结点的双亲结点。</p><p>兄弟结点：同一双亲结点的孩子结点间互称兄弟结点。</p><p><strong>二叉树</strong>就是度不超过2的树(每个结点最多有两个子结点)。</p><p>一个二叉树，如果每一个层的结点树都达到最大值，则这个二叉树就是<strong>满二叉树</strong>。</p><p><strong>完全二叉树</strong>：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</p><hr><h3 id="二叉查找树基于链表的实现"><a href="#二叉查找树基于链表的实现" class="headerlink" title="二叉查找树基于链表的实现"></a>二叉查找树基于链表的实现</h3><hr><p><strong>插入</strong>方法put实现思想：如果当前树中没有任何一个结点，则直接把新结点当做根结点使用。如果当前树不为空，则从根结点开始：如果新结点的key小于当前结点的key，则继续找当前结点的左子结点；如果新结点的key大于当前结点的key，则继续找当前结点的右子结点；如果新结点的key等于当前结点的key，则树中已经存在这样的结点，替换该结点的value值即可。</p><p><strong>查询</strong>方法get实现思想：从根节点开始：如果要查询的key小于当前结点的key，则继续找当前结点的左子结点；如果要查询的key大于当前结点的key，则继续找当前结点的右子结点；如果要查询的key等于当前结点的key，则树中返回当前结点的value。</p><p><strong>删除</strong>方法delete实现思想：找到被删除结点；找到被删除结点右子树中的最小结点minNode；删除右子树中的最小结点；让被删除结点的左子树称为最小结点minNode的左子树，让被删除结点的右子树称为最小结点minNode的右子树；让被删除结点的父节点指向最小结点minNode。</p><p>查找<strong>最小键</strong>、查找<strong>最大键</strong>。</p><p>把树由一个根节点、一个左子树、一个右子树组成，那么按照根节点什么时候被访问，我们可以把二叉树的遍历分为以下三种方式：</p><p><strong>前序遍历</strong>：先访问根结点，然后再访问左子树，最后访问右子树。<strong>中序遍历</strong>：先访问左子树，中间访问根节点，最后访问右子树。<strong>后序遍历</strong>：先访问左子树，再访问右子树，最后访问根节点。</p><p>前序遍历步骤：把当前结点的key放入到队列中;找到当前结点的左子树，如果不为空，递归遍历左子树；找到当前结点的右子树，如果不为空，递归遍历右子树。</p><p>中序遍历实现步骤：找到当前结点的左子树，如果不为空，递归遍历左子树；把当前结点的key放入到队列中;找到当前结点的右子树，如果不为空，递归遍历右子树。</p><p>后序遍历实现步骤：找到当前结点的左子树，如果不为空，递归遍历左子树；找到当前结点的右子树，如果不为空，递归遍历右子树；把当前结点的key放入到队列中。</p><p><strong>层序遍历</strong>，就是从根节点（第一层）开始，依次向下，获取每一层所有结点的值。实现步骤：创建队列，存储每一层的结点；使用循环从队列中弹出一个结点：获取当前结点的key；如果当前结点的左子结点不为空，则把左子结点放入到队列中；如果当前结点的右子结点不为空，则把右子结点放入到队列中。</p><p><strong>最大深度</strong>：如果根结点为空，则最大深度为0；计算左子树的最大深度；计算右子树的最大深度；当前树的最大深度=左子树的最大深度和右子树的最大深度中的较大者+1。</p><pre><code>public class BinaryTree&lt;Key extends Comparable&lt;Key&gt;, Value&gt; &#123;    //记录根结点    private Node root;    //记录树中元素的个数    private int N;    private class Node &#123;        //存储键        public Key key;        //存储值        private Value value;        //记录左子结点        public Node left;        //记录右子结点        public Node right;        public Node(Key key, Value value, Node left, Node right) &#123;            this.key = key;            this.value = value;            this.left = left;            this.right = right;        &#125;    &#125;    //获取树中元素的个数    public int size() &#123;        return N;    &#125;    //向树中添加元素key-value    public void put(Key key, Value value) &#123;        root = put(root, key, value);    &#125;    //向指定的树x中添加key-value,并返回添加元素后新的树    private Node put(Node x, Key key, Value value) &#123;        //如果x子树为空，        if (x==null)&#123;            N++;            return new Node(key,value, null,null);        &#125;        //如果x子树不为空        //比较x结点的键和key的大小：        int cmp = key.compareTo(x.key);        if (cmp&gt;0)&#123;            //如果key大于x结点的键，则继续找x结点的右子树            x.right = put(x.right,key,value);        &#125;else if(cmp&lt;0)&#123;            //如果key小于x结点的键，则继续找x结点的左子树            x.left = put(x.left,key,value);        &#125;else&#123;            //如果key等于x结点的键，则替换x结点的值为value即可            x.value = value;        &#125;        return x;    &#125;    //查询树中指定key对应的value    public Value get(Key key) &#123;        return get(root,key);    &#125;    //从指定的树x中，查找key对应的值    public Value get(Node x, Key key) &#123;        //x树为null        if (x==null)&#123;            return null;        &#125;        //x树不为null        //比较key和x结点的键的大小        int cmp = key.compareTo(x.key);        if (cmp&gt;0)&#123;            //如果key大于x结点的键，则继续找x结点的右子树            return get(x.right,key);        &#125;else if(cmp&lt;0)&#123;            //如果key小于x结点的键，则继续找x结点的左子树            return get(x.left,key);        &#125;else&#123;            //如果key等于x结点的键，就找到了键为key的结点，只需要返回x结点的值即可            return x.value;        &#125;    &#125;    //删除树中key对应的value    public void delete(Key key) &#123;        delete(root, key);    &#125;    //删除指定树x中的key对应的value，并返回删除后的新树    public Node delete(Node x, Key key) &#123;        //x树为null        if (x==null)&#123;            return null;        &#125;        //x树不为null        int cmp = key.compareTo(x.key);        if (cmp&gt;0)&#123;            //如果key大于x结点的键，则继续找x结点的右子树            x.right = delete(x.right,key);        &#125;else if(cmp&lt;0)&#123;            //如果key小于x结点的键，则继续找x结点的左子树            x.left = delete(x.left,key);        &#125;else&#123;            //如果key等于x结点的键，完成真正的删除结点动作，要删除的结点就是x；            //让元素个数-1            N--;            //得找到右子树中最小的结点            if (x.right==null)&#123;                return x.left;            &#125;            if (x.left==null)&#123;                return x.right;            &#125;            Node minNode = x.right;            while(minNode.left!=null)&#123;                minNode = minNode.left;            &#125;            //删除右子树中最小的结点            Node n = x.right;            while(n.left!=null)&#123;                if (n.left.left==null)&#123;                    n.left=null;                &#125;else&#123;                    //变换n结点即可                    n = n.left;                &#125;            &#125;            //让x结点的左子树成为minNode的左子树            minNode.left = x.left;            //让x结点的右子树成为minNode的右子树            minNode.right = x.right;            //让x结点的父结点指向minNode            x = minNode;        &#125;        return x;    &#125;    //查找整个树中最小的键    public Key min()&#123;        return min(root).key;    &#125;    //在指定树x中找出最小键所在的结点    private Node min(Node x)&#123;        //需要判断x还有没有左子结点，如果有，则继续向左找，如果没有，则x就是最小键所在的结点        if (x.left!=null)&#123;            return min(x.left);        &#125;else&#123;            return x;        &#125;    &#125;    //在整个树中找到最大的键    public Key max()&#123;        return max(root).key;    &#125;    //在指定的树x中，找到最大的键所在的结点    public Node max(Node x)&#123;        //判断x还有没有右子结点，如果有，则继续向右查找，如果没有，则x就是最大键所在的结点        if (x.right!=null)&#123;            return max(x.right);        &#125;else&#123;            return x;        &#125;    &#125;    //获取整个树中所有的键    public Queue&lt;Key&gt; preErgodic()&#123;        Queue&lt;Key&gt; keys = new Queue&lt;&gt;();        preErgodic(root, keys);        return keys;    &#125;    //获取指定树x的所有键，并放到keys队列中    private void preErgodic(Node x,Queue&lt;Key&gt; keys)&#123;        if (x==null)&#123;            return;        &#125;        //把x结点的key放入到keys中        keys.enqueue(x.key);        //递归遍历x结点的左子树        if (x.left!=null)&#123;            preErgodic(x.left,keys);        &#125;        //递归遍历x结点的右子树        if (x.right!=null)&#123;            preErgodic(x.right,keys);        &#125;    &#125;    //使用中序遍历获取树中所有的键    public Queue&lt;Key&gt; midErgodic()&#123;        Queue&lt;Key&gt; keys = new Queue&lt;&gt;();        midErgodic(root,keys);        return keys;    &#125;    //使用中序遍历，获取指定树x中所有的键，并存放到key中    private void midErgodic(Node x,Queue&lt;Key&gt; keys)&#123;        if (x==null)&#123;            return;        &#125;        //先递归，把左子树中的键放到keys中        if (x.left!=null)&#123;            midErgodic(x.left,keys);        &#125;        //把当前结点x的键放到keys中        keys.enqueue(x.key);        //在递归，把右子树中的键放到keys中        if(x.right!=null)&#123;            midErgodic(x.right,keys);        &#125;    &#125;    //使用后序遍历，把整个树中所有的键返回    public Queue&lt;Key&gt; afterErgodic()&#123;        Queue&lt;Key&gt; keys = new Queue&lt;&gt;();        afterErgodic(root,keys);        return keys;    &#125;    //使用后序遍历，把指定树x中所有的键放入到keys中    private void afterErgodic(Node x,Queue&lt;Key&gt; keys)&#123;        if (x==null)&#123;            return ;        &#125;        //通过递归把左子树中所有的键放入到keys中        if (x.left!=null)&#123;            afterErgodic(x.left,keys);        &#125;        //通过递归把右子树中所有的键放入到keys中        if (x.right!=null)&#123;            afterErgodic(x.right,keys);        &#125;        //把x结点的键放入到keys中        keys.enqueue(x.key);    &#125;    //使用层序遍历，获取整个树中所有的键    public Queue&lt;Key&gt; layerErgodic()&#123;        //定义两个队列，分别存储树中的键和树中的结点        Queue&lt;Key&gt; keys = new Queue&lt;&gt;();        Queue&lt;Node&gt; nodes = new Queue&lt;&gt;();        //默认，往队列中放入根结点        nodes.enqueue(root);        while(!nodes.isEmpty())&#123;            //从队列中弹出一个结点，把key放入到keys中            Node n = nodes.dequeue();            keys.enqueue(n.key);            //判断当前结点还有没有左子结点，如果有，则放入到nodes中            if (n.left!=null)&#123;                nodes.enqueue(n.left);            &#125;            //判断当前结点还有没有右子结点，如果有，则放入到nodes中            if (n.right!=null)&#123;                nodes.enqueue(n.right);            &#125;        &#125;        return keys;    &#125;    //获取整个树的最大深度    public int maxDepth()&#123;        return maxDepth(root);    &#125;    //获取指定树x的最大深度    private int maxDepth(Node x)&#123;        if (x==null)&#123;            return 0;        &#125;        //x的最大深度        int max=0;        //左子树的最大深度        int maxL=0;        //右子树的最大深度        int maxR=0;        //计算x结点左子树的最大深度        if (x.left!=null)&#123;            maxL = maxDepth(x.left);        &#125;        //计算x结点右子树的最大深度        if (x.right!=null)&#123;            maxR = maxDepth(x.right);        &#125;        //比较左子树最大深度和右子树最大深度，取较大值+1即可        max = maxL&gt;maxR?maxL+1:maxR+1;        return max;    &#125;&#125;</code></pre><p>代码测试</p><pre><code>public class BinaryTreeTest &#123;    public static void main(String[] args) &#123;        //创建二叉查找树对象        BinaryTree&lt;Integer, String&gt; tree = new BinaryTree&lt;&gt;();        //测试插入        tree.put(1,&quot;张三&quot;);        tree.put(2,&quot;李四&quot;);        tree.put(3,&quot;王五&quot;);        System.out.println(&quot;插入完毕后元素的个数：&quot;+tree.size());        //测试获取        System.out.println(&quot;键2对应的元素是：&quot;+tree.get(2));        //测试删除        tree.delete(3);        System.out.println(&quot;删除后的元素个数：&quot;+tree.size());        System.out.println(&quot;删除后键3对应的元素:&quot;+tree.get(3));    &#125;&#125;</code></pre><p>遍历测试</p><pre><code>public class BinaryTreeErgodicTest &#123;    /*//测试前序遍历    public static void main(String[] args) &#123;        //创建树对象        BinaryTree&lt;String, String&gt; tree = new BinaryTree&lt;&gt;();        //往树中添加数据        tree.put(&quot;E&quot;, &quot;5&quot;);        tree.put(&quot;B&quot;, &quot;2&quot;);        tree.put(&quot;G&quot;, &quot;7&quot;);        tree.put(&quot;A&quot;, &quot;1&quot;);        tree.put(&quot;D&quot;, &quot;4&quot;);        tree.put(&quot;F&quot;, &quot;6&quot;);        tree.put(&quot;H&quot;, &quot;8&quot;);        tree.put(&quot;C&quot;, &quot;3&quot;);        //遍历        Queue&lt;String&gt; keys = tree.preErgodic();        for (String key : keys) &#123;            String value = tree.get(key);            System.out.println(key+&quot;----&quot;+value);        &#125;    &#125;*/    //测试中序遍历   /* public static void main(String[] args) &#123;        //创建树对象        BinaryTree&lt;String, String&gt; tree = new BinaryTree&lt;&gt;();        //往树中添加数据        tree.put(&quot;E&quot;, &quot;5&quot;);        tree.put(&quot;B&quot;, &quot;2&quot;);        tree.put(&quot;G&quot;, &quot;7&quot;);        tree.put(&quot;A&quot;, &quot;1&quot;);        tree.put(&quot;D&quot;, &quot;4&quot;);        tree.put(&quot;F&quot;, &quot;6&quot;);        tree.put(&quot;H&quot;, &quot;8&quot;);        tree.put(&quot;C&quot;, &quot;3&quot;);        //遍历        Queue&lt;String&gt; keys = tree.midErgodic();        for (String key : keys) &#123;            String value = tree.get(key);            System.out.println(key+&quot;----&quot;+value);        &#125;    &#125;*/    //测试后序遍历    /*public static void main(String[] args) &#123;        //创建树对象        BinaryTree&lt;String, String&gt; tree = new BinaryTree&lt;&gt;();        //往树中添加数据        tree.put(&quot;E&quot;, &quot;5&quot;);        tree.put(&quot;B&quot;, &quot;2&quot;);        tree.put(&quot;G&quot;, &quot;7&quot;);        tree.put(&quot;A&quot;, &quot;1&quot;);        tree.put(&quot;D&quot;, &quot;4&quot;);        tree.put(&quot;F&quot;, &quot;6&quot;);        tree.put(&quot;H&quot;, &quot;8&quot;);        tree.put(&quot;C&quot;, &quot;3&quot;);        //遍历        Queue&lt;String&gt; keys = tree.afterErgodic();        for (String key : keys) &#123;            String value = tree.get(key);            System.out.println(key+&quot;----&quot;+value);        &#125;    &#125;*/    //测试层序遍历    public static void main(String[] args) &#123;        //创建树对象        BinaryTree&lt;String, String&gt; tree = new BinaryTree&lt;&gt;();        //往树中添加数据        tree.put(&quot;E&quot;, &quot;5&quot;);        tree.put(&quot;B&quot;, &quot;2&quot;);        tree.put(&quot;G&quot;, &quot;7&quot;);        tree.put(&quot;A&quot;, &quot;1&quot;);        tree.put(&quot;D&quot;, &quot;4&quot;);        tree.put(&quot;F&quot;, &quot;6&quot;);        tree.put(&quot;H&quot;, &quot;8&quot;);        tree.put(&quot;C&quot;, &quot;3&quot;);        //遍历        Queue&lt;String&gt; keys = tree.layerErgodic();        for (String key : keys) &#123;            String value = tree.get(key);            System.out.println(key+&quot;----&quot;+value);        &#125;    &#125;&#125;</code></pre><p>最大深度测试</p><pre><code>public class BinaryTreeMaxDepthTest &#123;    public static void main(String[] args) &#123;        //创建树对象        BinaryTree&lt;String, String&gt; tree = new BinaryTree&lt;&gt;();        //往树中添加数据        tree.put(&quot;E&quot;, &quot;5&quot;);        tree.put(&quot;B&quot;, &quot;2&quot;);        tree.put(&quot;G&quot;, &quot;7&quot;);        tree.put(&quot;A&quot;, &quot;1&quot;);        tree.put(&quot;D&quot;, &quot;4&quot;);        tree.put(&quot;F&quot;, &quot;6&quot;);        tree.put(&quot;H&quot;, &quot;8&quot;);        tree.put(&quot;C&quot;, &quot;3&quot;);        int maxDepth = tree.maxDepth();        System.out.println(maxDepth);    &#125;&#125;</code></pre><hr><h3 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a>折纸问题</h3><hr><p>纸条对折1次，压出折痕后展开。此时 折痕是凹下去的，即折痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2次，压出折痕后展开，此时有三条折痕，从上到下依次是下折痕、下折痕和上折痕。连续对折N次，请从上到下打印所有折痕的方向 例如：N=1时，打印： down；N=2时，打印： down down up。</p><p>根结点为下折痕；每一个结点的左子结点为下折痕；每一个结点的右子结点为上折痕。</p><pre><code>public class PagerFoldingTest &#123;    public static void main(String[] args) &#123;        //模拟这只过程，产生树        Node&lt;String&gt; tree = createTree(2);        //遍历树，打印每个结点        printTree(tree);    &#125;    //通过模拟对折N次纸，产生树    public static Node&lt;String&gt; createTree(int N)&#123;        //定义根结点        Node&lt;String&gt; root=null;        for (int i = 0; i &lt; N; i++) &#123;            //1.当前是第一次对折            if (i==0)&#123;                root = new Node&lt;&gt;(&quot;down&quot;,null,null);                continue;            &#125;            //2.当前不是第一次对折            //定义一个辅助队列，通过层序遍历的思想，找到叶子结点，叶子结点添加子节点            Queue&lt;Node&gt; queue = new Queue&lt;&gt;();            queue.enqueue(root);            //循环遍历队列            while(!queue.isEmpty())&#123;                //从队列中弹出一个结点                Node&lt;String&gt; tmp = queue.dequeue();                //如果有左子结点，则把左子结点放入到队列中                if (tmp.left!=null)&#123;                    queue.enqueue(tmp.left);                &#125;                //如果有右子结点，则把右子结点放入到队列中                if (tmp.right!=null)&#123;                    queue.enqueue(tmp.right);                &#125;                //如果同时没有左子结点和右子结点，那么证明该节点是叶子结点，只需要给该节点添加左子结点和右子结点即可                if (tmp.left==null &amp;&amp; tmp.right==null)&#123;                    tmp.left = new Node&lt;String&gt;(&quot;down&quot;, null,null);                    tmp.right = new Node&lt;String&gt;(&quot;up&quot;,null,null);                &#125;            &#125;        &#125;        return root;    &#125;    //打印树中每个结点到控制台    public static void printTree(Node&lt;String&gt; root)&#123;        //需要使用中序遍历完成        if (root==null)&#123;            return;        &#125;        //打印左子树的每个结点        if (root.left!=null)&#123;            printTree(root.left);        &#125;        //打印当前结点        System.out.print(root.item+&quot; &quot;);        //打印右子树的每个结点        if (root.right!=null)&#123;            printTree(root.right);        &#125;    &#125;    //结点类    private static class Node&lt;T&gt;&#123;        public T item;//存储元素        public Node left;        public Node right;        public Node(T item, Node left, Node right) &#123;            this.item = item;            this.left = left;            this.right = right;        &#125;    &#125;&#125;</code></pre><hr><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><hr><p>堆通常可以被看做是一棵<strong>完全二叉树</strong>的<strong>数组对象</strong>。</p><p>完全二叉树，除了树的最后一层结点不需要是满的，其它的每一层从左到右都是满的，如果最后一层结点不是满的，那么要求左满右不满。</p><p>二叉树的结点按照层级顺序放入数组中，<strong>根结点在位置1</strong>，它的子结点在位置2和3，而子结点的子结点则分别在位置4,5,6和7，以此类推。</p><p><strong>如果一个结点的位置为k，则它的父结点的位置为[k/2],而它的两个子结点的位置则分别为2k和2k+1。</strong></p><p><strong>每个结点都大于等于它的两个子结点</strong>。这里要注意堆中仅仅规定了每个结点大于等于它的两个子结点，但这两个子结点的顺序并没有做规定，跟之前的二叉查找树是有区别的。</p><hr><h3 id="API实现"><a href="#API实现" class="headerlink" title="API实现"></a>API实现</h3><hr><p>如果往堆中新插入元素，我们只需要不断的比较新结点a[k]和它的父结点a[k/2]的大小，然后根据结果完成数据元素的交换，就可以完成堆的有序调整。</p><p>当删除掉最大元素后，只需要将最后一个元素放到索引1处，并不断的拿着当前结点a[k]与它的子结点a[2k]和a[2k+1]中的较大者交换位置，即可完成堆的有序调整。</p><pre><code>public class Heap&lt;T extends Comparable&lt;T&gt;&gt; &#123;    //存储堆中的元素    private T[] items;    //记录堆中元素的个数    private int N;    public Heap(int capacity) &#123;        this.items= (T[]) new Comparable[capacity+1];        this.N=0;    &#125;    //判断堆中索引i处的元素是否小于索引j处的元素    private boolean less(int i,int j)&#123;        return items[i].compareTo(items[j])&lt;0;    &#125;    //交换堆中i索引和j索引处的值    private void exch(int i,int j)&#123;        T temp = items[i];        items[i] = items[j];        items[j] = temp;    &#125;    //往堆中插入一个元素    public void insert(T t)&#123;        items[++N]=t;        swim(N);    &#125;    //使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置    private void swim(int k)&#123;        //通过循环，不断的比较当前结点的值和其父结点的值，如果发现父结点的值比当前结点的值小，则交换位置        while(k&gt;1)&#123;            //比较当前结点和其父结点            if (less(k/2,k))&#123;                exch(k/2,k);            &#125;            k = k/2;        &#125;    &#125;    //删除堆中最大的元素,并返回这个最大元素    public T delMax()&#123;        T max = items[1];        //交换索引1处的元素和最大索引处的元素，让完全二叉树中最右侧的元素变为临时根结点        exch(1,N);        //最大索引处的元素删除掉        items[N]=null;        //元素个数-1        N--;        //通过下沉调整堆，让堆重新有序        sink(1);        return max;    &#125;    //使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置    private void sink(int k)&#123;        //通过循环不断的对比当前k结点和其左子结点2*k以及右子结点2k+1处中的较大值的元素大小，如果当前结点小，则需要交换位置        while(2*k&lt;=N)&#123;            //获取当前结点的子结点中的较大结点            int max;//记录较大结点所在的索引            if (2*k+1&lt;=N)&#123;                if (less(2*k,2*k+1))&#123;                    max=2*k+1;                &#125;else&#123;                    max=2*k;                &#125;            &#125;else &#123;                max = 2*k;            &#125;            //比较当前结点和较大结点的值            if (!less(k,max))&#123;                break;            &#125;            //交换k索引处的值和max索引处的值            exch(k,max);            //变换k的值            k = max;        &#125;    &#125;    public static void main(String[] args) &#123;        Heap&lt;String&gt; heap = new Heap&lt;String&gt;(20);        heap.insert(&quot;A&quot;);        heap.insert(&quot;B&quot;);        heap.insert(&quot;C&quot;);        heap.insert(&quot;D&quot;);        heap.insert(&quot;E&quot;);        heap.insert(&quot;F&quot;);        heap.insert(&quot;G&quot;);        String del;        while((del=heap.delMax())!=null)&#123;            System.out.print(del+&quot;,&quot;);        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class HeapTest &#123;    public static void main(String[] args) &#123;        //创建堆对象        Heap&lt;String&gt; heap = new Heap&lt;&gt;(10);        //往堆中存入字符串数据        heap.insert(&quot;A&quot;);        heap.insert(&quot;B&quot;);        heap.insert(&quot;C&quot;);        heap.insert(&quot;D&quot;);        heap.insert(&quot;E&quot;);        heap.insert(&quot;F&quot;);        heap.insert(&quot;G&quot;);        //通过循环从堆中删除数据        String result = null;        while((result = heap.delMax())!=null)&#123;            System.out.print(result+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><hr><h3 id="利用堆进行排序"><a href="#利用堆进行排序" class="headerlink" title="利用堆进行排序"></a>利用堆进行排序</h3><hr><p>构造堆；得到堆顶元素，这个值就是最大值；交换堆顶元素和数组中的最后一个元素，此时所有元素中的最大元素已经放到合适的位置；对堆进行调整，重新让除了最后一个元素的剩余元素中的最大值放到堆顶；重复上述步骤，直到堆中剩一个元素为止。</p><p>堆构造过程：创建一个新数组，把原数组0~length-1的数据拷贝到新数组的1~length处，再从新数组长度的一半处开始往1索引处扫描（从右往左），然后对扫描到的每一个元素做下沉调整即可。</p><p>堆排序过程：对构造好的堆，我们只需要做类似于堆的删除操作，就可以完成排序。将堆顶元素和堆中最后一个元素交换位置；通过对堆顶元素下沉调整堆，把最大的元素放到堆顶(此时最后一个元素不参与堆的调整，因为最大的数据已经到了数组的最右边)；重复上面步骤，直到堆中剩最后一个元素。</p><p>实现：</p><pre><code>public class HeapSort &#123;    //判断heap堆中索引i处的元素是否小于索引j处的元素    private static  boolean less(Comparable[] heap, int i, int j) &#123;        return heap[i].compareTo(heap[j])&lt;0;    &#125;    //交换heap堆中i索引和j索引处的值    private static  void exch(Comparable[] heap, int i, int j) &#123;        Comparable tmp = heap[i];        heap[i] = heap[j];        heap[j] = tmp;    &#125;    //根据原数组source，构造出堆heap    private static void createHeap(Comparable[] source, Comparable[] heap) &#123;        //把source中的元素拷贝到heap中，heap中的元素就形成一个无序的堆        System.arraycopy(source,0,heap,1,source.length);        //对堆中的元素做下沉调整(从长度的一半处开始，往索引1处扫描)        for (int i = (heap.length)/2;i&gt;0;i--)&#123;            sink(heap,i,heap.length-1);        &#125;    &#125;    //对source数组中的数据从小到大排序    public static  void sort(Comparable[] source) &#123;        //构建堆        Comparable[] heap = new Comparable[source.length+1];        createHeap(source,heap);        //定义一个变量，记录未排序的元素中最大的索引        int N = heap.length-1;        //通过循环，交换1索引处的元素和排序的元素中最大的索引处的元素        while(N!=1)&#123;            //交换元素            exch(heap,1,N);            //排序交换后最大元素所在的索引，让它不要参与堆的下沉调整            N--;            //需要对索引1处的元素进行对的下沉调整            sink(heap,1, N);        &#125;        //把heap中的数据复制到原数组source中        System.arraycopy(heap,1,source,0,source.length);    &#125;    //在heap堆中，对target处的元素做下沉，范围是0~range    private static void sink(Comparable[] heap, int target, int range)&#123;        while(2*target&lt;=range)&#123;            //1.找出当前结点的较大的子结点            int max;            if (2*target+1&lt;=range)&#123;                if (less(heap,2*target,2*target+1))&#123;                    max = 2*target+1;                &#125;else&#123;                    max = 2*target;                &#125;            &#125;else&#123;                max = 2*target;            &#125;            //2.比较当前结点的值和较大子结点的值            if (!less(heap,target,max))&#123;                break;            &#125;            exch(heap,target,max);            target = max;        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class HeapSortTest &#123;    public static void main(String[] args) &#123;        //待排序数组        String[] arr = &#123;&quot;S&quot;,&quot;O&quot;,&quot;R&quot;,&quot;T&quot;,&quot;E&quot;,&quot;X&quot;,&quot;A&quot;,&quot;M&quot;,&quot;P&quot;,&quot;L&quot;,&quot;E&quot;&#125;;        //通过HeapSort对数组中的元素进行排序        HeapSort.sort(arr);        //打印排序后数组中的元素        System.out.println(Arrays.toString(arr));    &#125;&#125;</code></pre><hr><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><h3 id="最大优先队列"><a href="#最大优先队列" class="headerlink" title="最大优先队列"></a>最大优先队列</h3><hr><p>可以获取并删除队列中最大的值。基于堆区实现最大优先队列。</p><pre><code>public class MaxPriorityQueue&lt;T extends Comparable&lt;T&gt;&gt; &#123;    //存储堆中的元素    private T[] items;    //记录堆中元素的个数    private int N;    public MaxPriorityQueue(int capacity) &#123;        this.items = (T[]) new Comparable[capacity+1];        this.N= 0;    &#125;    //获取队列中元素的个数    public int size() &#123;        return N;    &#125;    //判断队列是否为空    public boolean isEmpty() &#123;        return N==0;    &#125;    //判断堆中索引i处的元素是否小于索引j处的元素    private boolean less(int i, int j) &#123;        return items[i].compareTo(items[j])&lt;0;    &#125;    //交换堆中i索引和j索引处的值    private void exch(int i, int j) &#123;        T tmp = items[i];        items[i] = items[j];        items[j] = tmp;    &#125;    //往堆中插入一个元素    public void insert(T t) &#123;        items[++N] = t;        swim(N);    &#125;    //删除堆中最大的元素,并返回这个最大元素    public T delMax() &#123;        T max = items[1];        exch(1,N);        N--;        sink(1);        return max;    &#125;    //使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置    private void swim(int k) &#123;        while(k&gt;1)&#123;            if (less(k/2,k))&#123;                exch(k/2,k);            &#125;            k = k/2;        &#125;    &#125;    //使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置    private void sink(int k) &#123;        while(2*k&lt;=N)&#123;            int max;            if (2*k+1&lt;=N)&#123;                if (less(2*k,2*k+1))&#123;                    max=2*k+1;                &#125;else&#123;                    max = 2*k;                &#125;            &#125;else &#123;                max = 2*k;            &#125;            if (!less(k,max))&#123;                break;            &#125;            exch(k,max);            k = max;        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class MaxPriorityQueueTest &#123;    public static void main(String[] args) &#123;        //创建优先队列        MaxPriorityQueue&lt;String&gt; queue = new MaxPriorityQueue&lt;&gt;(10);        //往队列中存储元素        queue.insert(&quot;A&quot;);        queue.insert(&quot;B&quot;);        queue.insert(&quot;C&quot;);        queue.insert(&quot;D&quot;);        queue.insert(&quot;E&quot;);        queue.insert(&quot;F&quot;);        queue.insert(&quot;G&quot;);        //通过循环从队列中获取最大的元素        while(!queue.isEmpty())&#123;            String max = queue.delMax();            System.out.print(max+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><hr><h3 id="最小优先队列"><a href="#最小优先队列" class="headerlink" title="最小优先队列"></a>最小优先队列</h3><hr><p>可以获取并删除队列中最小的值。基于堆来完成最小优先队列：最小的元素放在数组的索引1处；每个结点的数据总是小于等于它的两个子结点的数据。</p><pre><code>public class MinPriorityQueue&lt;T extends Comparable&lt;T&gt;&gt; &#123;    //存储堆中的元素    private T[] items;    //记录堆中元素的个数    private int N;    public MinPriorityQueue(int capacity) &#123;        this.items = (T[]) new Comparable[capacity+1];        this.N=0;    &#125;    //获取队列中元素的个数    public int size() &#123;        return N;    &#125;    //判断队列是否为空    public boolean isEmpty() &#123;        return N==0;    &#125;    //判断堆中索引i处的元素是否小于索引j处的元素    private boolean less(int i, int j) &#123;        return items[i].compareTo(items[j])&lt;0;    &#125;    //交换堆中i索引和j索引处的值    private void exch(int i, int j) &#123;        T tmp = items[i];        items[i] = items[j];        items[j] = tmp;    &#125;    //往堆中插入一个元素    public void insert(T t) &#123;        items[++N] = t;        swim(N);    &#125;    //删除堆中最小的元素,并返回这个最小元素    public T delMin() &#123;        T min = items[1];        exch(1,N);        N--;        sink(1);        return min;    &#125;    //使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置    private void swim(int k) &#123;        //通过循环比较当前结点和其父结点的大小        while(k&gt;1)&#123;            if (less(k,k/2))&#123;                exch(k,k/2);            &#125;            k = k/2;        &#125;    &#125;    //使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置    private void sink(int k) &#123;        //通过循环比较当前结点和其子结点中的较小值        while(2*k&lt;=N)&#123;            //1.找到子结点中的较小值            int min;            if (2*k+1&lt;=N)&#123;                if (less(2*k, 2*k+1))&#123;                    min = 2*k;                &#125;else&#123;                    min = 2*k+1;                &#125;            &#125;else&#123;                min = 2*k;            &#125;            //2.判断当前结点和较小值的大小            if (less(k,min))&#123;                break;            &#125;            exch(k,min);            k = min;        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class MinPriorityQueueTest &#123;    public static void main(String[] args) &#123;        //创建最小优先队列对象        MinPriorityQueue&lt;String&gt; queue = new MinPriorityQueue&lt;String&gt;(10);        //往队列中存数据        queue.insert(&quot;G&quot;);        queue.insert(&quot;F&quot;);        queue.insert(&quot;E&quot;);        queue.insert(&quot;D&quot;);        queue.insert(&quot;C&quot;);        queue.insert(&quot;B&quot;);        queue.insert(&quot;A&quot;);        //通过循环获取最小优先队列中的元素        while(!queue.isEmpty())&#123;            String min = queue.delMin();            System.out.print(min+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><hr><h3 id="索引优先队列"><a href="#索引优先队列" class="headerlink" title="索引优先队列"></a>索引优先队列</h3><hr><p>存储数据时，给每一个数据元素关联一个整数，例如insert(int k,T t),我们可以看做k是t关联的整数，那么我们的实现需要通过k这个值，快速获取到队列中t这个元素，此时有个k这个值需要具有唯一性。</p><p>用一个<code>T[] items</code>数组来保存数据元素，在insert(int k,T t)完成插入时，可以把k看做是items数组的索引，把t元素放到items数组的索引k处，这样我们再根据k获取元素t时就很方便了，直接就可以拿到items[k]即可。</p><p>数组<code>int[]pq</code>,来保存每个元素在items数组中的索引，pq数组需要堆有序，也就是说，pq[1]对应的数据元素items[pq[1]]要小于等于pq[2]和pq[3]对应的数据元素items[pq[2]]和items[pq[3]]。</p><p>数组<code>int[] qp</code>,用来存储pq的逆序。例如：在pq数组中：pq[1]=6;那么在qp数组中，把6作为索引，1作为值，结果是：qp[6]=1。</p><p>代码实现</p><pre><code>public class IndexMinPriorityQueue&lt;T extends Comparable&lt;T&gt;&gt; &#123;    //存储堆中的元素    private T[] items;    //保存每个元素在items数组中的索引，pq数组需要堆有序    private int[] pq;    //保存qp的逆序，pq的值作为索引，pq的索引作为值    private int[] qp;    //记录堆中元素的个数    private int N;    public IndexMinPriorityQueue(int capacity) &#123;        this.items = (T[]) new Comparable[capacity+1];        this.pq = new int[capacity+1];        this.qp= new int[capacity+1];        this.N = 0;        //默认情况下，队列中没有存储任何数据，让qp中的元素都为-1；        for (int i = 0; i &lt; qp.length; i++) &#123;            qp[i]=-1;        &#125;    &#125;    //获取队列中元素的个数    public int size() &#123;        return N;    &#125;    //判断队列是否为空    public boolean isEmpty() &#123;        return N==0;    &#125;    //判断堆中索引i处的元素是否小于索引j处的元素    private boolean less(int i, int j) &#123;        return items[pq[i]].compareTo(items[pq[j]])&lt;0;    &#125;    //交换堆中i索引和j索引处的值    private void exch(int i, int j) &#123;        //交换pq中的数据        int tmp = pq[i];        pq[i] = pq[j];        pq[j] = tmp;        //更新qp中的数据        qp[pq[i]]=i;        qp[pq[j]] =j;    &#125;    //判断k对应的元素是否存在    public boolean contains(int k) &#123;        return qp[k] !=-1;    &#125;    //最小元素关联的索引    public int minIndex() &#123;        return pq[1];    &#125;    //往队列中插入一个元素,并关联索引i    public void insert(int i, T t) &#123;        //判断i是否已经被关联，如果已经被关联，则不让插入        if (contains(i))&#123;            return;        &#125;        //元素个数+1        N++;        //把数据存储到items对应的i位置处        items[i] = t;        //把i存储到pq中        pq[N] = i;        //通过qp来记录pq中的i        qp[i]=N;        //通过堆上浮完成堆的调整        swim(N);    &#125;    //删除队列中最小的元素,并返回该元素关联的索引    public int delMin() &#123;        //获取最小元素关联的索引        int minIndex = pq[1];        //交换pq中索引1处和最大索引处的元素        exch(1,N);        //删除qp中对应的内容        qp[pq[N]] = -1;        //删除pq最大索引处的内容        pq[N]=-1;        //删除items中对应的内容        items[minIndex] = null;        //元素个数-1        N--;        //下沉调整        sink(1);        return minIndex;    &#125;    //删除索引i关联的元素    public void delete(int i) &#123;        //找到i在pq中的索引        int k = qp[i];        //交换pq中索引k处的值和索引N处的值        exch(k,N);        //删除qp中的内容        qp[pq[N]] = -1;        //删除pq中的内容        pq[N]=-1;        //删除items中的内容        items[k]=null;        //元素的数量-1        N--;        //堆的调整        sink(k);        swim(k);    &#125;    //把与索引i关联的元素修改为为t    public void changeItem(int i, T t) &#123;        //修改items数组中i位置的元素为t        items[i] = t;        //找到i在pq中出现的位置        int k = qp[i];        //堆调整        sink(k);        swim(k);    &#125;    //使用上浮算法，使索引k处的元素能在堆中处于一个正确的位置    private void swim(int k) &#123;        while(k&gt;1)&#123;            if (less(k,k/2))&#123;                exch(k,k/2);            &#125;            k = k/2;        &#125;    &#125;    //使用下沉算法，使索引k处的元素能在堆中处于一个正确的位置    private void sink(int k) &#123;        while(2*k&lt;=N)&#123;            //找到子结点中的较小值            int min;            if (2*k+1&lt;=N)&#123;                if (less(2*k,2*k+1))&#123;                    min = 2*k;                &#125;else&#123;                    min = 2*k+1;                &#125;            &#125;else&#123;                min = 2*k;            &#125;            //比较当前结点和较小值            if (less(k,min))&#123;                break;            &#125;            exch(k,min);            k = min;        &#125;    &#125;&#125;</code></pre><p>测试代码</p><pre><code>public class IndexMinPriorityQueueTest &#123;    public static void main(String[] args) &#123;        //创建索引最小优先队列对象        IndexMinPriorityQueue&lt;String&gt; queue = new IndexMinPriorityQueue&lt;&gt;(10);        //往队列中添加元素        queue.insert(0,&quot;A&quot;);        queue.insert(1,&quot;C&quot;);        queue.insert(2,&quot;F&quot;);        //测试修改        queue.changeItem(2,&quot;B&quot;);        //测试删除        while(!queue.isEmpty())&#123;            int index = queue.delMin();            System.out.print(index+&quot; &quot;);        &#125;    &#125;&#125;</code></pre><hr><h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><h3 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h3><hr><p>2-结点：含有一个键(及其对应的值)和两条链，左链接指向2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。</p><p>3-结点：含有两个键(及其对应的值)和三条链，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都大于该结点。</p><p>查找：要判断一个键是否在树中，我们先将它和根结点中的键比较。如果它和其中任意一个相等，查找命中；否则我们就根据比较的结果找到指向相应区间的连接，并在其指向的子树中递归地继续查找。如果这个是空链接，查找未命中。</p><p>向2-结点中插入新键：查找后未找到的节点是一个2-结点，我们只需要将新的元素放到这个2-结点里面使其变成一个3-结点即可。</p><p>一棵完全平衡的2-3树具有以下性质：任意空链接到根结点的路径长度都是相等的。4-结点变换为3-结点时，树的高度不会发生变化，只有当根结点是临时的4-结点，分解根结点时，树高+1。2-3树与普通二叉查找树最大的区别在于，普通的二叉查找树是自顶向下生长，而2-3树是自底向上生长。</p><p>直接实现2-3树比较复杂，但是2-3查找树作为一种比较重要的概念和思路对于红黑树、B树和B+树非常重要。</p><hr><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><hr><p>红黑树主要是对2-3树进行编码，红黑树背后的基本思想是用标准的二叉查找树(完全由2-结点构成)和一些额外的信息(替换3-结点)来表示2-3树。</p><p>我们将树中的链接分为两种类型：红链接：将两个2-结点连接起来构成一个3-结点。黑链接：则是2-3树中的普通链接。</p><p>确切的说，我们将3-结点表示为由一条左斜的红色链接(两个2-结点其中之一是另一个的左子结点)相连的两个2-结点。这种表示法的一个优点是，我们无需修改就可以直接使用标准的二叉查找树的get方法。</p><p><strong>红黑树是含有红黑链接并满足下列条件的二叉查找树：红链接均为左链接；没有任何一个结点同时和两条红链接相连；该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。</strong></p><p>在对红黑树进行一些增删改查的操作后，很有可能会出现红色的右链接或者两条连续红色的链接，而这些都不满足红黑树的定义，所以我们需要对这些情况通过旋转进行修复，让<strong>红黑树保持平衡</strong>。</p><p><strong>左旋</strong>：当某个结点的左子结点为黑色，右子结点为红色，此时需要左旋。前提：当前结点为h，它的右子结点为x。左旋过程：让x的左子结点变为h的右子结点：h.right=x.left;让h成为x的左子结点：x.left=h;让h的color属性变为x的color属性值：x.color=h.color;让h的color属性变为RED：h.color=true。</p><p><strong>右旋</strong>：当某个结点的左子结点是红色，且左子结点的左子结点也是红色，需要右旋。前提：当前结点为h，它的左子结点为x。右旋过程：让x的右子结点成为h的左子结点：h.left = x.right;让h成为x的右子结点：x.right=h;让x的color变为h的color属性值：x.color = h.color;让h的color为RED。</p><p><strong>颜色反转</strong>：当一个结点的左子结点和右子结点的color都为RED时，也就是出现了临时的4-结点，此时只需要把左子结点和右子结点的颜色变为BLACK，同时让当前结点的颜色变为RED即可。</p><p>由于根结点不存在父结点，所以每次插入操作后，我们都需要把根结点的颜色设置为黑色。</p><p>代码实现</p><pre><code>public class RedBlackTree&lt;Key extends Comparable&lt;Key&gt;, Value&gt; &#123;    //根节点    private Node root;    //记录树中元素的个数    private int N;    //红色链接    private static final boolean RED = true;    //黑色链接    private static final boolean BLACK = false;    //结点类    private class Node &#123;        //存储键        public Key key;        //存储值        private Value value;        //记录左子结点        public Node left;        //记录右子结点        public Node right;        //由其父结点指向它的链接的颜色        public boolean color;        public Node(Key key, Value value, Node left, Node right, boolean color) &#123;            this.key = key;            this.value = value;            this.left = left;            this.right = right;            this.color = color;        &#125;    &#125;    //获取树中元素的个数    public int size() &#123;        return N;    &#125;    /**     * 判断当前节点的父指向链接是否为红色     *     * @param x     * @return     */    private boolean isRed(Node x) &#123;        if (x==null)&#123;            return false;        &#125;        return x.color==RED;    &#125;    /**     * 左旋转     *     * @param h     * @return     */    private Node rotateLeft(Node h) &#123;        //找到h结点的右子结点x        Node x = h.right;        //找到x结点的左子结点，让x结点的左子结点称为h结点的右子结点        h.right = x.left;        //让h结点称为x结点的左子结点        x.left = h;        //让x结点的color属性变为h结点的color属性        x.color = h.color;        //让h结点的color属性变为RED        h.color = RED;        return x;    &#125;    /**     * 右旋     *     * @param h     * @return     */    private Node rotateRight(Node h) &#123;        //找到h结点的左子结点 x        Node x = h.left;        //让x结点的右子结点成为h结点的左子结点        h.left = x.right;        //让h结点成为x结点的右子结点        x.right = h;        //让x结点的color属性变为h结点的color属性        x.color = h.color;        //让h结点的color属性为RED        h.color = RED;        return x;    &#125;    /**     * 颜色反转,相当于完成拆分4-节点     *     * @param h     */    private void flipColors(Node h) &#123;        //当前结点变为红色        h.color = RED;        //左子结点和右子结点变为黑色        h.left.color=BLACK;        h.right.color = BLACK;    &#125;    /**     * 在整个树上完成插入操作     *     * @param key     * @param val     */    public void put(Key key, Value val) &#123;        root = put(root,key,val);        //根结点的颜色总是黑色        root.color = BLACK;    &#125;    /**     * 在指定树中，完成插入操作,并返回添加元素后新的树     *     * @param h     * @param key     * @param val     */    private Node put(Node h, Key key, Value val) &#123;        //判断h是否为空，如果为空则直接返回一个红色的结点就可以了        if (h == null)&#123;            //数量+1            N++;            return new Node(key,val,null,null,BLACK);        &#125;        //比较h结点的键和key的大小        int cmp = key.compareTo(h.key);        if (cmp&lt;0)&#123;            //继续往左            h.left = put(h.left,key,val);        &#125;else if (cmp&gt;0)&#123;            //继续往右            h.right = put(h.right,key,val);        &#125;else&#123;            //发生值的替换            h.value = val;        &#125;        //进行左旋:当当前结点h的左子结点为黑色，右子结点为红色，需要左旋        if (isRed(h.right) &amp;&amp; !isRed(h.left))&#123;            h = rotateLeft(h);        &#125;        //进行右旋：当当前结点h的左子结点和左子结点的左子结点都为红色，需要右旋        if (isRed(h.left) &amp;&amp; isRed(h.left.left))&#123;            rotateRight(h);        &#125;        //颜色反转：当前结点的左子结点和右子结点都为红色时，需要颜色反转        if (isRed(h.left) &amp;&amp; isRed(h.right))&#123;            flipColors(h);        &#125;        return h;    &#125;    //根据key，从树中找出对应的值    public Value get(Key key) &#123;        return get(root,key);    &#125;    //从指定的树x中，查找key对应的值    public Value get(Node x, Key key) &#123;        if (x == null)&#123;            return null;        &#125;        //比较x结点的键和key的大小        int cmp = key.compareTo(x.key);        if (cmp&lt;0)&#123;            return get(x.left,key);        &#125;else if (cmp&gt;0)&#123;            return get(x.right,key);        &#125;else&#123;           return x.value;        &#125;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class RedBlackTreeTest &#123;    public static void main(String[] args) &#123;        //创建红黑树        RedBlackTree&lt;String, String&gt; tree = new RedBlackTree&lt;&gt;();        //往树中插入元素        tree.put(&quot;1&quot;,&quot;张三&quot;);        tree.put(&quot;2&quot;,&quot;李四&quot;);        tree.put(&quot;3&quot;,&quot;王五&quot;);        //从树中获取元素        String r1 = tree.get(&quot;1&quot;);        System.out.println(r1);        String r2 = tree.get(&quot;2&quot;);        System.out.println(r2);        String r3 = tree.get(&quot;3&quot;);        System.out.println(r3);    &#125;&#125;</code></pre><hr><h2 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><hr><p>B树中允许一个结点中包含多个key，可以是3个、4个、5个甚至更多，并不确定，需要看具体的实现。现在我们选择一个参数M，来构造一个B树，我们可以把它称作是M阶的B树，那么该树会具有如下特点：每个结点最多有M-1个key，并且以升序排列；每个结点最多能有M个子结点；根结点至少有两个子结点。</p><p>在实际应用中B树的阶数一般都比较大（通常大于100），所以，即使存储大量的数据，B树的高度仍然比较小，这样在某些应用场景下，就可以体现出它的优势。</p><p>在我们的程序中，不可避免的需要通过IO操作文件，而我们的文件是存储在磁盘上的。计算机操作磁盘上的文件是通过文件系统进行操作的，在文件系统中就使用到了B树这种数据结构。</p><hr><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><hr><p>B+树是对B树的一种变形树，它与B树的差异在于：非叶结点仅具有索引作用，也就是说，非叶子结点只存储key，不存储value；树的所有叶结点构成一个有序链表，可以按照key排序的次序遍历全部数据。</p><p>B+ 树的优点在于：由于B+树在非叶子结点上不包含真正的数据，只当做索引使用，因此在内存相同的情况下，能够存放更多的key。B+树的叶子结点都是相连的，因此对整棵树的遍历只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。</p><p>B树的优点在于：由于B树的每一个节点都包含key和value，因此我们根据key查找value时，只需要找到key所在的位置，就能找到value，但B+树只有叶子结点存储数据，索引每一次查找，都必须一次一次，一直找到树的最大深度处，也就是叶子结点的深度，才能找到value。</p><p>在数据库的操作中，查询操作可以说是最频繁的一种操作，因此在设计数据库时，必须要考虑到查询的效率问题，<strong>在很多数据库中，都是用到了B+树来提高查询的效率</strong>；在操作数据库时，我们为了提高查询效率，可以基于某张表的某个字段建立索引，就可以提高查询效率，那其实这个索引就是B+树这种数据结构实现的。</p><hr><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><hr><p>并查集也是一种树型结构，跟二叉树、红黑树、B树等都不一样，这种树的要求比较简单：每个元素都唯一的对应一个结点；每一组数据中的多个元素都在同一颗树中；一个组中的数据对应的树和另外一个组中的数据对应的树之间没有任何联系；元素在树中并没有子父级关系的硬性要求。</p><hr><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><hr><p>初始情况下，并查集中的数据默认分为N个组；初始化数组eleAndGroup；把eleAndGroup数组的索引看做是每个结点存储的元素，把eleAndGroup数组每个索引处的值看做是该结点所在的分组，那么初始化情况下，i索引处存储的值就是i。</p><p>如果p和q已经在同一个分组中，则无需合并；如果p和q不在同一个分组，则只需要将p元素所在组的所有的元素的组标识符修改为q元素所在组的标识符即可；分组数量-1。</p><pre><code>public class UF &#123;    //记录结点元素和该元素所在分组的标识    private int[] eleAndGroup;    //记录并查集中数据的分组个数    private int count;    //初始化并查集    public UF(int N)&#123;        //初始化分组的数量,默认情况下，有N个分组        this.count = N;        //初始化eleAndGroup数组        this.eleAndGroup = new int[N];        //初始化eleAndGroup中的元素及其所在的组的标识符,让eleAndGroup数组的索引作为并查集的每个结点的元素，并且让每个索引处的值(该元素所在的组的标识符)就是该索引        for (int i = 0; i &lt; eleAndGroup.length; i++) &#123;            eleAndGroup[i] = i;        &#125;    &#125;    //获取当前并查集中的数据有多少个分组    public int count()&#123;        return count;    &#125;    //元素p所在分组的标识符    public int find(int p)&#123;        return eleAndGroup[p];    &#125;    //判断并查集中元素p和元素q是否在同一分组中    public boolean connected(int p,int q)&#123;        return find(p) == find(q);    &#125;    //把p元素所在分组和q元素所在分组合并    public void union(int p,int q)&#123;        //判断元素q和p是否已经在同一分组中，如果已经在同一分组中，则结束方法就可以了        if (connected(p,q))&#123;            return;        &#125;        //找到p所在分组的标识符        int pGroup = find(p);        //找到q所在分组的标识符        int qGroup = find(q);        //合并组：让p所在组的所有元素的组标识符变为q所在分组的标识符        for (int i = 0; i &lt; eleAndGroup.length; i++) &#123;            if (eleAndGroup[i]==pGroup)&#123;                eleAndGroup[i] = qGroup;            &#125;        &#125;        //分组个数-1        this.count--;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class UFTest &#123;    public static void main(String[] args) &#123;        //创建并查集对象        UF uf = new UF(5);        System.out.println(&quot;默认情况下，并查集中有：&quot;+uf.count()+&quot;个分组&quot;);        //从控制台录入两个要合并的元素，调用union方法合并，观察合并后并查集中的分组是否减少        Scanner sc = new Scanner(System.in);        while(true)&#123;            System.out.println(&quot;请输入第一个要合并的元素：&quot;);            int p = sc.nextInt();            System.out.println(&quot;请输入第二个要合并的元素：&quot;);            int q = sc.nextInt();            //判断这两个元素是否已经在同一组了            if (uf.connected(p,q))&#123;                System.out.println(p+&quot;元素和&quot;+q+&quot;元素已经在同一个组中了&quot;);                continue;            &#125;            uf.union(p,q);            System.out.println(&quot;当前并查集中还有：&quot;+uf.count()+&quot;个分组&quot;);        &#125;    &#125;&#125;</code></pre><hr><h3 id="UF-Tree算法优化"><a href="#UF-Tree算法优化" class="headerlink" title="UF_Tree算法优化"></a>UF_Tree算法优化</h3><hr><p>我们仍然让eleAndGroup数组的索引作为某个结点的元素；eleAndGroup[i]的值不再是当前结点所在的分组标识，而是该结点的父结点。</p><pre><code>public class UF_Tree &#123;    //记录结点元素和该元素所在分组的标识    private int[] eleAndGroup;    //记录并查集中数据的分组个数    private int count;    //初始化并查集    public UF_Tree(int N)&#123;        //初始化分组的数量,默认情况下，有N个分组        this.count = N;        //初始化eleAndGroup数组        this.eleAndGroup = new int[N];        //初始化eleAndGroup中的元素及其所在的组的标识符,让eleAndGroup数组的索引作为并查集的每个结点的元素，并且让每个索引处的值(该元素所在的组的标识符)就是该索引        for (int i = 0; i &lt; eleAndGroup.length; i++) &#123;            eleAndGroup[i] = i;        &#125;    &#125;    //获取当前并查集中的数据有多少个分组    public int count()&#123;        return count;    &#125;    //判断并查集中元素p和元素q是否在同一分组中    public boolean connected(int p,int q)&#123;        return find(p) == find(q);    &#125;    //元素p所在分组的标识符    public int find(int p)&#123;        while(true)&#123;            if (p == eleAndGroup[p])&#123;                return p;            &#125;            p = eleAndGroup[p];        &#125;    &#125;    //把p元素所在分组和q元素所在分组合并    public void union(int p,int q)&#123;        //找到p元素和q元素所在组对应的树的根结点        int pRoot = find(p);        int qRoot = find(q);        //如果p和q已经在同一分组，则不需要合并了        if (pRoot==qRoot)&#123;            return;        &#125;        //让p所在的树的根结点的父结点为q所在树的根结点即可        eleAndGroup[pRoot] = qRoot;        //组的数量-1        this.count--;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class UFTeeTest &#123;    public static void main(String[] args) &#123;        //创建并查集对象        UF_Tree uf = new UF_Tree(5);        System.out.println(&quot;默认情况下，并查集中有：&quot;+uf.count()+&quot;个分组&quot;);        //从控制台录入两个要合并的元素，调用union方法合并，观察合并后并查集中的分组是否减少        Scanner sc = new Scanner(System.in);        while(true)&#123;            System.out.println(&quot;请输入第一个要合并的元素：&quot;);            int p = sc.nextInt();            System.out.println(&quot;请输入第二个要合并的元素：&quot;);            int q = sc.nextInt();            //判断这两个元素是否已经在同一组了            if (uf.connected(p,q))&#123;                System.out.println(p+&quot;元素和&quot;+q+&quot;元素已经在同一个组中了&quot;);                continue;            &#125;            uf.union(p,q);            System.out.println(&quot;当前并查集中还有：&quot;+uf.count()+&quot;个分组&quot;);        &#125;    &#125;&#125;</code></pre><hr><h3 id="路径压缩优化"><a href="#路径压缩优化" class="headerlink" title="路径压缩优化"></a>路径压缩优化</h3><hr><p>在每次合并树的时候，把较小的树连接到较大的树上，就可以减小树的深度。</p><pre><code>public class UF_Tree_Weighted &#123;    //记录结点元素和该元素所在分组的标识    private int[] eleAndGroup;    //记录并查集中数据的分组个数    private int count;    //用来存储每一个根结点对应的树中保存的结点的个数    private int[] sz;    //初始化并查集    public UF_Tree_Weighted(int N)&#123;        //初始化分组的数量,默认情况下，有N个分组        this.count = N;        //初始化eleAndGroup数组        this.eleAndGroup = new int[N];        //初始化eleAndGroup中的元素及其所在的组的标识符,让eleAndGroup数组的索引作为并查集的每个结点的元素，并且让每个索引处的值(该元素所在的组的标识符)就是该索引        for (int i = 0; i &lt; eleAndGroup.length; i++) &#123;            eleAndGroup[i] = i;        &#125;        this.sz = new int[N];        //默认情况下，sz中每个索引处的值都是1        for (int i = 0; i &lt; sz.length; i++) &#123;            sz[i] = 1;        &#125;     &#125;    //获取当前并查集中的数据有多少个分组    public int count()&#123;        return count;    &#125;    //判断并查集中元素p和元素q是否在同一分组中    public boolean connected(int p,int q)&#123;        return find(p) == find(q);    &#125;    //元素p所在分组的标识符    public int find(int p)&#123;        while(true)&#123;            if (p == eleAndGroup[p])&#123;                return p;            &#125;            p = eleAndGroup[p];        &#125;    &#125;    //把p元素所在分组和q元素所在分组合并    public void union(int p,int q)&#123;        //找到p元素和q元素所在组对应的树的根结点        int pRoot = find(p);        int qRoot = find(q);        //如果p和q已经在同一分组，则不需要合并了        if (pRoot==qRoot)&#123;            return;        &#125;        //判断proot对应的树大还是qroot对应的树大，最终需要把较小的树合并到较大的树中        if (sz[pRoot]&lt;sz[qRoot])&#123;            eleAndGroup[pRoot] = qRoot;            sz[qRoot]+=sz[pRoot];        &#125;else&#123;            eleAndGroup[qRoot] = pRoot;            sz[pRoot]+= sz[qRoot];        &#125;        //组的数量-1        this.count--;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class UFTeeWeightedTest &#123;    public static void main(String[] args) &#123;        //创建并查集对象        UF_Tree_Weighted uf = new UF_Tree_Weighted(5);        System.out.println(&quot;默认情况下，并查集中有：&quot;+uf.count()+&quot;个分组&quot;);        //从控制台录入两个要合并的元素，调用union方法合并，观察合并后并查集中的分组是否减少        Scanner sc = new Scanner(System.in);        while(true)&#123;            System.out.println(&quot;请输入第一个要合并的元素：&quot;);            int p = sc.nextInt();            System.out.println(&quot;请输入第二个要合并的元素：&quot;);            int q = sc.nextInt();            //判断这两个元素是否已经在同一组了            if (uf.connected(p,q))&#123;                System.out.println(p+&quot;元素和&quot;+q+&quot;元素已经在同一个组中了&quot;);                continue;            &#125;            uf.union(p,q);            System.out.println(&quot;当前并查集中还有：&quot;+uf.count()+&quot;个分组&quot;);        &#125;    &#125;&#125;</code></pre><hr><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><hr><pre><code>public class Traffic_Project_Test &#123;    public static void main(String[] args) throws Exception&#123;        //构建一个缓冲读取流BufferedReader        BufferedReader br = new BufferedReader(new InputStreamReader(Traffic_Project_Test.class.getClassLoader().getResourceAsStream(&quot;traffic_project.txt&quot;)));        //读取第一行数据20        int totalNumber = Integer.parseInt(br.readLine());        //构建一个并查集对象        UF_Tree_Weighted uf = new UF_Tree_Weighted(totalNumber);        //读取第二行数据7        int roadNumber = Integer.parseInt(br.readLine());        //循环读取7条道路        for (int i=1;i&lt;=roadNumber;i++)&#123;            String line = br.readLine();//0 1            String[] str = line.split(&quot; &quot;);            int p = Integer.parseInt(str[0]);            int q = Integer.parseInt(str[1]);            //调用并查集对象的union方法让两个城市相通            uf.union(p,q);        &#125;        //获取当前并查集中分组的数量-1就可以得到还需要修建的道路的数目        int roads = uf.count()-1;        System.out.println(&quot;还需要修建&quot;+roads+&quot;条道路，才能实现畅通工程&quot;);    &#125;&#125;</code></pre><hr><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><hr><p>图是由一组顶点和一组能够将两个顶点相连的边组成的。按照连接两个顶点的边的不同，可以把图分为以下两种：无向图：边仅仅连接两个顶点，没有其他含义；有向图：边不仅连接两个顶点，并且具有方向。</p><p>相邻顶点：当两个顶点通过一条边相连时，我们称这两个顶点是相邻的，并且称这条边依附于这两个顶点。</p><p>度：某个顶点的度就是依附于该顶点的边的个数。</p><p>子图：是一幅图的所有边的子集(包含这些边依附的顶点)组成的图。</p><p>路径：是由边顺序连接的一系列的顶点组成。</p><p>环：是一条至少含有一条边且终点和起点相同的路径。</p><p>连通图：如果图中任意一个顶点都存在一条路径到达另外一个顶点，那么这幅图就称之为连通图。</p><p>连通子图：一个非连通图由若干连通的部分组成，每一个连通的部分都可以称为该图的连通子图。</p><hr><h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3><hr><p>只需要表示清楚以下两部分内容即可：图中所有的顶点；所有连接顶点的边。</p><p>常见的图的存储结构有两种：邻接矩阵和邻接表</p><p>邻接矩阵：使用一个 <code>V*V</code> 的二维数组<code>int[V][V] adj</code>,把索引的值看做是顶点；如果顶点v和顶点w相连，我们只需要将<code>adj[v][w]</code>和<code>adj[w][v]</code>的值设置为1,否则设置为0即可。邻接矩阵这种存储方式的空间复杂度是<code>V^2</code>的。</p><p>邻接表：使用一个大小为V的数组 <code>Queue[V] adj</code>，把索引看做是顶点；每个索引处<code>adj[v]</code>存储了一个队列，该队列中存储的是所有与该顶点相邻的其他顶点。</p><hr><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><hr><pre><code>public class Graph &#123;    //顶点数目    private final int V;    //边的数目    private int E;    //邻接表    private Queue&lt;Integer&gt;[] adj;    public Graph(int V)&#123;        //初始化顶点数量        this.V = V;        //初始化边的数量        this.E = 0;        //初始化邻接表        this.adj = new Queue[V];        for (int i = 0; i &lt; adj.length; i++) &#123;            adj[i] = new Queue&lt;Integer&gt;();        &#125;    &#125;    //获取顶点数目    public int V()&#123;        return V;    &#125;    //获取边的数目    public int E()&#123;        return E;    &#125;    //向图中添加一条边 v-w    public void addEdge(int v, int w) &#123;        //在无向图中，边是没有方向的，所以该边既可以说是从v到w的边，又可以说是从w到v的边，因此，需要让w出现在v的邻接表中，并且还要让v出现在w的邻接表中        adj[v].enqueue(w);        adj[w].enqueue(v);        //边的数量+1        E++;    &#125;    //获取和顶点v相邻的所有顶点    public Queue&lt;Integer&gt; adj(int v)&#123;        return adj[v];    &#125;&#125;</code></pre><hr><h3 id="图的搜索"><a href="#图的搜索" class="headerlink" title="图的搜索"></a>图的搜索</h3><hr><p><strong>深度优先搜索</strong>：在搜索时，如果遇到一个结点既有子结点，又有兄弟结点，那么先找子结点，然后找兄弟结点。</p><pre><code>public class DepthFirstSearch &#123;    //索引代表顶点，值表示当前顶点是否已经被搜索    private boolean[] marked;    //记录有多少个顶点与s顶点相通    private int count;    //构造深度优先搜索对象，使用深度优先搜索找出G图中s顶点的所有相邻顶点    public DepthFirstSearch(Graph G,int s)&#123;        //初始化marked数组        this.marked = new boolean[G.V()];        //初始化跟顶点s相通的顶点的数量        this.count=0;        dfs(G,s);    &#125;    //使用深度优先搜索找出G图中v顶点的所有相通顶点    private void dfs(Graph G, int v)&#123;        //把v顶点标识为已搜索        marked[v] = true;        for (Integer w : G.adj(v)) &#123;            //判断当前w顶点有没有被搜索过，如果没有被搜索过，则递归调用dfs方法进行深度搜索            if (!marked[w])&#123;                dfs(G,w);            &#125;        &#125;        //相通顶点数量+1        count++;    &#125;    //判断w顶点与s顶点是否相通    public boolean marked(int w)&#123;       return marked[w];    &#125;    //获取与顶点s相通的所有顶点的总数    public int count()&#123;        return count;    &#125;&#125;</code></pre><p>测试深度优先搜索</p><pre><code>public class DepthFirstSearchTest &#123;    public static void main(String[] args) &#123;        //准备Graph对象        Graph G = new Graph(13);        G.addEdge(0,5);        G.addEdge(0,1);        G.addEdge(0,2);        G.addEdge(0,6);        G.addEdge(5,3);        G.addEdge(5,4);        G.addEdge(3,4);        G.addEdge(4,6);        G.addEdge(7,8);        G.addEdge(9,11);        G.addEdge(9,10);        G.addEdge(9,12);        G.addEdge(11,12);        //准备深度优先搜索对象        DepthFirstSearch search = new DepthFirstSearch(G, 0);        //测试与某个顶点相通的顶点数量        int count = search.count();        System.out.println(&quot;与起点0相通的顶点的数量为:&quot;+count);        //测试某个顶点与起点是否相同        boolean marked1 = search.marked(5);        System.out.println(&quot;顶点5和顶点0是否相通：&quot;+marked1);        boolean marked2 = search.marked(7);        System.out.println(&quot;顶点7和顶点0是否相通：&quot;+marked2);    &#125;&#125;</code></pre><p><strong>广度优先搜索</strong>:在搜索时，如果遇到一个结点既有子结点，又有兄弟结点，那么先找兄弟结点，然后找子结点。</p><p>实现代码</p><pre><code>public class BreadthFirstSearch &#123;    //索引代表顶点，值表示当前顶点是否已经被搜索    private boolean[] marked;    //记录有多少个顶点与s顶点相通    private int count;    //用来存储待搜索邻接表的点    private Queue&lt;Integer&gt; waitSearch;    //构造广度优先搜索对象，使用广度优先搜索找出G图中s顶点的所有相邻顶点    public BreadthFirstSearch(Graph G, int s) &#123;        this.marked = new boolean[G.V()];        this.count=0;        this.waitSearch = new Queue&lt;Integer&gt;();        bfs(G,s);    &#125;    //使用广度优先搜索找出G图中v顶点的所有相邻顶点    private void bfs(Graph G, int v) &#123;        //把当前顶点v标识为已搜索        marked[v] = true;        //让顶点v进入队列，待搜索        waitSearch.enqueue(v);        //通过循环，如果队列不为空，则从队列中弹出一个待搜索的顶点进行搜索        while(!waitSearch.isEmpty())&#123;            //弹出一个待搜索的顶点            Integer wait = waitSearch.dequeue();            //遍历wait顶点的邻接表            for (Integer w : G.adj(wait)) &#123;                if (!marked[w])&#123;                    bfs(G,w);                &#125;            &#125;        &#125;        //让相通的顶点+1；        count++;    &#125;    //判断w顶点与s顶点是否相通    public boolean marked(int w) &#123;        return marked[w];    &#125;    //获取与顶点s相通的所有顶点的总数    public int count() &#123;        return count;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class BreadthFirstSearchTest &#123;    public static void main(String[] args) &#123;        //准备Graph对象        Graph G = new Graph(13);        G.addEdge(0,5);        G.addEdge(0,1);        G.addEdge(0,2);        G.addEdge(0,6);        G.addEdge(5,3);        G.addEdge(5,4);        G.addEdge(3,4);        G.addEdge(4,6);        G.addEdge(7,8);        G.addEdge(9,11);        G.addEdge(9,10);        G.addEdge(9,12);        G.addEdge(11,12);        //准备广度优先搜索对象        BreadthFirstSearch search = new BreadthFirstSearch(G, 0);        //测试与某个顶点相通的顶点数量        int count = search.count();        System.out.println(&quot;与起点0相通的顶点的数量为:&quot;+count);        //测试某个顶点与起点是否相同        boolean marked1 = search.marked(5);        System.out.println(&quot;顶点5和顶点0是否相通：&quot;+marked1);        boolean marked2 = search.marked(7);        System.out.println(&quot;顶点7和顶点0是否相通：&quot;+marked2);    &#125;&#125;</code></pre><hr><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><hr><pre><code>public class Traffic_Project_Test2 &#123;    public static void main(String[] args) throws Exception&#123;        //构建一个缓冲读取流BufferedReader        BufferedReader br = new BufferedReader(new InputStreamReader(Traffic_Project_Test2.class.getClassLoader().getResourceAsStream(&quot;traffic_project.txt&quot;)));        //读取第一行数据20        int totalNumber = Integer.parseInt(br.readLine());        //构建一个Graph对象        Graph G = new Graph(totalNumber);        //读取第二行数据7        int roadNumber = Integer.parseInt(br.readLine());        //循环读取有限次(7)，读取已经修建好的道路        for (int i = 1;i&lt;=roadNumber;i++)&#123;            String road = br.readLine();//&quot;0 1&quot;            String[] str = road.split(&quot; &quot;);            int v = Integer.parseInt(str[0]);            int w = Integer.parseInt(str[1]);            //调用图的addEdge方法，把边添加到图中，表示已经修建好的道路            G.addEdge(v,w);        &#125;        //构建一个深度优先搜索对象，起点设置为顶点9        DepthFirstSearch search = new DepthFirstSearch(G, 9);        //调用marked方法，判断8顶点和10顶点是否与起点9相通        System.out.println(&quot;顶点8和顶点9是否相通：&quot;+search.marked(8));        System.out.println(&quot;顶点10和顶点9是否相通：&quot;+search.marked(10));    &#125;&#125;</code></pre><hr><h3 id="路径查找"><a href="#路径查找" class="headerlink" title="路径查找"></a>路径查找</h3><hr><pre><code>public class DepthFirstPaths &#123;    //索引代表顶点，值表示当前顶点是否已经被搜索    private boolean[] marked;    //起点    private int s;    //索引代表顶点，值代表从起点s到当前顶点路径上的最后一个顶点    private int[] edgeTo;    //构造深度优先搜索对象，使用深度优先搜索找出G图中起点为s的所有路径    public DepthFirstPaths(Graph G, int s)&#123;        //初始化marked数组        this.marked = new boolean[G.V()];        //初始化起点        this.s = s;        //初始化edgeTo数组        this.edgeTo = new int[G.V()];        dfs(G,s);    &#125;    //使用深度优先搜索找出G图中v顶点的所有相邻顶点    private void dfs(Graph G, int v)&#123;        //把v表示为已搜索        marked[v] = true;        //遍历顶点v的邻接表，拿到每一个相邻的顶点，继续递归搜索        for (Integer w : G.adj(v)) &#123;            //如果顶点w没有被搜索，则继续递归搜索            if (!marked[w])&#123;                edgeTo[w] = v;//到达顶点w的路径上的最后一个顶点是v                dfs(G,w);            &#125;        &#125;    &#125;    //判断w顶点与s顶点是否存在路径    public boolean hasPathTo(int v)&#123;        return marked[v];    &#125;    //找出从起点s到顶点v的路径(就是该路径经过的顶点)    public Stack&lt;Integer&gt; pathTo(int v)&#123;        if (!hasPathTo(v))&#123;            return null;        &#125;        //创建栈对象，保存路径中的所有顶点        Stack&lt;Integer&gt; path = new Stack&lt;&gt;();        //通过循环，从顶点v开始，一直往前找，到找到起点为止        for (int x = v; x!=s;x = edgeTo[x])&#123;            path.push(x);        &#125;        //把起点s放到栈中        path.push(s);        return path;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class DepthFirstPathsTest &#123;    public static void main(String[] args) throws Exception&#123;        //构建缓冲读取流BufferedReader        BufferedReader br = new BufferedReader(new InputStreamReader(DepthFirstPathsTest.class.getClassLoader().getResourceAsStream(&quot;road_find.txt&quot;)));        //读取第一行数据6        int total = Integer.parseInt(br.readLine());        //根据第一行数据构建一副图Graph        Graph G = new Graph(total);        //读取第二行数据8        int edgeNumbers = Integer.parseInt(br.readLine());        //继续通过循环读取每一条边关联的两个顶点，调用addEdge方法，添加边        for (int i = 1;i&lt;=edgeNumbers;i++)&#123;            String edge = br.readLine();//0 1            String[] str = edge.split(&quot; &quot;);            int v = Integer.parseInt(str[0]);            int w = Integer.parseInt(str[1]);            G.addEdge(v,w);        &#125;        //构建路径查找对象，并设置起点为0        DepthFirstPaths paths = new DepthFirstPaths(G, 0);        //调用 pathTo(4)，找到从起点0到终点4的路径，返回Stack        Stack&lt;Integer&gt; path = paths.pathTo(4);        StringBuilder sb = new StringBuilder();        //遍历栈对象        for (Integer v : path) &#123;            sb.append(v+&quot;-&quot;);        &#125;        sb.deleteCharAt(sb.length()-1);        System.out.println(sb);    &#125;&#125;</code></pre><hr><h3 id="有向图定义"><a href="#有向图定义" class="headerlink" title="有向图定义"></a>有向图定义</h3><hr><p>有向图是一副具有方向性的图，是由一组顶点和一组有方向的边组成的，每条方向的边都连着一对有序的顶点。</p><p>出度：由某个顶点指出的边的个数称为该顶点的出度。</p><p>入度：指向某个顶点的边的个数称为该顶点的入度。</p><p>有向路径：由一系列顶点组成，对于其中的每个顶点都存在一条有向边，从它指向序列中的下一个顶点。</p><p>有向环：一条至少含有一条边，且起点和终点相同的有向路径。</p><p>一副有向图中两个顶点v和w可能存在以下四种关系：没有边相连；存在从v到w的边v—&gt;w;存在从w到v的边w—&gt;v;既存在w到v的边，也存在v到w的边，即双向连接。</p><hr><h3 id="有向图实现"><a href="#有向图实现" class="headerlink" title="有向图实现"></a>有向图实现</h3><hr><pre><code>public class Digraph &#123;    //顶点数目    private final int V;    //边的数目    private int E;    //邻接表    private Queue&lt;Integer&gt;[] adj;    public Digraph(int V)&#123;        //初始化顶点数量        this.V = V;        //初始化边的数量        this.E = 0;        //初始化邻接表        this.adj = new Queue[V];        for (int i = 0; i &lt; adj.length; i++) &#123;            adj[i] = new Queue&lt;Integer&gt;();        &#125;    &#125;    //获取顶点数目    public int V()&#123;        return V;    &#125;    //获取边的数目    public int E()&#123;        return E;    &#125;    //向有向图中添加一条边 v-&gt;w    public void addEdge(int v, int w) &#123;        //只需要让顶点w出现在顶点v的邻接表中，因为边是有方向的，最终，顶点v的邻接表中存储的相邻顶点的含义是：  v-&gt;其他顶点        adj[v].enqueue(w);        E++;    &#125;    //获取由v指出的边所连接的所有顶点    public Queue&lt;Integer&gt; adj(int v)&#123;        return adj[v];    &#125;    //该图的反向图    private Digraph reverse()&#123;        //创建有向图对象        Digraph r = new Digraph(V);        for (int v = 0;v&lt;V;v++)&#123;            //获取由该顶点v指出的所有边            for (Integer w : adj[v]) &#123;//原图中表示的是由顶点v-&gt;w的边                r.addEdge(w,v);//w-&gt;v            &#125;        &#125;        return r;    &#125;&#125;</code></pre><hr><h3 id="拓扑排序-检测有向图中的环"><a href="#拓扑排序-检测有向图中的环" class="headerlink" title="拓扑排序-检测有向图中的环"></a>拓扑排序-检测有向图中的环</h3><hr><p>拓扑排序：给定一副有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素，此时就可以明确的表示出每个顶点的优先级。</p><p>如果我们要使用拓扑排序解决优先级问题，首先得保证图中没有环的存在。</p><p><code>onStack[]</code> 布尔数组，索引为图的顶点，当我们深度搜索时：在如果当前顶点正在搜索，则把对应的onStack数组中的值改为true，标识进栈；如果当前顶点搜索完毕，则把对应的onStack数组中的值改为false，标识出栈；如果即将要搜索某个顶点，但该顶点已经在栈中，则图中有环。</p><p>代码实现</p><pre><code>public class DirectedCycle &#123;    //索引代表顶点，值表示当前顶点是否已经被搜索    private boolean[] marked;    //记录图中是否有环    private boolean hasCycle;    //索引代表顶点，使用栈的思想，记录当前顶点有没有已经处于正在搜索的有向路径上    private boolean[] onStack;    //创建一个检测环对象，检测图G中是否有环    public DirectedCycle(Digraph G)&#123;        //初始化marked数组        this.marked = new boolean[G.V()];        //初始化hasCycle        this.hasCycle = false;        //初始化onStack数组        this.onStack = new boolean[G.V()];        //找到图中每一个顶点，让每一个顶点作为入口，调用一次dfs进行搜索        for (int v =0; v&lt;G.V();v++)&#123;            //判断如果当前顶点还没有搜索过，则调用dfs进行搜索            if (!marked[v])&#123;                dfs(G,v);            &#125;        &#125;    &#125;    //基于深度优先搜索，检测图G中是否有环    private void dfs(Digraph G, int v)&#123;        //把顶点v表示为已搜索        marked[v] = true;        //把当前顶点进栈        onStack[v] = true;        //进行深度搜索        for (Integer w : G.adj(v)) &#123;            //判断如果当前顶点w没有被搜索过，则继续递归调用dfs方法完成深度优先搜索            if (!marked[w])&#123;                dfs(G,w);            &#125;            //判断当前顶点w是否已经在栈中，如果已经在栈中，证明当前顶点之前处于正在搜索的状态，那么现在又要搜索一次，证明检测到环了            if (onStack[w])&#123;                hasCycle = true;                return;            &#125;        &#125;        //把当前顶点出栈        onStack[v] = false;    &#125;    //判断当前有向图G中是否有环    public boolean hasCycle()&#123;        return hasCycle;    &#125;&#125;</code></pre><hr><h3 id="拓扑排序-基于深度优先的顶点排序"><a href="#拓扑排序-基于深度优先的顶点排序" class="headerlink" title="拓扑排序-基于深度优先的顶点排序"></a>拓扑排序-基于深度优先的顶点排序</h3><hr><p>栈reversePost用来存储顶点，当我们深度搜索图时，每搜索完毕一个顶点，把该顶点放入到reversePost中，这样就可以实现顶点排序。</p><p>代码实现：</p><pre><code>public class DepthFirstOrder &#123;    //索引代表顶点，值表示当前顶点是否已经被搜索    private boolean[] marked;    //使用栈，存储顶点序列    private Stack&lt;Integer&gt; reversePost;    //创建一个检测环对象，检测图G中是否有环    public DepthFirstOrder(Digraph G)&#123;        //初始化marked数组        this.marked = new boolean[G.V()];        //初始化reversePost栈        this.reversePost = new Stack&lt;Integer&gt;();        //遍历图中的每一个顶点，让每个顶点作为入口，完成一次深度优先搜索        for (int v = 0;v&lt;G.V();v++)&#123;            if (!marked[v])&#123;                dfs(G,v);            &#125;        &#125;    &#125;    //基于深度优先搜索，把顶点排序    private void dfs(Digraph G, int v)&#123;        //标记当前v已经被搜索        marked[v] = true;        //通过循环深度搜索顶点v        for (Integer w : G.adj(v)) &#123;            //如果当前顶点w没有搜索，则递归调用dfs进行搜索            if (!marked[w])&#123;                dfs(G,w);            &#125;        &#125;        //让顶点v进栈        reversePost.push(v);    &#125;    //获取顶点线性序列    public Stack&lt;Integer&gt;  reversePost()&#123;        return reversePost;    &#125;&#125;</code></pre><hr><h3 id="拓扑排序实现"><a href="#拓扑排序实现" class="headerlink" title="拓扑排序实现"></a>拓扑排序实现</h3><hr><pre><code>public class TopoLogical &#123;    //顶点的拓扑排序    private Stack&lt;Integer&gt; order;    //构造拓扑排序对象    public TopoLogical(Digraph G) &#123;        //创建一个检测有向环的对象        DirectedCycle cycle = new DirectedCycle(G);        //判断G图中有没有环，如果没有环，则进行顶点排序：创建一个顶点排序对象        if (!cycle.hasCycle())&#123;            DepthFirstOrder depthFirstOrder = new DepthFirstOrder(G);            order = depthFirstOrder.reversePost();        &#125;    &#125;    //判断图G是否有环    private boolean isCycle()&#123;        return order==null;    &#125;    //获取拓扑排序的所有顶点    public Stack&lt;Integer&gt;  order()&#123;        return order;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class TopoLogicalTest &#123;    public static void main(String[] args) &#123;        //准备有向图        Digraph digraph = new Digraph(6);        digraph.addEdge(0,2);        digraph.addEdge(0,3);        digraph.addEdge(2,4);        digraph.addEdge(3,4);        digraph.addEdge(4,5);        digraph.addEdge(1,3);        //通过TopoLogical对象堆有向图中的顶点进行排序        TopoLogical topoLogical = new TopoLogical(digraph);        //获取顶点的线性序列进行打印        Stack&lt;Integer&gt; order = topoLogical.order();        StringBuilder sb = new StringBuilder();        for (Integer w : order) &#123;            sb.append(w+&quot;-&gt;&quot;);        &#125;        String str = sb.toString();        int index = str.lastIndexOf(&quot;-&gt;&quot;);        str = str.substring(0,index);        System.out.println(str);    &#125;&#125;</code></pre><hr><h3 id="加权无向图"><a href="#加权无向图" class="headerlink" title="加权无向图"></a>加权无向图</h3><hr><p>加权无向图中的边我们就不能简单的使用v-w两个顶点表示了，而必须要给边关联一个权重值，因此我们可以使用对象来描述一条边。</p><p>边的实现：</p><pre><code>public class Edge implements Comparable&lt;Edge&gt; &#123;    private final int v;//顶点一    private final int w;//顶点二    private final double weight;//当前边的权重    //通过顶点v和w，以及权重weight值构造一个边对象    public Edge(int v, int w, double weight) &#123;        this.v = v;        this.w = w;        this.weight = weight;    &#125;    //获取边的权重值    public double weight()&#123;        return weight;    &#125;    //获取边上的一个点    public int either()&#123;        return v;    &#125;    //获取边上除了顶点vertex外的另外一个顶点    public int other(int vertex)&#123;        if (vertex==v)&#123;            return w;        &#125;else&#123;            return v;        &#125;    &#125;    @Override    public int compareTo(Edge that) &#123;        //使用一个遍历记录比较的结果        int cmp;        if (this.weight()&gt;that.weight())&#123;            //如果当前边的权重值大，则让cmp=1；            cmp = 1;        &#125;else if (this.weight()&lt;that.weight())&#123;            //如果当前边的权重值小，则让cmp=-1；            cmp=-1;        &#125;else&#123;            //如果当前边的权重值和that边的权重值一样大，则让cmp=0            cmp = 0;        &#125;        return cmp;    &#125;&#125;</code></pre><p>加权无向图的实现</p><pre><code>public class EdgeWeightedGraph &#123;    //顶点总数    private final int V;    //边的总数    private int E;    //邻接表    private Queue&lt;Edge&gt;[] adj;    //创建一个含有V个顶点的空加权无向图    public EdgeWeightedGraph(int V) &#123;        //初始化顶点数量        this.V = V;        //初始化边的数量        this.E = 0;        //初始化邻接表        this.adj = new Queue[V];        for (int i = 0; i &lt; adj.length; i++) &#123;            adj[i] = new Queue&lt;Edge&gt;();        &#125;    &#125;    //获取图中顶点的数量    public int V() &#123;        return V;    &#125;    //获取图中边的数量    public int E() &#123;        return E;    &#125;    //向加权无向图中添加一条边e    public void addEdge(Edge e) &#123;        //需要让边e同时出现在e这个边的两个顶点的邻接表中        int v = e.either();        int w = e.other(v);        adj[v].enqueue(e);        adj[w].enqueue(e);        //边的数量+1        E++;    &#125;    //获取和顶点v关联的所有边    public Queue&lt;Edge&gt; adj(int v) &#123;        return adj[v];    &#125;    //获取加权无向图的所有边    public Queue&lt;Edge&gt; edges() &#123;        //创建一个队列对象，存储所有的边        Queue&lt;Edge&gt; allEdges = new Queue&lt;&gt;();        //遍历图中的每一个顶点，找到该顶点的邻接表，邻接表中存储了该顶点关联的每一条边        //因为这是无向图，所以同一条边同时出现在了它关联的两个顶点的邻接表中，需要让一条边只记录一次；        for(int v =0;v&lt;V;v++)&#123;            //遍历v顶点的邻接表，找到每一条和v关联的边            for (Edge e : adj(v)) &#123;                if (e.other(v)&lt;v)&#123;                    allEdges.enqueue(e);                &#125;            &#125;        &#125;        return allEdges;    &#125;&#125;</code></pre><hr><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><hr><p>图的生成树是它的一棵含有其所有顶点的无环连通子图，一副加权无向图的最小生成树它的一棵权值(树中所有边的权重之和)最小的生成树。</p><p>树的性质：用一条边接树中的任意两个顶点都会产生一个新的环；从树中删除任意一条边，将会得到两棵独立的树。</p><p>切分：将图的所有顶点按照某些规则分为两个非空且没有交集的集合。</p><p>横切边：连接两个属于不同集合的顶点的边称之为横切边。</p><p>切分定理：在一副加权图中，给定任意的切分，它的横切边中的权重最小者必然属于图中的最小生成树。注意:一次切分产生的多个横切边中，权重最小的边不一定是所有横切边中唯一属于图的最小生成树的边。</p><p><strong>贪心算法</strong>是计算图的最小生成树的基础算法，它的基本原理就是切分定理，使用切分定理找到最小生成树的一条边，不断的重复直到找到最小生成树的所有边。如果图有V个顶点，那么需要找到V-1条边，就可以表示该图的最小生成树。</p><hr><h3 id="最小生成树Prim算法"><a href="#最小生成树Prim算法" class="headerlink" title="最小生成树Prim算法"></a>最小生成树Prim算法</h3><hr><p><strong>Prim算法</strong>的切分规则：把最小生成树中的顶点看做是一个集合，把不在最小生成树中的顶点看做是另外一个集合。实现：</p><pre><code>public class PrimMST &#123;    //索引代表顶点，值表示当前顶点和最小生成树之间的最短边    private Edge[] edgeTo;    //索引代表顶点，值表示当前顶点和最小生成树之间的最短边的权重    private double[] distTo;    //索引代表顶点，如果当前顶点已经在树中，则值为true，否则为false    private boolean[] marked;    //存放树中顶点与非树中顶点之间的有效横切边    private IndexMinPriorityQueue&lt;Double&gt; pq;    //根据一副加权无向图，创建最小生成树计算对象    public PrimMST(EdgeWeightedGraph G) &#123;       //初始化edgeTo        this.edgeTo = new Edge[G.V()];        //初始化distTo        this.distTo = new double[G.V()];        for (int i = 0; i &lt; distTo.length; i++) &#123;            distTo[i] = Double.POSITIVE_INFINITY;        &#125;        //初始化marked        this.marked = new boolean[G.V()];        //初始化pq        pq = new IndexMinPriorityQueue&lt;Double&gt;(G.V());        //默认让顶点0进入到树中，但是树中只有一个顶点0，因此，0顶点默认没有和其他的顶点相连，所以让distTo对应位置处的值存储0.0        distTo[0] = 0.0;        pq.insert(0,0.0);        //遍历索引最小优先队列，拿到最小和N切边对应的顶点，把该顶点加入到最小生成树中        while (!pq.isEmpty())&#123;            visit(G,pq.delMin());        &#125;    &#125;    //将顶点v添加到最小生成树中，并且更新数据    private void visit(EdgeWeightedGraph G, int v) &#123;        //把顶点v添加到最小生成树中        marked[v] = true;        //更新数据        for (Edge e : G.adj(v)) &#123;            //获取e边的另外一个顶点(当前顶点是v)            int w = e.other(v);            //判断另外一个顶点是不是已经在树中，如果在树中，则不做任何处理，如果不再树中，更新数据            if (marked[w])&#123;                continue;            &#125;            //判断边e的权重是否小于从w顶点到树中已经存在的最小边的权重；            if (e.weight()&lt;distTo[w])&#123;                //更新数据                edgeTo[w] = e;                distTo[w] = e.weight();                if (pq.contains(w))&#123;                    pq.changeItem(w,e.weight());                &#125;else&#123;                    pq.insert(w,e.weight());                &#125;            &#125;        &#125;    &#125;    //获取最小生成树的所有边    public Queue&lt;Edge&gt; edges() &#123;        //创建队列对象        Queue&lt;Edge&gt; allEdges = new Queue&lt;&gt;();        //遍历edgeTo数组，拿到每一条边，如果不为null，则添加到队列中        for (int i = 0; i &lt; edgeTo.length; i++) &#123;            if (edgeTo[i]!=null)&#123;                allEdges.enqueue(edgeTo[i]);            &#125;        &#125;        return allEdges;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class PrimMSTTest &#123;    public static void main(String[] args) throws Exception&#123;        //准备一副加权无向图        BufferedReader br = new BufferedReader(new InputStreamReader(PrimMSTTest.class.getClassLoader().getResourceAsStream(&quot;min_create_tree_test.txt&quot;)));        int total = Integer.parseInt(br.readLine());        EdgeWeightedGraph G = new EdgeWeightedGraph(total);        int edgeNumbers = Integer.parseInt(br.readLine());        for (int e = 1;e&lt;=edgeNumbers;e++)&#123;            String line = br.readLine();//4 5 0.35            String[] strs = line.split(&quot; &quot;);            int v = Integer.parseInt(strs[0]);            int w = Integer.parseInt(strs[1]);            double weight = Double.parseDouble(strs[2]);            //构建加权无向边            Edge edge = new Edge(v, w, weight);            G.addEdge(edge);        &#125;        //创建一个PrimMST对象，计算加权无向图中的最小生成树        PrimMST primMST = new PrimMST(G);        //获取最小生成树中的所有边        Queue&lt;Edge&gt; edges = primMST.edges();        //遍历打印所有的边        for (Edge e : edges) &#123;            int v = e.either();            int w = e.other(v);            double weight = e.weight();            System.out.println(v+&quot;-&quot;+w+&quot; :: &quot;+weight);        &#125;    &#125;&#125;</code></pre><hr><h3 id="最小生成树kruskal算法"><a href="#最小生成树kruskal算法" class="headerlink" title="最小生成树kruskal算法"></a>最小生成树kruskal算法</h3><hr><p><strong>kruskal算法</strong>是按照边的权重(从小到大)处理它们，将边加入最小生成树中，加入的边不会与已经加入最小生成树的边构成环，直到树中含有V-1条边为止。</p><p>kruskal算法和prim算法的区别：Prim算法是一条边一条边的构造最小生成树，每一步都为一棵树添加一条边。kruskal算法构造最小生成树的时候<br>也是一条边一条边地构造，但它的切分规则是不一样的。它每一次寻找的边会连接一片森林中的两棵树。如果一副加权无向图由V个顶点组成，初始化情况下每个顶点都构成一棵独立的树，则V个顶点对应V棵树，组成一片森林，kruskal算法每一次处理都会将两棵树合并为一棵树，直到整个森林中只剩一棵树为止。</p><p>取出权重最小的边，并得到该边关联的两个顶点v和w，通过uf.connect(v,w)判断v和w是否已经连通，如果连通，则证明这两个顶点在同一棵树中，那么就不能再把这条边添加到最小生成树中，因为在一棵树的任意两个顶点上添加一条边，都会形成环，而最小生成树不能有环的存在，如果不连通，则通过uf.connect(v,w)把顶点v所在的树和顶点w所在的树合并成一棵树，并把这条边加入到mst队列中，这样如果把所有的边处理完，最终mst中存储的就是最小生树的所有边。</p><p><strong>kruskal算法</strong>实现:</p><pre><code>public class KruskalMST &#123;    //保存最小生成树的所有边    private Queue&lt;Edge&gt; mst;    //索引代表顶点，使用uf.connect(v,w)可以判断顶点v和顶点w是否在同一颗树中，使用uf.union(v,w)可以把顶点v所在的树和顶点w所在的树合并    private UF_Tree_Weighted uf;    //存储图中所有的边，使用最小优先队列，对边按照权重进行排序    private MinPriorityQueue&lt;Edge&gt; pq;    //根据一副加权无向图，创建最小生成树计算对象    public KruskalMST(EdgeWeightedGraph G) &#123;        //初始化mst        this.mst = new Queue&lt;Edge&gt;();        //初始化uf        this.uf = new UF_Tree_Weighted(G.V());        //初始化pq        this.pq = new MinPriorityQueue&lt;&gt;(G.E()+1);        //把图中所有的边存储到pq中        for (Edge e : G.edges()) &#123;            pq.insert(e);        &#125;        //遍历pq队列，拿到最小权重的边，进行处理        while(!pq.isEmpty() &amp;&amp; mst.size()&lt;G.V()-1)&#123;            //找到权重最小的边            Edge e = pq.delMin();            //找到该边的两个顶点            int v = e.either();            int w = e.other(v);            //判断这两个顶点是否已经在同一颗树中，如果在同一颗树中，则不对该边做处理，如果不在一棵树中，则让这两个顶点属于的两棵树合并成一棵树            if (uf.connected(v,w))&#123;                continue;            &#125;            uf.union(v,w);            //让边e进入到mst队列中            mst.enqueue(e);        &#125;    &#125;    //获取最小生成树的所有边    public Queue&lt;Edge&gt; edges() &#123;        return mst;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class KruskalMSTTest &#123;    public static void main(String[] args) throws Exception&#123;        //准备一副加权无向图        BufferedReader br = new BufferedReader(new InputStreamReader(KruskalMSTTest.class.getClassLoader().getResourceAsStream(&quot;min_create_tree_test.txt&quot;)));        int total = Integer.parseInt(br.readLine());        EdgeWeightedGraph G = new EdgeWeightedGraph(total);        int edgeNumbers = Integer.parseInt(br.readLine());        for (int e = 1;e&lt;=edgeNumbers;e++)&#123;            String line = br.readLine();//4 5 0.35            String[] strs = line.split(&quot; &quot;);            int v = Integer.parseInt(strs[0]);            int w = Integer.parseInt(strs[1]);            double weight = Double.parseDouble(strs[2]);            //构建加权无向边            Edge edge = new Edge(v, w, weight);            G.addEdge(edge);        &#125;        //创建一个KruskalMST对象，计算加权无向图中的最小生成树        KruskalMST primMST = new KruskalMST(G);        //获取最小生成树中的所有边        Queue&lt;Edge&gt; edges = primMST.edges();        //遍历打印所有的边        for (Edge e : edges) &#123;            int v = e.either();            int w = e.other(v);            double weight = e.weight();            System.out.println(v+&quot;-&quot;+w+&quot; :: &quot;+weight);        &#125;    &#125;&#125;</code></pre><hr><h3 id="加权有向图"><a href="#加权有向图" class="headerlink" title="加权有向图"></a>加权有向图</h3><hr><p>有向图边的表示：</p><pre><code>public class DirectedEdge &#123;    private final int v;//起点    private final int w;//终点    private final double weight;//当前边的权重    //通过顶点v和w，以及权重weight值构造一个边对象    public DirectedEdge(int v, int w, double weight) &#123;        this.v = v;        this.w = w;        this.weight = weight;    &#125;    //获取边的权重值    public double weight()&#123;        return weight;    &#125;    //获取有向边的起点    public int from()&#123;        return v;    &#125;    //获取有向边的终点    public int to()&#123;        return w;    &#125;&#125;</code></pre><p>有向图的实现：</p><pre><code>public class EdgeWeightedDigraph &#123;    //顶点总数    private final int V;    //边的总数    private int E;    //邻接表    private Queue&lt;DirectedEdge&gt;[] adj;    //创建一个含有V个顶点的空加权有向图    public EdgeWeightedDigraph(int V) &#123;        //初始化顶点数量        this.V = V;        //初始化边的数量        this.E = 0;        //初始化邻接表        this.adj = new Queue[V];        for (int i = 0; i &lt; adj.length; i++) &#123;            adj[i] = new Queue&lt;DirectedEdge&gt;();        &#125;    &#125;    //获取图中顶点的数量    public int V() &#123;        return V;    &#125;    //获取图中边的数量    public int E() &#123;        return E;    &#125;    //向加权有向图中添加一条边e    public void addEdge(DirectedEdge e) &#123;        //边e是有方向的，所以只需要让e出现在起点的邻接表中即可        int v = e.from();        adj[v].enqueue(e);        E++;    &#125;    //获取由顶点v指出的所有的边    public Queue&lt;DirectedEdge&gt; adj(int v) &#123;        return adj[v];    &#125;    //获取加权有向图的所有边    public Queue&lt;DirectedEdge&gt; edges() &#123;        //遍历图中的每一个顶点，得到该顶点的邻接表，遍历得到每一条边，添加到队列中返回即可        Queue&lt;DirectedEdge&gt; allEdges = new Queue&lt;&gt;();        for (int v = 0;v&lt;V;v++)&#123;            for (DirectedEdge edge : adj[v]) &#123;                allEdges.enqueue(edge);            &#125;        &#125;        return allEdges;    &#125;&#125;</code></pre><hr><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><hr><p>最短路径定义及性质定义：在一副加权有向图中，从顶点s到顶点t的最短路径是所有从顶点s到顶点t的路径中总权重最小的那条路径。</p><p>最短路径树：给定一副加权有向图和一个顶点s，以s为起点的一棵最短路径树是图的一副子图，它包含顶点s以及从s可达的所有顶点。这棵有向树的根结点为s，树的每条路径都是有向图中的一条最短路径。</p><p>边的松弛：放松边v-&gt;w意味着检查从s到w的最短路径是否先从s到v，然后再从v到w。</p><p>顶点的松弛：顶点的松弛是基于边的松弛完成的，只需要把某个顶点指出的所有边松弛，那么该顶点就松弛完毕。例如要松弛顶点v，只需要遍历v的邻接表，把每一条边都松弛，那么顶点v就松弛了。</p><p>Disjstra算法的实现和Prim算法很类似，构造最短路径树的每一步都是向这棵树中添加一条新的边，而这条新的边是有效横切边pq队列中的权重最小的边。</p><pre><code>public class DijkstraSP &#123;    //索引代表顶点，值表示从顶点s到当前顶点的最短路径上的最后一条边    private DirectedEdge[] edgeTo;    //索引代表顶点，值从顶点s到当前顶点的最短路径的总权重    private double[] distTo;    //存放树中顶点与非树中顶点之间的有效横切边    private IndexMinPriorityQueue&lt;Double&gt; pq;    //根据一副加权有向图G和顶点s，创建一个计算顶点为s的最短路径树对象    public DijkstraSP(EdgeWeightedDigraph G, int s)&#123;        //初始化edgeTo        this.edgeTo = new DirectedEdge[G.V()];        //初始化distTo        this.distTo = new double[G.V()];        for (int i = 0; i &lt; distTo.length; i++) &#123;            distTo[i] = Double.POSITIVE_INFINITY;        &#125;        //初始化pq        this.pq = new IndexMinPriorityQueue&lt;&gt;(G.V());        //找到图G中以顶点s为起点的最短路径树        //默认让顶点s进入到最短路径树中        distTo[s] = 0.0;        pq.insert(s,0.0);        //遍历pq        while(!pq.isEmpty())&#123;            relax(G,pq.delMin());        &#125;    &#125;    //松弛图G中的顶点v    private void relax(EdgeWeightedDigraph G, int v)&#123;        for (DirectedEdge edge : G.adj(v)) &#123;            //获取到该边的终点w            int w = edge.to();            //通过松弛技术，判断从起点s到顶点w的最短路径是否需要先从顶点s到顶点v，然后再由顶点v到顶点w            if (distTo(v)+edge.weight()&lt;distTo(w))&#123;                distTo[w] = distTo[v]+edge.weight();                edgeTo[w] = edge;                //判断pq中是否已经存在顶点w，如果存在，则更新权重，如果不存在，则直接添加                if (pq.contains(w))&#123;                    pq.changeItem(w,distTo(w));                &#125;else&#123;                    pq.insert(w,distTo(w));                &#125;            &#125;        &#125;    &#125;    //获取从顶点s到顶点v的最短路径的总权重    public double distTo(int v)&#123;        return distTo[v];    &#125;    //判断从顶点s到顶点v是否可达    public boolean hasPathTo(int v)&#123;        return distTo[v]&lt;Double.POSITIVE_INFINITY;    &#125;    //查询从起点s到顶点v的最短路径中所有的边    public Queue&lt;DirectedEdge&gt; pathTo(int v)&#123;        //判断从顶点s到顶点v是否可达，如果不可达，直接返回null        if (!hasPathTo(v))&#123;            return null;        &#125;        //创建队列对象        Queue&lt;DirectedEdge&gt; allEdges = new Queue&lt;&gt;();        while (true)&#123;            DirectedEdge e = edgeTo[v];            if (e==null)&#123;                break;            &#125;            allEdges.enqueue(e);            v = e.from();        &#125;        return allEdges;    &#125;&#125;</code></pre><p>测试</p><pre><code>public class DijkstraSPTest &#123;    public static void main(String[] args) throws Exception&#123;        //创建一副加权有向图        BufferedReader br = new BufferedReader(new InputStreamReader(DijkstraSPTest.class.getClassLoader().getResourceAsStream(&quot;min_route_test.txt&quot;)));        int total = Integer.parseInt(br.readLine());        EdgeWeightedDigraph G = new EdgeWeightedDigraph(total);        int edgeNumbers = Integer.parseInt(br.readLine());        for(int i=1;i&lt;=edgeNumbers;i++)&#123;            String line = br.readLine();//4 5 0.35            String[] strs = line.split(&quot; &quot;);            int v = Integer.parseInt(strs[0]);            int w = Integer.parseInt(strs[1]);            double weight = Double.parseDouble(strs[2]);            DirectedEdge e = new DirectedEdge(v, w, weight);            G.addEdge(e);        &#125;        //创建DijkstraSP对象，查找最短路径树        DijkstraSP dijkstraSP = new DijkstraSP(G, 0);        //查找最短路径,0-&gt;6的最短路径        Queue&lt;DirectedEdge&gt; edges = dijkstraSP.pathTo(6);        //遍历打印        for (DirectedEdge edge : edges) &#123;            System.out.println(edge.from()+&quot;-&gt;&quot;+edge.to()+&quot; ：： &quot;+edge.weight());        &#125;    &#125;&#125;</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2020/07/04/38.git/"/>
    <url>/2020/07/04/38.git/</url>
    
    <content type="html"><![CDATA[<h2 id="创建和回退"><a href="#创建和回退" class="headerlink" title="创建和回退"></a>创建和回退</h2><hr><p>下载地址</p><pre><code>https://git-scm.com/download</code></pre><p>git分为工作区、暂存区、版本库。</p><p>使用如下命令可以查看版本记录：</p><pre><code>git log//简短loggit log --pretty=onelinegit log --pretty=oneline --graph</code></pre><p>查看我们的操作记录，查看版本号：</p><pre><code>git reflog</code></pre><p>使用如下命令查看当前工作树的状态：</p><pre><code>git status</code></pre><p>创建仓库执行命令：</p><pre><code>git init</code></pre><p>使用如下两条命令可以创建一个版本：</p><pre><code>git add 文件名.格式git commit –m &apos;版本提交说明1&apos;</code></pre><p>撤销工作区修改可以使用(没使用add)： </p><pre><code>git checkout -- 文件名.格式</code></pre><p>把暂存区的修改撤销掉，重新放回工作区(使用了add，没使用commit):</p><pre><code>git reset HEAD 文件名.格式</code></pre><p>现在若想回到某一个版本，可以使用如下命令(使用了commit)：</p><pre><code>git reset --hard HEAD^//或者回退1个/100个版本git reset --hard HEAD~1git reset --hard HEAD~100</code></pre><p>假如我们现在又想回到回退前的版本，可以使用如下命令：</p><pre><code>git reset --hard 版本号</code></pre><p>对比工作区和某个版本文件的不同：</p><pre><code>git diff HEAD -- 文件名.格式</code></pre><p>对比两个版本间文件的不同：</p><pre><code>git diff HEAD HEAD^ -- 文件名.格式</code></pre><p>删错了，可以直接使用(还在工作区，没使用add):</p><pre><code>git checkout –- 文件名.格式</code></pre><p>确实要从版本库中删除文件:</p><pre><code>git rm 文件名.格式git commit –m &apos;版本提交说明&apos;</code></pre><hr><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><hr><p>截止到目前只有一条时间线，在git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交0的，所以，HEAD指向的就是当前分支。</p><p>查看当前有几个分支并且看到在哪个分支下工作：</p><pre><code>git branch</code></pre><p>创建一个分支dev,并切换到其上进行工作:</p><pre><code>git checkout -b dev//只创建分支git branch dev</code></pre><p>切换回master分支：</p><pre><code>git checkout master</code></pre><p>当前在master分支，把dev分支的工作成果合并到master分支上：</p><pre><code>git merge dev//情况一：Fast-forward,这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快//情况二：冲突了，先处理冲突文件，在add、commit提交冲突文件。//情况三：快速合并不能成功而且合并时没有冲突，这个时候会合并之后并做一次新的提交，ctrl+x</code></pre><p>强制禁用<code>fast-forward</code>模式:</p><pre><code>git merge --no-ff -m &apos;版本提交说明&apos; dev</code></pre><p>合并完成后，就可以放心地删除dev分支:</p><pre><code>git branch -d dev</code></pre><p>想把当前分支“储藏”起来，切换到别的分支：</p><pre><code>git stash//切换回来后//git stash listgit stash pop //恢复工作现场</code></pre><hr><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><hr><p>克隆项目</p><pre><code>git clone ...ssh...</code></pre><p>推送分支，就是把该分支上的所有本地提交推送到远程库:</p><pre><code>git push origin 分支名称</code></pre><p>将本地分支跟踪服务器分支:</p><pre><code>git branch --set-upstream-to=origin/远程分支名称 本地分支名称</code></pre><p>推送分支，就是把该分支上的所有本地提交推送到远程库:</p><pre><code>git pushgit push origin 分支名称</code></pre><p>从远程分支上拉取代码：</p><pre><code>git pull orgin 分支名称</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android性能分析与优化</title>
    <link href="/2020/06/26/35.Android%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <url>/2020/06/26/35.Android%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="1、启动优化"><a href="#1、启动优化" class="headerlink" title="1、启动优化"></a>1、启动优化</h2><h3 id="1-1、启动类型"><a href="#1-1、启动类型" class="headerlink" title="1.1、启动类型"></a>1.1、启动类型</h3><hr><p>冷启动流程：用户点击 -&gt; IPC -&gt; Process.start创建进程 -&gt; ActivityThread(单独进程的入口) -&gt; bindApplication(创建Application) -&gt; LifeCycle(Activity) -&gt; ViewRootImpl界面绘制</p><p>冷启动之前会进行的操作：启动App，加载空白Window，创建进程。随后会创建Application，启动主线程，创建Activity，加载布局，布置屏幕，首帧绘制。主要对Application和Activity生命周期进行优化。</p><p>热启动：后台切换到前台。</p><p>温启动：只会重走Activity的生命周期。</p><hr><h3 id="1-2、启动时间"><a href="#1-2、启动时间" class="headerlink" title="1.2、启动时间"></a>1.2、启动时间</h3><hr><p>1、adb方式：</p><pre><code>adb shell am start -W 包名/包名.首屏ActivityThisTime:最后一个Activity启动耗时TotalTime：所有Activity启动耗时WaitTime：AMS启动Activity的总耗时</code></pre><p>2、手动打点方式：启动时埋点，可以线上使用</p><p>开始时间Application</p><pre><code>@Overrideprotected void attachBaseContext(Context base) &#123;    super.attachBaseContext(base);    //开始计时&#125;</code></pre><p>结束计时</p><pre><code>//Activity中@Overridepublic void onWindowFocusChanged(boolean hasFocus) &#123;    super.onWindowFocusChanged(hasFocus);    //结束计时&#125;//或者Adapter@Overridepublic void onBindViewHolder(@NonNull final ViewHolder holder, int position) &#123;    if (position == 0 &amp;&amp; !mHasRecorded) &#123;        mHasRecorded = true;        holder.layout.getViewTreeObserver()                .addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() &#123;                    @Override                    public boolean onPreDraw() &#123;                        //结束计时                        return true;                    &#125;                &#125;);    &#125;&#125;</code></pre><hr><h3 id="1-3、工具"><a href="#1-3、工具" class="headerlink" title="1.3、工具"></a>1.3、工具</h3><hr><p>traceview:图形展示执行时间、调用栈；包含所有线程。缺点：运行变慢。</p><pre><code>android.os.Debug.startMethodTracing();//也可以调用startMethodTracing(String traceName) 设置trace文件的文件名android.os.Debug.stopMethodTracing();//放在结束调试的地方生成文件在：Android/data/包名/files</code></pre><p>systrace：结合Android内核的数据，生成Html报告。轻量级，开销小。直接反应cpu利用率。</p><pre><code>//b:大小，t:时间，o：生成文件名字python systrace.py -b 32768 -t 5 -a 包名 -o html文件 sched gfx view wm am app//项目代码TraceCompat.beginSection(mTask.getClass().getSimpleName());TraceCompat.endSection();</code></pre><p><strong>cputime代码消耗cpu的时间（重要指标）；walltime：代码执行时间。</strong></p><hr><h3 id="1-4、统计方法消耗时间"><a href="#1-4、统计方法消耗时间" class="headerlink" title="1.4、统计方法消耗时间"></a>1.4、统计方法消耗时间</h3><hr><p>AOP：针对同一类问题统一处理。</p><p>AspectJ</p><pre><code>https://github.com/HujiangTechnology/gradle_plugin_android_aspectjxclasspath &apos;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.0&apos;apply plugin: &apos;android-aspectjx&apos;implementation &apos;org.aspectj:aspectjrt:1.8.+&apos;例如PerformanceAop类</code></pre><hr><h3 id="1-4、Theme小技巧"><a href="#1-4、Theme小技巧" class="headerlink" title="1.4、Theme小技巧"></a>1.4、Theme小技巧</h3><hr><p>Theme切换：感觉上更快。</p><p>drawable下创建.xml</p><pre><code>&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:opacity=&quot;opaque&quot;&gt;    &lt;!-- The background color, preferably the same as your normal theme --&gt;    &lt;item android:drawable=&quot;@android:color/white&quot;/&gt;    &lt;!-- Your product logo - 144dp color version of your app icon --&gt;    &lt;item&gt;        &lt;bitmap            android:src=&quot;@mipmap/splash&quot;            android:gravity=&quot;fill&quot;/&gt;    &lt;/item&gt;&lt;/layer-list&gt;</code></pre><p>styles中设置</p><pre><code>&lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/lanucher&lt;/item&gt;</code></pre><p>首屏Activity引用</p><pre><code>android:theme=&quot;@style/Theme.Splash&quot;</code></pre><p>Activity中</p><pre><code>setTheme(R.style.AppTheme);//super.onCreate之前切换真正的stylesuper.onCreate(savedInstanceState);</code></pre><hr><h3 id="1-5、异步解决方案-启动器"><a href="#1-5、异步解决方案-启动器" class="headerlink" title="1.5、异步解决方案-启动器"></a>1.5、异步解决方案-启动器</h3><hr><p>异步优化：子线程分担主线程任务。</p><p>Application中的sdk初始化如果不需要再主线程中执行，那么就异步执行。CountDownLatch。</p><p>线程池创建线程数，根据手机cup</p><pre><code>private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();private static final int CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));</code></pre><p>启动器：充分利用cpu多核，自动梳理任务顺序</p><p>代码Task化，启动逻辑抽象为Task。根据任务依赖关系排序生成一个有向无环图。多线程按照排序后的优先级依次执行。</p><p>工具类：TaskDispatcher，例子：主线程Task：InitWeexTask；子线程Task：InitAMapTask；等待Task：InitJPushTask。</p><p>延迟初始化：在MainActivity的onFeedShow方法中调用DelayInitDispatcher利用addIdleHandler</p><hr>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP和加密和HTTPS</title>
    <link href="/2020/06/13/34.HTTP%E5%92%8C%E5%8A%A0%E5%AF%86%E5%92%8CHTTPS/"/>
    <url>/2020/06/13/34.HTTP%E5%92%8C%E5%8A%A0%E5%AF%86%E5%92%8CHTTPS/</url>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="1-1、HTTP的概念"><a href="#1-1、HTTP的概念" class="headerlink" title="1.1、HTTP的概念"></a>1.1、HTTP的概念</h3><hr><p>HTTP是一种网络传输协议，位于TCP/IP协议族的最顶层——应用层。<code>Hypertext Transfer Protocol</code>超文本传输协议，和 <code>HTML (Hypertext Markup Language</code> 超文本标记语言一起诞生，用于在网络上请求和传输HTML内容。</p><p>OSI的7层协议：从下到上分别是:7-应用层、6-表示层、5-会话层、4-传输层、3-网络层、2-数据链路层、1-物理层。</p><p>TCP三次握手（作用是建立连接）和四次挥手（作用是断开连接）——保证数据传输可靠性。</p><p><strong>HTTP协议是一个超文本传输协议。HTTP协议是一个基于TCP传输协议传输数据的。HTTP协议规定了浏览器和Web服务器通信数据的格式。</strong></p><hr><h3 id="1-2、URL"><a href="#1-2、URL" class="headerlink" title="1.2、URL"></a>1.2、URL</h3><hr><p>URL的英文全拼是(Uniform Resoure Locator),表达的意思是统一资源定位符，通俗理解就是网络资源地址，也就是我们常说的网址。</p><p><strong>URL三部分组成：协议类型、服务器地址(和端口号)、资源路径(Path)，查询参数部分（可选）。</strong></p><p>协议类型://服务器地址[:端口号]路径</p><hr><h3 id="1-3、报文"><a href="#1-3、报文" class="headerlink" title="1.3、报文"></a>1.3、报文</h3><hr><p>通信是以<strong>报文</strong>的形式。</p><p>请求报文</p><pre><code>请求行: method、path、Http versionHeaders：Host、Content-Type、Content-LengthBody</code></pre><p>响应报文</p><pre><code>状态行: Http version、status code、status messageHeaders：Content-Type、cache-control、vary、etag、content-encodingBody</code></pre><p>请求头和响应头详细参考网站</p><pre><code>http://tools.jb51.net/table/http_header</code></pre><p><strong>一个HTTP请求报文可以由请求行、请求头、空行和请求体4个部分组成。</strong></p><p><strong>请求行是由三部分组成:请求方式、请求资源路径、HTTP协议版本。</strong></p><p>GET方式的请求报文没有请求体，只有请求行、请求头、空行组成。</p><p>POST方式的请求报文可以有请求行、请求头、空行、请求体四部分组成，注意:POST方式可以允许没有请求体，但是这种格式很少见。</p><p><strong>一个HTTP响应报文是由响应行、响应头、空行和响应体4个部分组成。</strong></p><p><strong>响应行是由三部分组成：HTTP协议版本、状态码、状态描述。</strong></p><hr><h3 id="1-4、请求方法"><a href="#1-4、请求方法" class="headerlink" title="1.4、请求方法"></a>1.4、请求方法</h3><hr><p>GET：对服务器数据不进行修改、不发送Body。<strong>幂等（反复调用多次会得到相同的结果）</strong>。</p><pre><code>@GET(&quot;/users/&#123;id&#125;&quot;)Call&lt;User&gt; getUser(@Path(&quot;id&quot;) String id, @Query(&quot;gender&quot;) String gender);</code></pre><p>POST：用于增加或修改资源、不幂等。</p><pre><code>@FormUrlEncoded@POST(&quot;/users&quot;)Call&lt;User&gt; addUser(@Field(&quot;name&quot;) String name, @Field(&quot;gender&quot;) String gender);</code></pre><p>PUT:仅用于修改资源、发送给服务器的内容写在Body里面、幂等。</p><pre><code>@FormUrlEncoded@PUT(&quot;/users/&#123;id&#125;&quot;)Call&lt;User&gt; updateGender(@Path(&quot;id&quot;) String id, @Field(&quot;gender&quot;) String gender);</code></pre><p>DELETE：用于删除资源、不发送Body、幂等。</p><pre><code>@DELETE(&quot;/users/&#123;id&#125;&quot;)Call&lt;User&gt; getUser(@Path(&quot;id&quot;) String id, @Query(&quot;gender&quot;) String gender);</code></pre><p>HEAD：和GET使用方法完全相同，唯一区别在于，返回的响应中没有Body。</p><hr><h3 id="1-5、HTTP状态码"><a href="#1-5、HTTP状态码" class="headerlink" title="1.5、HTTP状态码"></a>1.5、HTTP状态码</h3><hr><pre><code>1xx:  Infomational (信息状态码) ，临时性消息，如：100 （继续发送）、101（正在切换协议）2xx:  Succeed(成功)，请求正常处理完毕,如 2003xx:  Redirection(重定向)，需要进行附加操作，一般是没有响应数据返回的，如 304（Not,modified）307 4xx:  Client Error (客户端的错误)，服务器无法处理请求，如 4045xx:  Server Error (服务端的错误)，服务器处理请求出错，如 500</code></pre><hr><h3 id="1-5、Content-Type"><a href="#1-5、Content-Type" class="headerlink" title="1.5、Content-Type"></a>1.5、Content-Type</h3><hr><p>指定Body的类型。主要有四类：</p><p><strong>text/html</strong>：请求Web页面是返回响应的类型，Body中返回html文本。</p><p><strong>x-www-form-urlencoded</strong>：Web页面纯文本表单的提交方式。</p><pre><code>@FormUrlEncoded@POST(&quot;/users&quot;)Call&lt;User&gt; addUser(@Field(&quot;name&quot;) String name, @Field(&quot;gender&quot;) String gender);</code></pre><p><strong>multitype/form-data</strong>：Web页面含有二进制文件时的提交方式。</p><pre><code>Content-Type: multipart/form-data; boundary=----@Multipart@POST(&quot;/users&quot;)Call&lt;User&gt; addUser(@Part(&quot;name&quot;) RequestBody name, @Part(&quot;avatar&quot;) RequestBody avatar);RequestBody namePart = RequestBody.create(MediaType.parse(&quot;text/plain&quot;),nameStr);RequestBody avatarPart = RequestBody.create(MediaType.parse(&quot;image/jpeg&quot;),avatarFile);api.addUser(namePart, avatarPart);</code></pre><p><strong>application/json,image/jpeg,application/zip…</strong>单项内容（文本或非文本都可以），用于Web Api的响应或者POST/PUT的请求。</p><pre><code>@POST(&quot;/users&quot;)Call&lt;User&gt; addUser(@Body(&quot;user&quot;) User user);@POST(&quot;users/&#123;id&#125;/avatar&quot;)Call&lt;User&gt; updateAvatar(@Path(&quot;id&quot;) String id, @Body RequestBody avatar);RequestBody avatarBody = RequestBody.create(MediaType.parse(&quot;image/jpeg&quot;),avatarFile);api.updateAvatar(id, avatarBody)</code></pre><hr><h3 id="1-6、Header"><a href="#1-6、Header" class="headerlink" title="1.6、Header"></a>1.6、Header</h3><hr><p>HTTP消息的元数据 (meta data)</p><p>User-Agent:用户代理，即是谁实际发送请求、接受响应的，例如收机浏览器、某款收机App。</p><p>Host：服务器主机地址</p><p>Content-Length：长度</p><p>Location：重定向的目标 URL</p><p>Cookie/Set-Cookie：发送Cookie/设置Cookie</p><p>Authorization：授权信息</p><p>Accept: 客户端能接受的数据类型。如 text/html</p><p>Accept-Charset: 客户端接受的字符集。如 utf-8</p><p>Accept-Encoding: 客户端接受的压缩编码类型。如 gzip</p><p>Content-Encoding：压缩类型。如 gzip</p><hr><h3 id="1-7、Range"><a href="#1-7、Range" class="headerlink" title="1.7、Range"></a>1.7、Range</h3><hr><p>Accept-Range: bytes 响应报文中出现，表示服务器支持按字节来取范围数据</p><p>Range: <code>bytes=&lt;start&gt;-&lt;end&gt;</code> 请求报文中出现，表示要取哪段数据</p><p>Content-Range:<code>&lt;start&gt;-&lt;end&gt;/total</code> 响应报⽂中出现，表示发送的是哪段数据</p><p>作用：断点续传、多线程下载。</p><hr><h3 id="1-8、Cache"><a href="#1-8、Cache" class="headerlink" title="1.8、Cache"></a>1.8、Cache</h3><hr><p>Cache 和 Buffer 的区别</p><p>Cache-Control: no-cache、no-store、max-age</p><p>Last-Modified</p><p>If-Modified-Since</p><p>Etag</p><p>If-None-Match</p><p>Cache-Control: private / public</p><hr><h2 id="2、加密"><a href="#2、加密" class="headerlink" title="2、加密"></a>2、加密</h2><h3 id="2-1、对称加密"><a href="#2-1、对称加密" class="headerlink" title="2.1、对称加密"></a>2.1、对称加密</h3><hr><p>DES（56位密钥，密钥太短而逐渐被弃用）、AES（128位、192位、256位密钥，现在最流行）。</p><hr><h3 id="2-2、非对称加密"><a href="#2-2、非对称加密" class="headerlink" title="2.2、非对称加密"></a>2.2、非对称加密</h3><hr><p>使用公钥对数据进行加密得到密文；使用私钥对数据进行解密得到原数据。</p><p>缺点：双方公钥都暴漏，可能会伪造数据。</p><p>如果用私钥对数据加密，使用公钥是可以解密得到原数据的。但是一般不要互换，签名和验证就是这样，传输数据包括原数据+签名数据。</p><p>签名一般先对原数据hash，再进行签名。</p><p>用非对称加密+签名来传输数据 -&gt; 密文 + 签名数据。 解决上面的缺点。</p><p>经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）。</p><hr><h3 id="2-3、Base64"><a href="#2-3、Base64" class="headerlink" title="2.3、Base64"></a>2.3、Base64</h3><hr><p>将二进制数据转换成由64个字符组成的字符串的编码算法。64个字符：<code>a-z</code>、<code>A-Z</code>、<code>0-9</code>、<code>+</code>、<code>/</code>。</p><p>作用：让原数据具有字符串所具有的特性，如可以放在URL中传输、可以保存到文本文件。</p><p>Base64的缺点：因为自身的原理（6位变8位），因此每次Base64编码之后，数据都会增大约1/3，所以会影响存储和传输性能。</p><p><strong>Base64并不是加密</strong>。</p><p>Base58：比特币使用的编码方式，去掉了Base64中的数字<code>0</code>，字母大写<code>O</code>，字母大写<code>I</code>，和字母小写<code>l</code>，以及 “+” 和 “/“ 符号，用于比特币地址的表示。</p><p><code>URL encoding</code>:在URL的字符串中，对一些不用于特殊用途的保留字符，使⽤百分号<code>%</code>为前缀进行单独编码，以避免出现解析错误。</p><hr><h3 id="2-4、序列化"><a href="#2-4、序列化" class="headerlink" title="2.4、序列化"></a>2.4、序列化</h3><hr><p>把数据对象（一般是内存中的，例如 JVM 中的对象）转换成字节序列的过程。对象在程序内存里的存放形式是散乱的（存放在不同的内存区域、并且由引用进行连接），通过序列化可以把内存中的对象转换成一个字节序列，从而使用<code>byte[]</code>等形式进行本地存储或网络传输，在需要的时候重新组装（反序列化）来使用。</p><p>目的：让内存中的对象可以被储存和传输。</p><p>序列化是编码吗？不是。编码是把数据由一种数据格式转换成另一种数据格式；而序列化是把数据由内存中的对象（而不是某种具体的格式）转换成字节序列。</p><hr><h3 id="2-5、Hash"><a href="#2-5、Hash" class="headerlink" title="2.5、Hash"></a>2.5、Hash</h3><hr><p>定义：把任意数据转换成指定大小范围（通常很小，例如256字节以内）的数据。</p><p>作用：相当于从数据中提出摘要信息，因此最主要用途是数字指纹。</p><p>经典算法：<code>MD5</code>、<code>SHA1</code>、<code>SHA256</code> 等。</p><blockquote><p>Hash的实际用途：唯一性验证。</p></blockquote><p>例如 Java 中的 <code>hashCode()</code> 方法。怎么重写hashCode方法？</p><p>把 equals() 方法中的每个用于判断相等的变量都放进 hashCode() 中，一起生成一个尽量不会碰撞的整数即可。</p><p>为什么每次重写 equals() 方法都需要？因为要把新的判断条件放进hashCode()。</p><blockquote><p>Hash的实际用途：数据完整性验证</p></blockquote><p>从网络上下载文件后，通过比对文件的Hash值（例如 MD5、SHA1），可以确认下载的文件是否有损坏。</p><blockquote><p>Hash 的实际用途：快速查找</p></blockquote><p>HashMap</p><blockquote><p>Hash 的实际用途：隐私保护</p></blockquote><p>当重要数据必须暴露的时候，可以选择暴露它的Hash值（例如 MD5），以保障原数据的安全。</p><p>例如网站登录时，可以只保存用户密码的 Hash 值，在每次登录验证时只需要将输入的密码的Hash值和数据库中保存的 Hash 值作比对就好，网站无需知道用户的密码。这样，当网站数据失窃时，用户不会因为密码被盗导致其他网站的安全也受到威胁。</p><p>Hash是单向过程，往往是不可逆的，无法进行逆向恢复操作，因此<strong>Hash不属于编码</strong>。</p><p>Hash是单向过程，无法进行逆向回复操作，因此<strong>Hash不属于加密。（MD5不是加密！）</strong></p><hr><h2 id="3、HTTPS"><a href="#3、HTTPS" class="headerlink" title="3、HTTPS"></a>3、HTTPS</h2><h3 id="3-1、TCP-IP协议"><a href="#3-1、TCP-IP协议" class="headerlink" title="3.1、TCP/IP协议"></a>3.1、TCP/IP协议</h3><hr><p>具体分层：</p><p><code>Application Layer</code>应用层：HTTP、FTP、DNS。</p><p><code>Transport Layer</code>传输层：TCP、UDP。</p><p><code>Internet Layer</code>网络层：IP。</p><p><code>Link Layer</code>数据链路层：以太网、Wi-Fi。</p><p><strong>三次握手</strong>：客户端：「我要向你发送消息」；服务器：「好的。我要向你发送消息」；客户端：「好的」。</p><p><strong>四次挥手</strong>：客户端：「我不再给你发送消息」；服务端：「好的」；服务端：「我不再给你发送消息」；客户端：「好的」。</p><p>为什么四次挥手而不是三次：因为在客户端停止向服务器发送消息时，也许服务器还有消息需要向客户端发送，因此在它对客户端的「Fin」（即「我不再给你发送消息」，这个词不必记住）消息进行回应时，不需要立即附加上「我也不再向你发送消息」。在稍后服务器的消息发送完毕之后，才需要向客户端发送通知。</p><p>长连接：因为移动网络并不在<code>Internet</code>中，而是在运营商的内网，并不具有真正的公网 <code>IP</code>，因此当某个 <code>TCP</code>连接在一段时间不通信之后，网关会出于网络性能考虑而关闭这条 <code>TCP</code> 连接和公网的连接通道，导致这个 <code>TCP</code> 端口不再能收到外部通信消息，即 <code>TCP</code> 连接被动关闭。</p><p>长连接的实现方式：心跳。即在一定间隔时间内，使用 TCP 连接发送超短无意义消息来让网关不能将自己定义为「空闲连接」，从而防止网关将自己的连接关闭。</p><hr><h3 id="3-2、HTTPS"><a href="#3-2、HTTPS" class="headerlink" title="3.2、HTTPS"></a>3.2、HTTPS</h3><hr><p>定义：HTTP在SSL（或 TLS）上工作。 简单说就是加密通信的HTTP。</p><p>工作原理：在客户端和服务器之间协商出一套<strong>对称密钥</strong>，每次发送信息之前将内容加密，收到之后解密，达到内容的加密传输。<strong>因为对称加密性能更好。</strong></p><p>为什么不直接用非对称加密？非对称加密由于使用了复杂了数学原理，因此计算相当复杂，如果完全使用非对称加密来加密通信内容，会严重影响网络通信的性能。</p><p>HTTPS 连接建⽴的过程</p><pre><code>客户端请求建立连接Client Hello服务端Server Hello服务器发送证书（非对称加密的公钥、签名等）- 信任建立客户端发给服务器Pre-master Secret（非对称加密随机数）客户端通知：将使用加密通信客户端发送：Finished服务器通知：将使用加密通信服务器发送：Finished</code></pre><p>客户端加密密钥（客户端发送消息）、服务端加密密钥（服务端发送消息）、客户端MAC Secret（验证身份）、服务端MAC Secret（验证身份）。</p><hr><h2 id="4、网络编程"><a href="#4、网络编程" class="headerlink" title="4、网络编程"></a>4、网络编程</h2><h3 id="4-1、IP地址"><a href="#4-1、IP地址" class="headerlink" title="4.1、IP地址"></a>4.1、IP地址</h3><hr><p>IP地址的作用是标识网络中唯一的一台设备的。</p><p>IP地址的表现形式分为: IPv4和IPv6。IPv4是目前使用的ip地址；IPv6是未来使用的ip地址；IPv4是由点分十进制组成；IPv6是由冒号十六进制组成。</p><p>查看IP地址：Linux 和 mac OS 使用 <code>ifconfig</code> 这个命令;Windows 使用 <code>ipconfig</code> 这个命令。</p><p>检查网络：ping</p><pre><code>ping www.baidu.com 检查是否能上公网ping 当前局域网的ip地址 检查是否在同一个局域网内ping 127.0.0.1 检查本地网卡是否正常</code></pre><hr><h3 id="4-2、端口和端口号"><a href="#4-2、端口和端口号" class="headerlink" title="4.2、端口和端口号"></a>4.2、端口和端口号</h3><hr><p>端口的作用就是给运行的应用程序提供传输数据的通道。好比房间的门，是数据传输必经之路。</p><p>每一个端口都会有一个对应的端口号，好比每个房间的门都有一个门牌号，想要找到端口通过端口号即可。</p><p>操作系统为了统一管理这么多端口，就对端口进行了编号，这就是端口号，端口号其实就是一个数字，好比我们现实生活中的门牌号,端口号有65536个。</p><p>端口号的作用是用来区分和管理不同端口的，通过端口号能找到唯一个的一个端口。</p><p>端口和端口号的关系：端口号可以标识唯一的一个端口。</p><p>端口号可以分为两类：知名端口号和动态端口号。</p><p>知名端口号的范围是0到1023。这些端口号一般固定分配给一些服务，比如21端口分配给FTP(文件传输协议)服务，25端口分配给SMTP（简单邮件传输协议）服务，80端口分配给HTTP服务。</p><p>动态端口号的范围是1024到65535。如果程序员开发的程序没有设置端口号，操作系统会在动态端口号这个范围内随机生成一个给开发的应用程序使用。当运行一个程序默认会有一个端口号，当这个程序退出时，所占用的这个端口号就会被释放。</p><hr><h3 id="4-3、TCP的介绍"><a href="#4-3、TCP的介绍" class="headerlink" title="4.3、TCP的介绍"></a>4.3、TCP的介绍</h3><hr><p>通过 IP 地址能够找到对应的设备，然后再通过端口号找到对应的端口，再通过端口把数据传输给应用程序，这里要注意，数据不能随便发送，在发送之前还需要选择一个对应的传输协议，保证程序之间按照指定的传输规则进行数据的通信， 而这个传输协议就是TCP。</p><p>TCP的英文全拼(Transmission Control Protocol)简称传输控制协议，它是一种<strong>面向连接的、可靠的、基于字节流</strong>的传输层通信协议。</p><p>TCP通信步骤:创建连接、传输数据、关闭连接。</p><p>TCP的特点：</p><ol><li>面向连接：通信双方必须先建立好连接才能进行数据的传输，数据传输完成后，双方必须断开此连接，以释放系统资源。</li><li>可靠传输：TCP 采用发送应答机制、超时重传、错误校验、流量控制和阻塞管理。</li></ol><hr><h3 id="4-4、socket的介绍"><a href="#4-4、socket的介绍" class="headerlink" title="4.4、socket的介绍"></a>4.4、socket的介绍</h3><hr><p>为了保证数据的完整性和可靠性我们使用tcp传输协议进行数据的传输，为了能够找到对应设备我们需要使用ip地址，为了区别某个端口的应用程序接收数据我们需要使用端口号，那么通信数据是如何完成传输的呢？使用socket来完成。</p><p>socket是进程之间通信一个工具，好比现实生活中的插座，所有的家用电器要想工作都是基于插座进行，进程之间想要进行网络通信需要基于这个 socket。</p><p>socket的作用：负责进程之间的网络数据传输，好比数据的搬运工。</p><p>只要跟网络相关的应用程序或者软件都使用到了socket。进程之间网络数据的传输可以通过socket来完成，socke 就是进程间网络数据通信的工具。</p><hr><h3 id="4-5、TCP网络应用程序开发流程"><a href="#4-5、TCP网络应用程序开发流程" class="headerlink" title="4.5、TCP网络应用程序开发流程"></a>4.5、TCP网络应用程序开发流程</h3><hr><p>TCP网络应用程序开发分为:TCP客户端程序开发和TCP服务端程序开发。</p><p>主动发起建立连接请求的是客户端程序，等待接受连接请求的是服务端程序。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C基础</title>
    <link href="/2020/03/21/39.C%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/03/21/39.C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr><p><img src="/2020/03/21/39.C%E5%9F%BA%E7%A1%80/39.C基础/1.png" alt></p><p><img src="/2020/03/21/39.C%E5%9F%BA%E7%A1%80/39.C基础/3.png" alt></p><pre><code>#include &lt;stdio.h&gt;int main(int argc, const char * argv[]) &#123;    printf(&quot;Hello, World!\n&quot;);    return 0;&#125;</code></pre><p>return</p><pre><code>return代表函数执行完毕，返回return代表函数的终止如果main定义的时候前面是int，那么return后面就需要写一个整数；如果main定义的时候前面是void，那么return后面什么也不需要写在main函数中return 0代表程序执行成功，return -1代表程序执行失败int main()和void main()在C语言中是一样的，但C++只接受int main这种定义方式</code></pre><p>include</p><pre><code>#include的意思是头文件包含，#include &lt;stdio.h&gt;代表包含stdio.h这个头文件使用C语言库函数需要提前包含库函数对应的头文件，如这里使用了printf()函数，需要包含stdio.h头文件#include&lt; &gt; 与 #include &quot;&quot;的区别：&lt; &gt; 表示系统直接按系统指定的目录检索&quot;&quot; 表示系统先在 &quot;&quot; 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索</code></pre><p>C代码编译成可执行程序经过4步<code>.c</code>：</p><p>预处理：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法（<code>.i</code>）</p><p>编译：检查语法，将预处理后文件编译生成汇编文件(<code>.s</code>)</p><p>汇编：将汇编文件生成目标文件(二进制文件)(<code>.o</code>)</p><p>链接：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去()</p><p>32个关键字</p><pre><code>数据类型关键字（12个）char、short、int、long、float、double、unsigned、signed、struct、union、enum、void控制语句关键字（12个）if、else、switch、case、default、for、do、while、break、continue、goto、return存储类关键字（5个）auto、extern、register、static、constant其他关键字（3个）sizeof、typedef、volatile</code></pre><hr><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><hr><p><strong>声明变量</strong>不需要建立存储空间，如：<code>extern int a;</code>。<strong>定义变量</strong>需要建立存储空间，如：<code>int b;</code>。</p><pre><code>#include &lt;stdio.h&gt;int main(int argc, const char* argv[])&#123;    &#123;        //extern 关键字只做声明，不能做任何定义        //声明一个变量a，a在这里没有建立存储空间        extern int a;        //a = 10;    //err, 没有空间，就不可以赋值        int b = 10;    //定义一个变量b，b的类型为int，b赋值为10        return 0;    &#125;&#125;</code></pre><p>define、const</p><pre><code>#include &lt;stdio.h&gt;#define MAX 10 //声明了一个常量，名字叫MAX，值是10，常量的值一旦初始化不可改int main()&#123;    int a;    //定义了一个变量，其类型为int，名字叫a    const int b = 10; //定义一个const常量，名为叫b，值为10    //b = 11; //err,常量的值不能改变    //MAX = 100;    //err,常量的值不能改变    a = MAX;//将abc的值设置为MAX的值    a = 123;    printf(&quot;%d\n&quot;, a); //打印变量a的值    return 0;&#125;</code></pre><p><strong>通过 <code>#define</code> 定义的常量,是根据值来匹配数据类型的。const修饰的常量是不安全，可以通过指针来修改。</strong></p><hr><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a = 123;        //十进制方式赋值    int b = 0123;        //八进制方式赋值， 以数字0开头    int c = 0xABC;    //十六进制方式赋值    //如果在printf中输出一个十进制数那么用%d，八进制用%o，十六进制是%x    printf(&quot;十进制：%d\n&quot;, a);    printf(&quot;八进制：%o\n&quot;, b);    //%o,为字母o,不是数字    printf(&quot;十六进制：%x\n&quot;, c);    return 0;&#125;</code></pre><hr><h3 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h3><hr><p>sizeof不是函数，所以不需要包含任何头文件，它的功能是计算一个数据类型的大小，单位为字节。sizeof的返回值为size_t。size_t类型在32位操作系统下是unsigned int，是一个无符号的整数。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a;    int b = sizeof(a);//sizeof得到指定值占用内存的大小，单位：字节    printf(&quot;b = %d\n&quot;, b);    size_t c = sizeof(a);    printf(&quot;c = %u\n&quot;, c);//用无符号数的方式输出c的值    return 0;&#125;</code></pre><hr><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><hr><p>打印格式</p><pre><code>%hd    输出short类型%d    输出int类型%l    输出long类型%ll    输出long long类型%hu    输出unsigned short类型%u    输出unsigned int类型%lu    输出unsigned long类型%llu    输出unsigned long long类型</code></pre><p>代码</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    short a = 10;    int b = 10;    long c = 10l; //或者10L    long long d = 10ll; //或者10LL    printf(&quot;sizeof(a) = %u\n&quot;, sizeof(a));    printf(&quot;sizeof(b) = %u\n&quot;, sizeof(b));    printf(&quot;sizeof(c) = %u\n&quot;, sizeof(c));    printf(&quot;sizeof(c) = %u\n&quot;, sizeof(d));    printf(&quot;short a = %hd\n&quot;, a);    printf(&quot;int b = %d\n&quot;, b);    printf(&quot;long c = %ld\n&quot;, c);    printf(&quot;long long d = %lld\n&quot;, d);    unsigned short a2 = 20u;    unsigned int b2 = 20u;    unsigned long c2 = 20ul;    unsigned long long d2 = 20ull;    printf(&quot;unsigned short a = %hu\n&quot;, a2);    printf(&quot;unsigned int b = %u\n&quot;, b2);    printf(&quot;unsigned long c = %lu\n&quot;, c2);    printf(&quot;unsigned long long d = %llu\n&quot;, d2);    return 0;&#125;</code></pre><p><strong>有符号数</strong>是最高位为符号位，0代表正数，1代表负数。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    signed int a = -1089474374; //定义有符号整型变量a    printf(&quot;%X\n&quot;, a); //结果为 BF0FF0BA    //B       F      0        F       F     0        B          A    //1011 1111 0000 1111 1111 0000 1011 1010    return 0;&#125;</code></pre><p><strong>无符号数</strong>最高位不是符号位，而就是数的一部分，无符号数不可能是负数。无符号数，可以增大数的表达最大值。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    unsigned int a = 3236958022; //定义无符号整型变量a    printf(&quot;%X\n&quot;, a); //结果为 C0F00F46    return 0;&#125;</code></pre><hr><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><hr><p>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的ASCII编码放到变量的存储单元中。<strong>char的本质就是一个1字节大小的整型</strong>。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    char ch = &apos;a&apos;;    printf(&quot;sizeof(ch) = %u\n&quot;, sizeof(ch));    printf(&quot;ch[%%c] = %c\n&quot;, ch); //打印字符    printf(&quot;ch[%%d] = %d\n&quot;, ch); //打印‘a’ ASCII的值    char A = &apos;A&apos;;    char a = &apos;a&apos;;    printf(&quot;a = %d\n&quot;, a);        //97    printf(&quot;A = %d\n&quot;, A);    //65    printf(&quot;A = %c\n&quot;, &apos;a&apos; - 32); //小写a转大写A    printf(&quot;a = %c\n&quot;, &apos;A&apos; + 32); //大写A转小写a    ch = &apos; &apos;;    printf(&quot;空字符：%d\n&quot;, ch); //空字符ASCII的值为32    printf(&quot;A = %c\n&quot;, &apos;a&apos; - &apos; &apos;); //小写a转大写A    printf(&quot;a = %c\n&quot;, &apos;A&apos; + &apos; &apos;); //大写A转小写a    return 0;&#125;</code></pre><hr><h3 id="float、double"><a href="#float、double" class="headerlink" title="float、double"></a>float、double</h3><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    //传统方式赋值    float a = 3.14f; //或3.14F    double b = 3.14;    printf(&quot;a = %f\n&quot;, a);    printf(&quot;b = %lf\n&quot;, b);    //科学法赋值,e3相当于1000，e-3相当于0.001    a = 3.2e3f; //3.2*1000 = 32000，e可以写E    printf(&quot;a1 = %f\n&quot;, a);    a = 100e-3f; //100*0.001 = 0.1    printf(&quot;a2 = %f\n&quot;, a);    a = 3.1415926f;    printf(&quot;a3 = %f\n&quot;, a); //结果为3.141593    return 0;&#125;</code></pre><p>类型限定符</p><pre><code>//extern:声明一个变量，extern声明的变量没有建立存储空间extern int a;//const:定义一个常量，常量的值不能修改。const int a = 10;//volatile    防止编译器优化代码//register    定义寄存器变量，提高效率。register是建议型的指令，而不是命令型的指令，如果CPU有空闲寄存器，那么register就生效，如果没有空闲寄存器，那么register无效。</code></pre><hr><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><hr><p>字符串是内存中一段连续的char空间，以<code>&#39;\0&#39;</code>(数字0)结尾。</p><p>每个字符串的结尾，编译器会自动的添加一个结束标志位<code>&#39;\0&#39;</code>，即 <code>&quot;a&quot;</code> 包含两个字符<code>&#39;a&#39;</code>和<code>&#39;\0&#39;</code>。</p><hr><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><hr><p>C语言的比较运算中，“真”用数字“1”来表示，“假”用数字“0”来表示。</p><pre><code>-&gt;    对象指针-&gt;成员名    //成员选择（指针）&amp;    &amp;变量名    //取地址运算符</code></pre><hr><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a = 10;    int b = 20;    int c;    c = (a &gt; b ? a : b);    printf(&quot;c = %d\n&quot;, c);    return 0;&#125;</code></pre><hr><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><hr><pre><code>#define _CRT_SECURE_NO_WARNINGS#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;int main()&#123;    int arr[10] = &#123; 7,4,2,3,5,8,9,6,1,10 &#125;;    int len = sizeof(arr) / sizeof(arr[0]) - 1;    //冒泡排序   从小到大    for (int i = 0; i &lt;= len; i++)    &#123;        for (int j = 0; j &lt; len - i; j++)        &#123;            if (arr[j] &lt; arr[j + 1])            &#123;                int temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            &#125;        &#125;    &#125;    for (int i = 0; i &lt; 10; i++)    &#123;        printf(&quot;%d\n&quot;, arr[i]);    &#125;    system(&quot;pause&quot;);    return EXIT_SUCCESS;&#125;</code></pre><hr><h3 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h3><hr><p>无条件跳转，尽量少用。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    goto End; //无条件跳转到End的标识    printf(&quot;aaaaaaaaa\n&quot;);End:    printf(&quot;bbbbbbbb\n&quot;);    return 0;&#125;</code></pre><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><hr><p><strong>数组就是在内存中连续的相同类型的变量空间</strong>。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a[10];//定义了一个数组，名字叫a，有10个成员，每个成员都是int类型    //a[0]…… a[9]，没有a[10]    //没有a这个变量，a是数组的名字，但不是变量名，它是常量    int i = 0;    for (i = 0; i &lt; 10; i++)    &#123;        a[i] = i; //给数组赋值    &#125;    //遍历数组，并输出每个成员的值    for (i = 0; i &lt; 10; i++)    &#123;        printf(&quot;%d &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><hr><h4 id="一维数组的初始化"><a href="#一维数组的初始化" class="headerlink" title="一维数组的初始化"></a>一维数组的初始化</h4><hr><p>在定义数组的同时进行赋值，称为初始化。全局数组若不初始化，编译器将其初始化为零。局部数组若不初始化，内容为随机值。</p><pre><code>int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;//定义一个数组，同时初始化所有成员变量int a[10] = &#123; 1, 2, 3 &#125;;//初始化前三个成员，后面所有元素都设置为0int a[10] = &#123; 0 &#125;;//所有的成员都设置为0//[]中不定义元素个数，定义时必须初始化int a[] = &#123; 1, 2, 3, 4, 5 &#125;;//定义了一个数组，有5个成员</code></pre><hr><h4 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h4><hr><p><strong>数组名是一个地址的常量，代表数组中首元素的地址</strong>。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;//定义一个数组，同时初始化所有成员变量    printf(&quot;a = %p\n&quot;, a);    printf(&quot;&amp;a[0] = %p\n&quot;, &amp;a[0]);//相等的    int n = sizeof(a); //数组占用内存的大小，10个int类型，10 * 4  = 40    int n0 = sizeof(a[0]);//数组第0个元素占用内存大小，第0个元素为int，4    //遍历数组    int i = 0;    for (i = 0; i &lt; sizeof(a) / sizeof(a[0]); i++)    &#123;        printf(&quot;%d &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><p><strong>数组元素个数</strong>：</p><pre><code>int （size_t） unsigned int 个数  = sizeof(数组名)/sizeof(数组元素 | 数组数据类型) </code></pre><p><strong>数组地址</strong></p><pre><code>int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;//定义一个数组，同时初始化所有成员变量printf(&quot;a = %p\n&quot;, a);printf(&quot;&amp;a[0] = %p\n&quot;, &amp;a[0]);</code></pre><hr><h4 id="一维数组的最值"><a href="#一维数组的最值" class="headerlink" title="一维数组的最值"></a>一维数组的最值</h4><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a[] = &#123; 1, -2, 3,-4, 5, -6, 7, -8, -9, 10 &#125;;//定义一个数组，同时初始化所有成员变量    int i = 0;    int max = a[0];    for (i = 0; i &lt; sizeof(a) / sizeof(a[0]); i++)    &#123;        if (a[i] &gt; max)        &#123;            max = a[i];        &#125;    &#125;    printf(&quot;数组中最大值为：%d\n&quot;, max);    return 0;&#125;</code></pre><hr><h4 id="一维数组的逆置"><a href="#一维数组的逆置" class="headerlink" title="一维数组的逆置"></a>一维数组的逆置</h4><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a[] = &#123; 1, -2, 3,-4, 5, -6, 7, -8, -9, 10 &#125;;//定义一个数组，同时初始化所有成员变量    int i = 0;    int j = sizeof(a) / sizeof(a[0]) - 1;    int tmp;    while (i &lt; j)    &#123;        tmp = a[i];        a[i] = a[j];        a[j] = tmp;        i++;        j--;    &#125;    for (i = 0; i &lt; sizeof(a) / sizeof(a[0]); i++)    &#123;        printf(&quot;%d &quot;, a[i]);//10 -9 -8 7 -6 5 -4 3 -2 1    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><hr><h4 id="冒泡法排序"><a href="#冒泡法排序" class="headerlink" title="冒泡法排序"></a>冒泡法排序</h4><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a[] = &#123; 1, -2, 3,-4, 5, -6, 7, -8, -9, 10 &#125;;//定义一个数组，同时初始化所有成员变量    int i = 0;    int j = 0;    int n = sizeof(a) / sizeof(a[0]);    int tmp;    for (i = 0; i &lt; n - 1; i++)    &#123;        for (j = 0; j &lt; n - i - 1; j++)//内循环的目的是比较相邻的元素，把大的放到后面        &#123;            if (a[j] &gt; a[j + 1])            &#123;                tmp = a[j];                a[j] = a[j + 1];                a[j + 1] = tmp;            &#125;        &#125;    &#125;    for (i = 0; i &lt; n; i++)    &#123;        printf(&quot;%d &quot;, a[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><hr><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><hr><pre><code>//常量表达式1表示第一维下标的长度，常量表达式2表示第二维下标的长度。类型说明符 数组名[常量表达式1][常量表达式2]</code></pre><p>在内存中并不存在二维数组，二维数组实际的硬件存储器是连续编址的，也就是说内存中只有一维数组，即放完一行之后顺次放入第二行，和一维数组存放方式是一样的。</p><p>实现</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    //定义了一个二维数组，名字叫a    //由3个一维数组组成，这个一维数组是int [4]    //这3个一维数组的数组名分别为a[0],a[1],a[2]    int a[3][4];    //给数组每个元素赋值    int i = 0;    int j = 0;    int num = 0;    for (i = 0; i &lt; 3; i++)    &#123;        for (j = 0; j &lt; 4; j++)        &#123;            a[i][j] = num++;        &#125;    &#125;    //遍历数组，并输出每个成员的值    for (i = 0; i &lt; 3; i++)    &#123;        for (j = 0; j &lt; 4; j++)        &#123;            printf(&quot;%d, &quot;, a[i][j]);        &#125;        printf(&quot;\n&quot;);    &#125;    return 0;&#125;</code></pre><hr><h4 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h4><hr><pre><code>//分段赋值     int a[3][4] = &#123;&#123; 1, 2, 3, 4 &#125;,&#123; 5, 6, 7, 8, &#125;,&#123; 9, 10, 11, 12 &#125;&#125;;//连续赋值int a[3][4] = &#123; 1, 2, 3, 4 , 5, 6, 7, 8, 9, 10, 11, 12&#125;;//可以只给部分元素赋初值，未初始化则为0int a[3][4] = &#123; 1, 2, 3, 4&#125;;//所有的成员都设置为0int a[3][4] = &#123;0&#125;;//[]中不定义元素个数，定义时必须初始化int a[][4] = &#123; 1, 2, 3, 4, 5, 6, 7, 8&#125;;</code></pre><hr><h4 id="数组名-1"><a href="#数组名-1" class="headerlink" title="数组名"></a>数组名</h4><hr><p>数组名是一个地址的常量，代表数组中首元素的地址。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    //定义了一个二维数组，名字叫a。二维数组是本质上还是一维数组，此一维数组有3个元素。每个元素又是一个一维数组int[4]    int a[3][4] = &#123; 1, 2, 3, 4 , 5, 6, 7, 8, 9, 10, 11, 12 &#125;;    //数组名为数组首元素地址，二维数组的第0个元素为一维数组。第0个一维数组的数组名为a[0]    printf(&quot;a = %p\n&quot;, a);    printf(&quot;a[0] = %p\n&quot;, a[0]);//二者相等    //测二维数组所占内存空间，有3个一维数组，每个一维数组的空间为4*4。sizeof(a) = 3 * 4 * 4 = 48    printf(&quot;sizeof(a) = %d\n&quot;, sizeof(a));    //测第0个元素所占内存空间，a[0]为第0个一维数组int[4]的数组名，4*4=16    printf(&quot;sizeof(a[0]) = %d\n&quot;, sizeof(a[0]));    //测第0行0列元素所占内存空间，第0行0列元素为一个int类型，4字节    printf(&quot;sizeof(a[0][0]) = %d\n&quot;, sizeof(a[0][0]));    //求二维数组行数，3    printf(&quot;i = %d\n&quot;, sizeof(a) / sizeof(a[0]));    // 求二维数组列数，4    printf(&quot;j = %d\n&quot;, sizeof(a[0]) / sizeof(a[0][0]));    //求二维数组行*列总数，12    printf(&quot;n = %d\n&quot;, sizeof(a) / sizeof(a[0][0]));    return 0;&#125;</code></pre><hr><h3 id="字符数组与字符串"><a href="#字符数组与字符串" class="headerlink" title="字符数组与字符串"></a>字符数组与字符串</h3><hr><p><strong>C语言中没有字符串这种数据类型</strong>，可以通过char的数组来替代；字符串一定是一个char的数组，但char的数组未必是字符串；<strong>数字0(和字符‘\0’等价)结尾的char数组就是一个字符串</strong>，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以字符串是一种特殊的char的数组。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    char c1[] = &#123; &apos;c&apos;, &apos; &apos;, &apos;p&apos;, &apos;r&apos;, &apos;o&apos;, &apos;g&apos; &#125;; //普通字符数组    printf(&quot;c1 = %s\n&quot;, c1); //乱码，因为没有’\0’结束符    //以‘\0’(‘\0’就是数字0)结尾的字符数组是字符串    char c2[] = &#123; &apos;c&apos;, &apos; &apos;, &apos;p&apos;, &apos;r&apos;, &apos;o&apos;, &apos;g&apos;, &apos;\0&apos; &#125;;    printf(&quot;c2 = %s\n&quot;, c2);    //字符串处理以‘\0’(数字0)作为结束符，后面的&apos;h&apos;, &apos;l&apos;, &apos;l&apos;, &apos;e&apos;, &apos;o&apos;不会输出    char c3[] = &#123; &apos;c&apos;, &apos; &apos;, &apos;p&apos;, &apos;r&apos;, &apos;o&apos;, &apos;g&apos;, &apos;\0&apos;, &apos;h&apos;, &apos;l&apos;, &apos;l&apos;, &apos;e&apos;, &apos;o&apos;, &apos;\0&apos; &#125;;    printf(&quot;c3 = %s\n&quot;, c3);    return 0;&#125;</code></pre><hr><h4 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h4><hr><pre><code>#include &lt;stdio.h&gt;// C语言没有字符串类型，通过字符数组模拟// C语言字符串，以字符‘\0’, 数字0int main()&#123;    //不指定长度, 没有0结束符，有多少个元素就有多长    char buf[] = &#123; &apos;a&apos;, &apos;b&apos;, &apos;c&apos; &#125;;    printf(&quot;buf = %s\n&quot;, buf);    //乱码    //指定长度，后面没有赋值的元素，自动补0    char buf2[100] = &#123; &apos;a&apos;, &apos;b&apos;, &apos;c&apos; &#125;;    printf(&quot;buf2 = %s\n&quot;, buf2);//buf2 = abc    //所有元素赋值为0    char buf3[100] = &#123; 0 &#125;;    //char buf4[2] = &#123; &apos;1&apos;, &apos;2&apos;, &apos;3&apos; &#125;;//数组越界    char buf5[50] = &#123; &apos;1&apos;, &apos;a&apos;, &apos;b&apos;, &apos;0&apos;, &apos;7&apos; &#125;;    printf(&quot;buf5 = %s\n&quot;, buf5);//buf5 = 1ab07    char buf6[50] = &#123; &apos;1&apos;, &apos;a&apos;, &apos;b&apos;, 0, &apos;7&apos; &#125;;    printf(&quot;buf6 = %s\n&quot;, buf6);// 1ab    char buf7[50] = &#123; &apos;1&apos;, &apos;a&apos;, &apos;b&apos;, &apos;\0&apos;, &apos;7&apos; &#125;;    printf(&quot;buf7 = %s\n&quot;, buf7);// 1ab    //使用字符串初始化，编译器自动在后面补0，常用    char buf8[] = &quot;agjdslgjlsdjg&quot;;    //&apos;\0&apos;后面最好不要连着数字，有可能几个数字连起来刚好是一个转义字符    //&apos;\ddd&apos;八进制字义字符，&apos;\xdd&apos;十六进制转移字符    // \012相当于\n    char str[] = &quot;\012abc&quot;;    printf(&quot;str == %s\n&quot;, str);    return 0;&#125;</code></pre><hr><h4 id="字符串追加拼接"><a href="#字符串追加拼接" class="headerlink" title="字符串追加拼接"></a>字符串追加拼接</h4><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    char str1[] = &quot;abcdef&quot;;    char str2[] = &quot;123456&quot;;    char dst[100];    int i = 0;    while (str1[i] != 0)    &#123;        dst[i] = str1[i];        i++;    &#125;    int j = 0;    while (str2[j] != 0)    &#123;        dst[i + j] = str2[j];        j++;    &#125;    dst[i + j] = 0; //字符串结束符    printf(&quot;dst = %s\n&quot;, dst);    return 0;&#125;</code></pre><hr><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><hr><pre><code>#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;stdlib.h&gt;int main()&#123;    time_t tm = time(NULL);//得到系统时间    srand((unsigned int)tm);//随机种子只需要设置一次即可    int r = rand();    printf(&quot;r = %d\n&quot;, r);    return 0;&#125;</code></pre><hr><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h4><hr><p><code>#include &lt;string.h&gt;</code>计算指定指定字符串的长度，不包含字符串结束符<code>‘\0’</code>。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char str[] = &quot;abcdefg&quot;;    int n = strlen(str);    printf(&quot;n = %d\n&quot;, n);    return 0;&#125;</code></pre><hr><h4 id="strcpy-s"><a href="#strcpy-s" class="headerlink" title="strcpy_s"></a>strcpy_s</h4><hr><p><code>include &lt;string.h&gt;    char *strcpy_s(char *dest, const char *src);</code></p><p>功能：把src所指向的字符串复制到dest所指向的空间中，’\0’也会拷贝过去。返回值：成功：返回dest字符串的首地址；失败：NULL。</p><p>注意：如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char dest[20] = &quot;123456789&quot;;    char src[] = &quot;hello world&quot;;    strcpy_s(dest, src);    printf(&quot;%s\n&quot;, dest);    return 0;&#125;</code></pre><hr><h4 id="strncpy-s"><a href="#strncpy-s" class="headerlink" title="strncpy_s"></a>strncpy_s</h4><hr><p><code>#include &lt;string.h&gt;    char *strncpy_s(char *dest, const char *src, size_t n);</code>把src指向字符串的前n个字符复制到dest所指向的空间中，是否拷贝结束符看指定的长度是否包含’\0’。返回值：成功：返回dest字符串的首地址;失败：NULL。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char dest[20];    char src[] = &quot;hello world&quot;;    strncpy_s(dest, src, 5);    printf(&quot;%s\n&quot;, dest);    dest[5] = &apos;\0&apos;;    printf(&quot;%s\n&quot;, dest);    return 0;&#125;</code></pre><hr><h4 id="strcat-s"><a href="#strcat-s" class="headerlink" title="strcat_s"></a>strcat_s</h4><hr><p><code>#include &lt;string.h&gt;  char *strcat_s(char *dest, const char *src);</code>将src字符串连接到dest的尾部，<code>‘\0’</code>也会追加过去。返回值：成功：返回dest字符串的首地址；失败：NULL。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char str[20] = &quot;123&quot;;    char src[] = &quot;hello world&quot;;    strcat_s(str, src);    printf(&quot;%s\n&quot;, str);    return 0;&#125;</code></pre><hr><h4 id="strncat-s"><a href="#strncat-s" class="headerlink" title="strncat_s"></a>strncat_s</h4><hr><p><code>#include &lt;string.h&gt;  char *strncat(char *dest, const char *src, size_t n);</code>将src字符串前n个字符连接到dest的尾部，‘\0’也会追加过去。返回值：成功：返回dest字符串的首地址；失败：NULL。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char str[20] = &quot;123&quot;;    char src[] = &quot;hello world&quot;;    strncat_s(str, src,5);    printf(&quot;%s\n&quot;, str);    return 0;&#125;</code></pre><hr><h4 id="strcmp和strncmp"><a href="#strcmp和strncmp" class="headerlink" title="strcmp和strncmp"></a>strcmp和strncmp</h4><hr><p>比较 s1 和 s2 的大小，比较的是字符ASCII码大小。返回值：相等：0; 大于：&gt;0; 小于：&lt;0。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char str1[] = &quot;hello world&quot;;    char str2[] = &quot;hello mike&quot;;    if (strcmp(str1, str2) == 0)    &#123;        printf(&quot;str1==str2\n&quot;);    &#125;    else if (strcmp(str1, str2) &gt; 0)    &#123;        printf(&quot;str1&gt;str2\n&quot;);    &#125;    else    &#123;        printf(&quot;str1&lt;str2\n&quot;);    &#125;    return 0;&#125;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char str1[] = &quot;hello world&quot;;    char str2[] = &quot;hello mike&quot;;    if (strncmp(str1, str2, 5) == 0)    &#123;        printf(&quot;str1==str2\n&quot;);    &#125;    else if (strncmp(str1, str2, 5) &gt; 0)    &#123;        printf(&quot;str1&gt;str2\n&quot;);    &#125;    else    &#123;        printf(&quot;str1&lt;str2\n&quot;);    &#125;    return 0;&#125;</code></pre><hr><h4 id="sprintf-s"><a href="#sprintf-s" class="headerlink" title="sprintf_s"></a>sprintf_s</h4><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    char dst[100] = &#123; 0 &#125;;    int a = 10;    char src[] = &quot;hello world&quot;;    printf(&quot;a = %d, src = %s&quot;, a, src);    printf(&quot;\n&quot;);    int len = sprintf_s(dst, &quot;a = %d, src = %s&quot;, a, src);    printf(&quot;dst = \&quot; %s\&quot;\n&quot;, dst);// dst = &quot; a = 10, src = hello world&quot;    printf(&quot;len = %d\n&quot;, len);//25    return 0;&#125;</code></pre><hr><h4 id="strchr"><a href="#strchr" class="headerlink" title="strchr"></a>strchr</h4><hr><p><code>#include &lt;string.h&gt;  char *strchr(const char *s, int c);</code>在字符串s中查找字母c出现的位置。返回值：成功：返回第一次出现的c地址；失败：NULL。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char src[] = &quot;ddda123abcd&quot;;    char* p = strchr(src, &apos;a&apos;);    printf(&quot;p = %s\n&quot;, p);    return 0;&#125;</code></pre><hr><h4 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h4><hr><p><code>#include &lt;string.h&gt;  char *strstr(const char *haystack, const char *needle);</code>在字符串haystack中查找字符串needle出现的位置。返回值：成功：返回第一次出现的needle地址；失败：NULL。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;    char src[] = &quot;ddddabcd123abcd333abcd&quot;;    char* p = strstr(src, &quot;abcd&quot;);    printf(&quot;p = %s\n&quot;, p);//p = abcd123abcd333abcd    return 0;&#125;</code></pre><hr><h4 id="strstr-1"><a href="#strstr-1" class="headerlink" title="strstr"></a>strstr</h4><hr><p><code>#include &lt;stdlib.h&gt; int atoi(const char *nptr);</code>atoi()会扫描nptr字符串，跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符(‘\0’)才结束转换，并将结果返回返回值。返回值：成功转换后整数</p><p>类似的函数有：atof()：把一个小数形式的字符串转化为一个浮点数。atol()：将一个字符串转化为long类型。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123;    char str1[] = &quot;-10&quot;;    int num1 = atoi(str1);    printf(&quot;num1 = %d\n&quot;, num1);//num1 = -10    char str2[] = &quot;0.123&quot;;    double num2 = atof(str2);    printf(&quot;num2 = %lf\n&quot;, num2);//num2 = 0.123000    return 0;&#125;</code></pre><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><hr><p>函数定义的一般形式：</p><pre><code>返回类型 函数名(形式参数列表)&#123;    数据定义部分;    执行语句部分;&#125;</code></pre><p><strong>如果没有形参，圆括号内容为空，或写一个void关键字</strong>。</p><hr><h4 id="函数的形参和实参"><a href="#函数的形参和实参" class="headerlink" title="函数的形参和实参"></a>函数的形参和实参</h4><hr><p>形参出现在函数定义中，在整个函数体内都可以使用，离开该函数则不能使用。<strong>实参出现在主调函数中</strong>，进入被调函数后，实参也不能使用。单向传递，<strong>只由实参传给形参，而不能由形参传回来给实参</strong>。在调用函数时，编译系统临时给形参分配存储单元。调用结束后，形参单元被释放。实参单元与形参单元是不同的单元。调用结束后，形参单元被释放，函数调用结束返回主调函数后则不能再使用该形参变量。实参单元仍保留并维持原值。因此，<strong>在执行一个被调用函数时，形参的值如果发生改变，并不会改变主调函数中实参的值</strong>。</p><p>实参可以是常量、变量或表达式。</p><hr><h4 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h4><hr><p>函数定义的位置在主调函数之后，则必须在调用此函数之前对被调用的函数作声明。</p><p>所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行。注意：一个函数只能被定义一次，但可以声明多次。</p><pre><code>#include &lt;stdio.h&gt;int max(int x, int y); // 函数的声明，分号不能省略// int max(int, int); // 另一种方式int main()&#123;    int a = 10, b = 25, num_max = 0;    num_max = max(a, b); // 函数的调用    printf(&quot;num_max = %d\n&quot;, num_max);    return 0;&#125;// 函数的定义int max(int x, int y)&#123;    return x &gt; y ? x : y;&#125;</code></pre><hr><h4 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h4><hr><p>在main函数中调用exit和return结果是一样的，但在子函数中调用return只是代表子函数终止了，在子函数中调用exit，那么程序终止。</p><hr><h4 id="分文件编程"><a href="#分文件编程" class="headerlink" title="分文件编程"></a>分文件编程</h4><hr><p>max.h文件</p><pre><code>extern int max(int a, int b);</code></pre><p>max.c文件</p><pre><code>int max(int x, int y)&#123;    return x &gt; y ? x : y;&#125;</code></pre><p>main.c文件</p><pre><code>#include &lt;stdio.h&gt;#include &quot;max.h&quot;int main()&#123;    int a = 10, b = 25, num_max = 0;    num_max = max(a, b); // 函数的调用    printf(&quot;num_max = %d\n&quot;, num_max);    return 0;&#125;</code></pre><hr><h4 id="防止头文件重复包含"><a href="#防止头文件重复包含" class="headerlink" title="防止头文件重复包含"></a>防止头文件重复包含</h4><hr><p>方法一：</p><pre><code>#ifndef __SOMEFILE_H__#define __SOMEFILE_H__// 声明语句#endif</code></pre><p>方法二：</p><pre><code>#pragma once// 声明语句</code></pre><hr><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><pre><code>int  i    定义整形变量int *p    定义一个指向int的指针变量int a[10]    定义一个有10个元素的数组，每个元素类型为intint *p[10]    定义一个有10个元素的数组，每个元素类型为int*int func()    定义一个函数，返回值为int型int *func()    定义一个函数，返回值为int *型int **p    定义一个指向int的指针的指针，二级指针</code></pre><h4 id="内存地址和指针"><a href="#内存地址和指针" class="headerlink" title="内存地址和指针"></a>内存地址和指针</h4><hr><p>将内存抽象成一个很大的一维字符数组。编码就是对内存的每一个字节分配一个32位或64位的编号（与32位或者64位处理器相关）。这个内存编号我们称之为内存地址。</p><p>内存中的每一个数据都会分配相应的地址：char:占一个字节分配一个地址；int: 占四个字节分配四个地址。</p><p><strong>内存区的每一个字节都有一个编号，这就是“地址”。</strong></p><p>如果在程序中定义了一个变量，在对程序进行编译或运行时，系统就会给这个变量分配内存单元，并确定它的内存地址(编号)</p><p><strong>指针的实质就是内存“地址”。指针就是地址，地址就是指针。指针是内存单元的编号，指针变量是存放地址的变量。</strong></p><p>指针也是一种数据类型，指针变量也是一种变量。指针变量指向谁，就把谁的地址赋值给指针变量。<code>“*”</code>操作符操作的是指针变量指向的内存空间。</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a = 0;    char b = 100;    printf(&quot;%p, %p\n&quot;, &amp;a, &amp;b); //打印a, b的地址    //int *代表是一种数据类型，int*指针类型，p才是变量名    //定义了一个指针类型的变量，可以指向一个int类型变量的地址    int* p;    p = &amp;a;//将a的地址赋值给变量p，p也是一个变量，值是一个内存地址编号    printf(&quot;%d\n&quot;, *p);//p指向了a的地址，*p就是a的值    char* p1 = &amp;b;    printf(&quot;%c\n&quot;, *p1);//*p1指向了b的地址，*p1就是b的值    return 0;&#125;</code></pre><hr><h4 id="通过指针间接修改变量的值"><a href="#通过指针间接修改变量的值" class="headerlink" title="通过指针间接修改变量的值"></a>通过指针间接修改变量的值</h4><hr><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a = 0;    int b = 11;    int* p = &amp;a;    *p = 100;    printf(&quot;a = %d, *p = %d\n&quot;, a, *p);//a = 100, *p = 100    p = &amp;b;    *p = 22;    printf(&quot;b = %d, *p = %d\n&quot;, b, *p);//b = 22, *p = 22    return 0;&#125;</code></pre><hr><h4 id="指针大小"><a href="#指针大小" class="headerlink" title="指针大小"></a>指针大小</h4><hr><p>使用sizeof()测量指针的大小，得到的总是：4或8。sizeof()测的是指针变量指向存储地址的大小。</p><p>在32位平台，所有的指针（地址）都是32位(4字节)。在64位平台，所有的指针（地址）都是64位(8字节)。</p><hr><h4 id="野指针和空指针"><a href="#野指针和空指针" class="headerlink" title="野指针和空指针"></a>野指针和空指针</h4><hr><p>指针变量也是变量，是变量就可以任意赋值，不要越界即可（32位为4字节，64位为8字节），但是，任意数值赋值给指针变量没有意义，因为这样的指针就成了野指针，此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)。所以，野指针不会直接引发错误，操作野指针指向的内存区域才会出问题。</p><pre><code>int a = 100;int* p;p = a; //把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义p = 0x12345678; //给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义*p = 1000;  //操作野指针指向未知区域，内存出问题，err</code></pre><p>但是，野指针和有效指针变量保存的都是数值，为了标志此指针变量没有指向任何变量(空闲可用)，C语言中，可以把NULL赋值给此指针，这样就标志此指针为空指针，没有任何指针。NULL是一个值为0的宏常量：</p><pre><code>int *p = NULL;</code></pre><hr><h4 id="万能指针"><a href="#万能指针" class="headerlink" title="万能指针"></a>万能指针</h4><hr><p><code>void *</code>指针可以指向任意变量的内存空间：</p><pre><code>void* p = NULL;int a = 10;p = (void*)&amp;a; //指向变量时，最好转换为void *//使用指针变量指向的内存时，转换为int **((int*)p) = 11;printf(&quot;a = %d\n&quot;, a);//11</code></pre><hr><h4 id="const修饰的指针变量"><a href="#const修饰的指针变量" class="headerlink" title="const修饰的指针变量"></a>const修饰的指针变量</h4><hr><p>指针常量和常量的指针</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a = 100;    int b = 200;    //指向常量的指针    //修饰*，指针指向内存区域不能修改，指针指向可以变    const int* p1 = &amp;a; //等价于int const *p1 = &amp;a;    //*p1 = 111; //err    p1 = &amp;b; //ok    //指针常量    //修饰p2，指针指向不能变，指针指向的内存可以修改    int* const p2 = &amp;a;    //p2 = &amp;b; //err    *p2 = 222; //ok    return 0;&#125;</code></pre><hr><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><hr><p>数组名字是数组的首元素地址，但它是一个常量：</p><pre><code>int a[] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;printf(&quot;a = %p\n&quot;, a);//a = 0000002A5F6FFB48printf(&quot;&amp;a[0] = %p\n&quot;, &amp;a[0]);//&amp;a[0] = 0000002A5F6FFB48//a = 10; //err, 数组名只是常量，不能修改</code></pre><hr><p>指针操作数组元素</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a[] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int i = 0;    int n = sizeof(a) / sizeof(a[0]);    for (i = 0; i &lt; n; i++)    &#123;        //printf(&quot;%d, &quot;, a[i]);        printf(&quot;%d, &quot;, *(a + i));//1, 2, 3, 4, 5, 6, 7, 8, 9,    &#125;    printf(&quot;\n&quot;);    int* p = a; //定义一个指针变量保存a的地址    for (i = 0; i &lt; n; i++)    &#123;        p[i] = 2 * i;    &#125;    for (i = 0; i &lt; n; i++)    &#123;        printf(&quot;%d, &quot;, *(p + i));//0, 2, 4, 6, 8, 10, 12, 14, 16,    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><hr><p>指针加法运算:指针计算不是简单的整数相加，如果是一个<code>int *</code>，+1的结果是增加一个int的大小;如果是一个<code>char *</code>，+1的结果是增加一个char大小。</p><pre><code>int a;int* p = &amp;a;printf(&quot;%d\n&quot;, p);//896988804p += 2;//移动了2个intprintf(&quot;%d\n&quot;, p);//896988812char b = 0;char* p1 = &amp;b;printf(&quot;%d\n&quot;, p1);//896988812p1 += 2;//移动了2个charprintf(&quot;%d\n&quot;, p1);//896988812return 0;</code></pre><hr><p>通过改变指针指向操作数组元素：</p><pre><code>#include &lt;stdio.h&gt;int main()&#123;    int a[] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int i = 0;    int n = sizeof(a) / sizeof(a[0]);    int *p = a;    for (i = 0; i &lt; n; i++)    &#123;        printf(&quot;%d, &quot;, *p);        p++;    &#125;    printf(&quot;\n&quot;);//1, 2, 3, 4, 5, 6, 7, 8, 9,    return 0;&#125;</code></pre><hr><p>指针减法运算</p><pre><code>int a[] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;int* p2 = &amp;a[2]; //第2个元素地址int* p1 = &amp;a[1]; //第1个元素地址printf(&quot;p1 = %p, p2 = %p\n&quot;, p1, p2);int n1 = p2 - p1; //n1 = 1int n2 = (int)p2 - (int)p1; //n2 = 4printf(&quot;n1 = %d, n2 = %d\n&quot;, n1, n2);</code></pre><hr><p>指针数组，它是数组，数组的每个元素都是指针类型。</p><pre><code>//指针数组int* p[3];int a = 1;int b = 2;int c = 3;int i = 0;p[0] = &amp;a;p[1] = &amp;b;p[2] = &amp;c;for (i = 0; i &lt; sizeof(p) / sizeof(p[0]); i++)&#123;    printf(&quot;%d, &quot;, *(p[i]));//1, 2, 3,&#125;printf(&quot;\n&quot;);</code></pre><hr><h3 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h3><hr><p>C语言允许有多级指针存在，在实际的程序中一级指针最常用，其次是二级指针。二级指针就是指向一个一级指针变量地址的指针。</p><pre><code>int a = 10;int* p = &amp;a; //一级指针*p = 100; //*p就是aint** q = &amp;p;//*q就是p//**q就是aint*** t = &amp;q;//*t就是q//**t就是p//***t就是a</code></pre><hr><h3 id="指针和函数"><a href="#指针和函数" class="headerlink" title="指针和函数"></a>指针和函数</h3><h4 id="函数形参改变实参的值"><a href="#函数形参改变实参的值" class="headerlink" title="函数形参改变实参的值"></a>函数形参改变实参的值</h4><hr><pre><code>#include &lt;stdio.h&gt;void swap1(int x, int y)&#123;    int tmp;    tmp = x;    x = y;    y = tmp;    printf(&quot;x = %d, y = %d\n&quot;, x, y);//x = 5, y = 3&#125;void swap2(int* x, int* y)&#123;    int tmp;    tmp = *x;    *x = *y;    *y = tmp;&#125;int main()&#123;    int a = 3;    int b = 5;    swap1(a, b); //值传递    printf(&quot;a = %d, b = %d\n&quot;, a, b);//a = 3, b = 5    a = 3;    b = 5;    swap2(&amp;a, &amp;b); //地址传递    printf(&quot;a2 = %d, b2 = %d\n&quot;, a, b);//a2 = 5, b2 = 3    return 0;&#125;</code></pre><hr><h4 id="数组名做函数参数"><a href="#数组名做函数参数" class="headerlink" title="数组名做函数参数"></a>数组名做函数参数</h4><hr><p>数组名做函数参数，函数的形参会退化为指针。</p><pre><code>//void printArrary(int a[10], int n)//void printArrary(int a[], int n)void printArrary(int* a, int n)&#123;    int i = 0;    for (i = 0; i &lt; n; i++)    &#123;        printf(&quot;%d, &quot;, a[i]);//1, 2, 3, 4, 5, 6, 7, 8, 9,    &#125;    printf(&quot;\n&quot;);&#125;int main()&#123;    int a[] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;    int n = sizeof(a) / sizeof(a[0]);    //数组名做函数参数    printArrary(a, n);    return 0;&#125;</code></pre><hr><h4 id="指针做为函数的返回值"><a href="#指针做为函数的返回值" class="headerlink" title="指针做为函数的返回值"></a>指针做为函数的返回值</h4><hr><pre><code>#include &lt;stdio.h&gt;int a = 10;int* getA()&#123;    return &amp;a;&#125;int main()&#123;    *(getA()) = 111;    printf(&quot;a = %d\n&quot;, a);//a = 111    return 0;&#125;</code></pre><hr><h3 id="指针和字符串"><a href="#指针和字符串" class="headerlink" title="指针和字符串"></a>指针和字符串</h3><hr><pre><code>char str[] = &quot;hello world&quot;;char* p = str;*p = &apos;m&apos;;p++;*p = &apos;i&apos;;printf(&quot;%s\n&quot;, str);//millo worldp = &quot;mike jiang&quot;;printf(&quot;%s\n&quot;, p);//mike jiangchar* q = &quot;test&quot;;printf(&quot;%s\n&quot;, q);//test</code></pre><hr><p>字符指针做函数参数</p><pre><code>#include &lt;stdio.h&gt;void mystrcat(char* dest, const char* src)&#123;    int len1 = 0;    int len2 = 0;    while (dest[len1])    &#123;        len1++;    &#125;    while (src[len2])    &#123;        len2++;    &#125;    int i;    for (i = 0; i &lt; len2; i++)    &#123;        dest[len1 + i] = src[i];    &#125;&#125;int main()&#123;    char dst[100] = &quot;hello mike&quot;;    char src[] = &quot;123456&quot;;    mystrcat(dst, src);    printf(&quot;dst = %s\n&quot;, dst);//dst = hello mike123456    return 0;&#125;</code></pre><hr><p><strong>const修饰的指针，变量从左往右看，跳过类型，看修饰哪个字符，如果是<code>*</code>， 说明指针指向的内存不能改变，如果是指针变量，说明指针的指向不能改变，指针的值不能修改。</strong></p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main(void)&#123;    //const修饰一个变量为只读    const int a = 10;    //a = 100; //err    //指针变量， 指针指向的内存， 2个不同概念    char buf[] = &quot;aklgjdlsgjlkds&quot;;    //从左往右看，跳过类型，看修饰哪个字符    //如果是*， 说明指针指向的内存不能改变    //如果是指针变量，说明指针的指向不能改变，指针的值不能修改    const char* p = buf;    // 等价于上面 char const *p1 = buf;    //p[1] = &apos;2&apos;; //err    p = &quot;agdlsjaglkdsajgl&quot;; //ok    char* const p2 = buf;    p2[1] = &apos;3&apos;;    //p2 = &quot;salkjgldsjaglk&quot;; //err    //p3为只读，指向不能变，指向的内存也不能变    const char* const p3 = buf;    return 0;&#125;</code></pre><hr><p>查找”abcd”个数-while</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main(void)&#123;    char* p = &quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;;    int n = 0;    while ((p = strstr(p, &quot;abcd&quot;)) != NULL)    &#123;        //能进来，肯定有匹配的子串        //重新设置起点位置        p = p + strlen(&quot;abcd&quot;);        n++;        if (*p == 0) //如果到结束符        &#123;            break;        &#125;    &#125;    printf(&quot;n = %d\n&quot;, n);    return 0;&#125;</code></pre><hr><p>查找”abcd”个数-do-while</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main(void)&#123;    char* p = &quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;;    int n = 0;    do    &#123;        p = strstr(p, &quot;abcd&quot;);        if (p != NULL)        &#123;            n++; //累计个数            //重新设置查找的起点            p = p + strlen(&quot;abcd&quot;);        &#125;        else //如果没有匹配的字符串，跳出循环        &#123;            break;        &#125;    &#125; while (*p != 0); //如果没有到结尾    printf(&quot;n = %d\n&quot;, n);    return 0;&#125;</code></pre><hr><p>求非空字符串元素的个数：</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;ctype.h&gt;int fun(char* p, int* n)&#123;    if (p == NULL || n == NULL)    &#123;        return -1;    &#125;    int begin = 0;    int end = strlen(p) - 1;    //从左边开始    //如果当前字符为空，而且没有结束    while (p[begin] == &apos; &apos; &amp;&amp; p[begin] != 0)    &#123;        begin++; //位置从右移动一位    &#125;    //从右往左移动    while (p[end] == &apos; &apos; &amp;&amp; end &gt; 0)    &#123;        end--; //往左移动    &#125;    if (end == 0)    &#123;        return -2;    &#125;    //非空元素个数    *n = end - begin + 1;    return 0;&#125;int main(void)&#123;    char* p = &quot;      abcddsgadsgefg      &quot;;    int ret = 0;    int n = 0;    ret = fun(p, &amp;n);    if (ret != 0)    &#123;        return ret;    &#125;    printf(&quot;非空字符串元素个数：%d\n&quot;, n);//非空字符串元素个数：14    return 0;&#125;</code></pre><hr><p>字符串反转模型(逆置):</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int inverse(char* p)&#123;    if (p == NULL)    &#123;        return -1;    &#125;    char* str = p;    int begin = 0;    int end = strlen(str) - 1;    char tmp;    while (begin &lt; end)    &#123;        //交换元素        tmp = str[begin];        str[begin] = str[end];        str[end] = tmp;        begin++;  //往右移动位置        end--;        //往左移动位置    &#125;    return 0;&#125;int main(void)&#123;    //char *str = &quot;abcdefg&quot;; //文件常量区，内容不允许修改    char str[] = &quot;abcdef&quot;;    int ret = inverse(str);    if (ret != 0)    &#123;        return ret;    &#125;    printf(&quot;str ========== %s\n&quot;, str);//str ========== fedcba    return 0;&#125;</code></pre><hr><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><hr><pre><code>类型    作用域    生命周期    存储位置auto变量    一对&#123;&#125;内    当前函数    栈区static局部变量    一对&#123;&#125;内    整个程序运行期    初始化在data段，未初始化在BSS段extern变量    整个程序    整个程序运行期    初始化在data段，未初始化在BSS段static全局变量    当前文件    整个程序运行期    初始化在data段，未初始化在BSS段extern函数    整个程序    整个程序运行期    代码区static函数    当前文件    整个程序运行期    代码区register变量    一对&#123;&#125;内    当前函数    运行时存储在CPU寄存器字符串常量    当前文件    整个程序运行期    data段</code></pre><p>C代码经过预处理、编译、汇编、链接4步后生成一个可执行程序。</p><p><strong>只有c语言将数组放在栈区</strong>。</p><hr><h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc()"></a>malloc()</h4><hr><pre><code>#include &lt;stdlib.h&gt;void *malloc(size_t size);</code></pre><p>功能：在内存的动态存储区(堆区)中分配一块长度为size字节的连续区域，用来存放类型说明符指定的类型。分配的内存空间内容不确定，一般使用memset初始化。参数：size：需要分配内存大小(单位：字节)。返回值：成功：分配空间的起始地址，失败：NULL。</p><hr><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><hr><pre><code>#include &lt;stdlib.h&gt;void free(void *ptr);</code></pre><p>功能：释放ptr所指向的一块内存空间，ptr是一个任意类型的指针变量，指向被释放区域的首地址。对同一内存空间多次释放会出错。<br>参数：ptr：需要释放空间的首地址，被释放区应是由malloc函数所分配的区域。返回值：无。</p><hr><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><hr><p>定义结构体变量的方式：先声明结构体类型再定义变量名；在声明类型的同时定义变量；直接定义结构体类型变量（无类型名）。</p><p>结构体类型：指定了一个结构体类型，它相当于一个模型，但其中并无具体数据，系统对之也不分配实际内存单元。</p><p>结构体变量：系统根据结构体类型（内部成员状况）为之分配空间。</p><pre><code>//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;//先定义类型，再定义变量（常用）struct stu s1 = &#123; &quot;mike&quot;, 18 &#125;;//定义类型同时定义变量struct stu2&#123;    char name[50];    int age;&#125;s2 = &#123; &quot;lily&quot;, 22 &#125;;struct&#123;    char name[50];    int age;&#125;s3 = &#123; &quot;yuri&quot;, 25 &#125;;</code></pre><hr><h4 id="结构体成员的使用"><a href="#结构体成员的使用" class="headerlink" title="结构体成员的使用"></a>结构体成员的使用</h4><hr><pre><code>#include&lt;stdio.h&gt;#include&lt;string.h&gt;//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu s1;    //如果是普通变量，通过点运算符操作结构体成员    strcpy(s1.name, &quot;abc&quot;);    s1.age = 18;    printf(&quot;s1.name = %s, s1.age = %d\n&quot;, s1.name, s1.age);    //如果是指针变量，通过-&gt;操作结构体成员    strcpy((&amp;s1)-&gt;name, &quot;test&quot;);    (&amp;s1)-&gt;age = 22;    printf(&quot;(&amp;s1)-&gt;name = %s, (&amp;s1)-&gt;age = %d\n&quot;, (&amp;s1)-&gt;name, (&amp;s1)-&gt;age);    return 0;&#125;</code></pre><hr><h4 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h4><hr><pre><code>#include &lt;stdio.h&gt;//统计学生成绩struct stu&#123;    int num;    char name[20];    char sex;    float score;&#125;;int main()&#123;    //定义一个含有5个元素的结构体数组并将其初始化    struct stu boy[5] = &#123;        &#123; 101, &quot;Li ping&quot;, &apos;M&apos;, 45 &#125;,        &#123; 102, &quot;Zhang ping&quot;, &apos;M&apos;, 62.5 &#125;,        &#123; 103, &quot;He fang&quot;, &apos;F&apos;, 92.5 &#125;,        &#123; 104, &quot;Cheng ling&quot;, &apos;F&apos;, 87 &#125;,        &#123; 105, &quot;Wang ming&quot;, &apos;M&apos;, 58 &#125; &#125;;    int i = 0;    int c = 0;    float ave, s = 0;    for (i = 0; i &lt; 5; i++)    &#123;        s += boy[i].score;    //计算总分        if (boy[i].score &lt; 60)        &#123;            c += 1;        //统计不及格人的分数        &#125;    &#125;    printf(&quot;s=%f\n&quot;, s);//打印总分数    s=345.000000    ave = s / 5;                    //计算平均分数    printf(&quot;average=%f\ncount=%d\n\n&quot;, ave, c); //打印平均分与不及格人数 average=69.000000 count=2    for (i = 0; i &lt; 5; i++)    &#123;        printf(&quot; name=%s,  score=%f\n&quot;, boy[i].name, boy[i].score);        // printf(&quot; name=%s,  score=%f\n&quot;, (boy+i)-&gt;name, (boy+i)-&gt;score);    &#125;    return 0;&#125;</code></pre><hr><h4 id="结构体套结构体"><a href="#结构体套结构体" class="headerlink" title="结构体套结构体"></a>结构体套结构体</h4><hr><pre><code>#include &lt;stdio.h&gt;struct person&#123;    char name[20];    char sex;&#125;;struct stu&#123;    int id;    struct person info;&#125;;int main()&#123;    struct stu s[2] = &#123; 1, &quot;lily&quot;, &apos;F&apos;, 2, &quot;yuri&quot;, &apos;M&apos; &#125;;    int i = 0;    for (i = 0; i &lt; 2; i++)    &#123;        printf(&quot;id = %d\tinfo.name=%s\tinfo.sex=%c\n&quot;, s[i].id, s[i].info.name, s[i].info.sex);    &#125;    return 0;&#125;</code></pre><hr><h4 id="结构体赋值"><a href="#结构体赋值" class="headerlink" title="结构体赋值"></a>结构体赋值</h4><hr><pre><code>#include&lt;stdio.h&gt;#include&lt;string.h&gt;//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu s1;    //如果是普通变量，通过点运算符操作结构体成员    strcpy(s1.name, &quot;abc&quot;);    s1.age = 18;    printf(&quot;s1.name = %s, s1.age = %d\n&quot;, s1.name, s1.age);    //相同类型的两个结构体变量，可以相互赋值    //把s1成员变量的值拷贝给s2成员变量的内存    //s1和s2只是成员变量的值一样而已，它们还是没有关系的两个变量    struct stu s2 = s1;    //memcpy(&amp;s2, &amp;s1, sizeof(s1));    printf(&quot;s2.name = %s, s2.age = %d\n&quot;, s2.name, s2.age);    return 0;&#125;</code></pre><hr><h4 id="指向普通结构体变量的指针"><a href="#指向普通结构体变量的指针" class="headerlink" title="指向普通结构体变量的指针"></a>指向普通结构体变量的指针</h4><hr><pre><code>#include&lt;stdio.h&gt;//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu s1 = &#123; &quot;lily&quot;, 18 &#125;;    //如果是指针变量，通过-&gt;操作结构体成员    struct stu* p = &amp;s1;    printf(&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;, p-&gt;name, p-&gt;age);//p-&gt;name = lily, p-&gt;age=18    printf(&quot;(*p).name = %s, (*p).age=%d\n&quot;, (*p).name, (*p).age);//(*p).name = lily, (*p).age=18    return 0;&#125;</code></pre><hr><h4 id="堆区结构体变量"><a href="#堆区结构体变量" class="headerlink" title="堆区结构体变量"></a>堆区结构体变量</h4><hr><pre><code>#include&lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;int main()&#123;    struct stu* p = NULL;    p = (struct stu*)malloc(sizeof(struct  stu));    //如果是指针变量，通过-&gt;操作结构体成员    strcpy(p-&gt;name, &quot;test&quot;);    p-&gt;age = 22;    printf(&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;, p-&gt;name, p-&gt;age);    printf(&quot;(*p).name = %s, (*p).age=%d\n&quot;, (*p).name, (*p).age);    free(p);    p = NULL;    return 0;&#125;</code></pre><hr><h4 id="结构体套一级指针"><a href="#结构体套一级指针" class="headerlink" title="结构体套一级指针"></a>结构体套一级指针</h4><hr><pre><code>#include&lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;//结构体类型的定义struct stu&#123;    char* name; //一级指针    int age;&#125;;int main()&#123;    struct stu* p = NULL;    p = (struct stu*)malloc(sizeof(struct  stu));    p-&gt;name = malloc(strlen(&quot;test&quot;) + 1);    strcpy(p-&gt;name, &quot;test&quot;);    p-&gt;age = 22;    printf(&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;, p-&gt;name, p-&gt;age);    printf(&quot;(*p).name = %s, (*p).age=%d\n&quot;, (*p).name, (*p).age);    if (p-&gt;name != NULL)    &#123;        free(p-&gt;name);        p-&gt;name = NULL;    &#125;    if (p != NULL)    &#123;        free(p);        p = NULL;    &#125;    return 0;&#125;</code></pre><hr><h4 id="结构体普通变量做函数参数"><a href="#结构体普通变量做函数参数" class="headerlink" title="结构体普通变量做函数参数"></a>结构体普通变量做函数参数</h4><hr><pre><code>#include&lt;stdio.h&gt;#include &lt;string.h&gt;//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;//函数参数为结构体普通变量void set_stu(struct stu tmp)&#123;    strcpy(tmp.name, &quot;mike&quot;);    tmp.age = 18;    printf(&quot;tmp.name = %s, tmp.age = %d\n&quot;, tmp.name, tmp.age);&#125;int main()&#123;    struct stu s = &#123; 0 &#125;;    set_stu(s); //值传递    printf(&quot;s.name = %s, s.age = %d\n&quot;, s.name, s.age);    return 0;&#125;</code></pre><hr><h4 id="结构体指针变量做函数参数"><a href="#结构体指针变量做函数参数" class="headerlink" title="结构体指针变量做函数参数"></a>结构体指针变量做函数参数</h4><hr><pre><code>#include&lt;stdio.h&gt;#include &lt;string.h&gt;//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;//函数参数为结构体指针变量void set_stu_pro(struct stu *tmp)&#123;    strcpy(tmp-&gt;name, &quot;mike&quot;);    tmp-&gt;age = 18;&#125;int main()&#123;    struct stu s = &#123; 0 &#125;;    set_stu_pro(&amp;s); //地址传递    printf(&quot;s.name = %s, s.age = %d\n&quot;, s.name, s.age);    return 0;&#125;</code></pre><hr><h4 id="结构体数组名做函数参数"><a href="#结构体数组名做函数参数" class="headerlink" title="结构体数组名做函数参数"></a>结构体数组名做函数参数</h4><hr><pre><code>#include&lt;stdio.h&gt;//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;//void set_stu_pro(struct stu tmp[100], int n)//void set_stu_pro(struct stu tmp[], int n)void set_stu_pro(struct stu *tmp, int n)&#123;    int i = 0;    for (i = 0; i &lt; n; i++)    &#123;        sprintf(tmp-&gt;name, &quot;name%d%d%d&quot;, i, i, i);        tmp-&gt;age = 20 + i;        tmp++;    &#125;&#125;int main()&#123;    struct stu s[3] = &#123; 0 &#125;;    int i = 0;    int n = sizeof(s) / sizeof(s[0]);    set_stu_pro(s, n); //数组名传递    for (i = 0; i &lt; n; i++)    &#123;        printf(&quot;%s, %d\n&quot;, s[i].name, s[i].age);    &#125;    return 0;&#125;</code></pre><hr><h4 id="const修饰结构体指针形参变量"><a href="#const修饰结构体指针形参变量" class="headerlink" title="const修饰结构体指针形参变量"></a>const修饰结构体指针形参变量</h4><hr><pre><code>//结构体类型的定义struct stu&#123;    char name[50];    int age;&#125;;void fun1(struct stu* const p)&#123;    //p = NULL; //err    p-&gt;age = 10; //ok&#125;//void fun2(struct stu const*  p)void fun2(const struct stu* p)&#123;    p = NULL; //ok    //p-&gt;age = 10; //err&#125;void fun3(const struct stu* const p)&#123;    //p = NULL; //err    //p-&gt;age = 10; //err&#125;</code></pre><hr><h3 id="共用体-联合体"><a href="#共用体-联合体" class="headerlink" title="共用体(联合体)"></a>共用体(联合体)</h3><hr><p>联合union是一个能在同一个存储空间存储不同类型数据的类型；联合体所占的内存长度等于其最长成员的长度，也有叫做共用体；</p><p>同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用；</p><p>共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖；</p><p>共用体变量的地址和它的各成员的地址都是同一地址。</p><pre><code>#include &lt;stdio.h&gt;//共用体也叫联合体 union Test&#123;    unsigned char a;    unsigned int b;    unsigned short c;&#125;;int main()&#123;    //定义共用体变量    union Test tmp;    //1、所有成员的首地址是一样的    printf(&quot;%p, %p, %p\n&quot;, &amp;(tmp.a), &amp;(tmp.b), &amp;(tmp.c));//0000003825CFF6B4, 0000003825CFF6B4, 0000003825CFF6B4    //2、共用体大小为最大成员类型的大小    printf(&quot;%lu\n&quot;, sizeof(union Test));//4    //3、一个成员赋值，会影响另外的成员    //左边是高位，右边是低位    //低位放低地址，高位放高地址    tmp.b = 0x44332211;    printf(&quot;%x\n&quot;, tmp.a); //11    printf(&quot;%x\n&quot;, tmp.c); //2211    tmp.a = 0x00;    printf(&quot;short: %x\n&quot;, tmp.c); //2200    printf(&quot;int: %x\n&quot;, tmp.b); //44332200    return 0;&#125;</code></pre><hr><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><hr><p>枚举：将变量的值一一列举出来，变量的值只限于列举出来的值的范围内。</p><pre><code>enum  枚举名&#123;    枚举值表&#125;;</code></pre><p>在枚举值表中应列出所有可用值，也称为枚举元素。枚举值是常量，不能在程序中用赋值语句再对它赋值。枚举元素本身由系统定义了一个表示序号的数值从0开始顺序定义为0，1，2 …。</p><pre><code>#include &lt;stdio.h&gt;enum weekday&#123;    sun = 2, mon, tue, wed, thu, fri, sat&#125;;enum bool&#123;    flase, true&#125;;int main()&#123;    enum weekday a, b, c;    a = sun;    b = mon;    c = tue;    printf(&quot;%d,%d,%d\n&quot;, a, b, c);//2,3,4    enum bool flag;    flag = true;    if (flag == 1)    &#123;        printf(&quot;flag为真\n&quot;);//flag为真    &#125;    return 0;&#125;</code></pre><hr><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><hr><p>为一种数据类型(基本类型或自定义数据类型)定义一个新名字，不能创建新类型。与<code>#define</code>不同，typedef仅限于数据类型，而不是能是表达式或具体的值。<code>#define</code>发生在预处理，typedef发生在编译阶段。</p><pre><code>#include &lt;stdio.h&gt;typedef int INT;typedef char BYTE;typedef BYTE T_BYTE;typedef unsigned char UBYTE;typedef struct type&#123;    UBYTE a;    INT b;    T_BYTE c;&#125;TYPE, * PTYPE;int main()&#123;    TYPE t;    t.a = 254;    t.b = 10;    t.c = &apos;c&apos;;    PTYPE p = &amp;t;    printf(&quot;%u, %d, %c\n&quot;, p-&gt;a, p-&gt;b, p-&gt;c);//254, 10, c    return 0;&#125;</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNI入门</title>
    <link href="/2020/03/07/33.JNI%E5%85%A5%E9%97%A8/"/>
    <url>/2020/03/07/33.JNI%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JNI含义:<code>java native interface</code></p><p>JNI好处:</p><p>1、JNI可以扩展java虚拟机的能力，让java代码可以调用驱动</p><p>2、C/C++的效率要高，通过jni把耗时操作方法C/C++可以提高java运行效率</p><p>3、java代码编译成的<code>.class</code>文件安全性较差, 可以通过jni把重要的业务逻辑放到c/c++去实现,c/c++反编译比较困难,安全性较高.</p><h2 id="C基本语法"><a href="#C基本语法" class="headerlink" title="C基本语法"></a>C基本语法</h2><h3 id="1、C的基本数据类型"><a href="#1、C的基本数据类型" class="headerlink" title="1、C的基本数据类型"></a>1、C的基本数据类型</h3><p>java基本数据类型:boolean(1个字节),byte(1),char(2),short(2),int(4),long(8),float(4),double(8)  </p><p>C的基本数据类型:char(1个字节), int(4), float(4), double(8), long(4), short(2), signed, unsigned, void</p><p>signed:有符号数,可以表示负数;unsigned:无符号数,不可以表示负数。signed和unsigned只能用来修饰整形变量char、short、int、long。</p><p>C没有boolean和byte，C用0和非0表示false和true。</p><h3 id="2、占位符和字符串"><a href="#2、占位符和字符串" class="headerlink" title="2、占位符和字符串"></a>2、占位符和字符串</h3><p>占位符：</p><pre><code>%d  -  int%ld – long int%lld - long long%hd – short%c  - char%f -  float%lf – double%u – 无符号数%x – 十六进制输出 int 或者long int 或者short int%o -  八进制输出%s – 字符串</code></pre><blockquote><p>占位符不要乱用,要选择正确的对应类型,否则可能会损失精度。</p></blockquote><p>C没有String类型,C的字符串实际就是字符数组。C字符串两种定义方式：</p><pre><code>//注意&apos;\0&apos;字符串结束符, []只能再变量名之后char str[] = &#123;&apos;q&apos;,&apos;w&apos;,&apos;e&apos;,&apos;r&apos;,&apos;t&apos;,&apos;\0&apos;&#125;;//这种定义方式不用写结束符,可以表示汉字char str[] = &quot;你好&quot;; </code></pre><blockquote><p>C字符串不检查下标越界,使用时要注意。</p></blockquote><p>C的控制台输入</p><pre><code>scanf(&quot;占位符&quot;, &amp;地址);//&amp; 取地址符</code></pre><h3 id="3、内存地址的概念"><a href="#3、内存地址的概念" class="headerlink" title="3、内存地址的概念"></a>3、内存地址的概念</h3><p>声明一个变量,就会立即为这个变量申请内存,一定会有一个对应的内存地址；没有地址的内存是无法使用的；内存的每一个字节都有一个对应的地址；内存地址用一个16进制数来表示；32位操作系统最大可以支持4G内存。</p><h3 id="4、指针"><a href="#4、指针" class="headerlink" title="4、指针"></a>4、指针</h3><pre><code>int i = 123;//一般计算机中用16进制数来表示一个内存地址 printf(&quot;%#x\n&quot;,&amp;i); //int* int类型的指针变量  pointer指针  指针变量只能用来保存内存地址//用取地址符&amp;i 把变量i的地址取出来 用指针变量pointer 保存了起来//此时我们可以说 指针pointer指向了 i的地址 int* pointer = &amp;i;   printf(&quot;pointer的值 = %#x\n&quot;,pointer);printf(&quot;*pointer的值%d\n&quot;,*pointer);*pointer = 456;printf(&quot;i的值是%d\n&quot;,i);system(&quot;pause&quot;); </code></pre><p>未赋值的指针称为野指针。</p><h3 id="5、指针交换两个数的值"><a href="#5、指针交换两个数的值" class="headerlink" title="5、指针交换两个数的值"></a>5、指针交换两个数的值</h3><p>所有传递其实本质都是值传递，引用传递本质是把地址传递过去，引用传递其实也是传递一个值，但是这个值是一个内存地址。</p><pre><code>void swap(int* p, int* p2)&#123;    int temp = *p;    *p = *p2;    *p2 = temp;    &#125;</code></pre><h3 id="6、数组和指针的关系"><a href="#6、数组和指针的关系" class="headerlink" title="6、数组和指针的关系"></a>6、数组和指针的关系</h3><p><strong>数组占用的内存空间是连续的</strong></p><blockquote><p>数组变量保存的地址，是第0个元素地址，也就是首地址。<code>&amp;array</code>和<code>&amp;array[0]</code>值一样。</p></blockquote><blockquote><p><code>*(p + 1)</code>:指针位移一个单位，一个单位是多少个字节，取决于指针的类型。</p></blockquote><h3 id="7、指针的长度"><a href="#7、指针的长度" class="headerlink" title="7、指针的长度"></a>7、指针的长度</h3><p>不管变量的类型是什么，它的内存地址的长度一定是相同的；类型不同只决定变量占用的内存空间不同；32位环境下，内存地址长度都是4个字节，64位环境下，内存地址长度都是8个字节。</p><h3 id="8、多级指针"><a href="#8、多级指针" class="headerlink" title="8、多级指针"></a>8、多级指针</h3><p>二级指针变量只能保存一级指针变量的地址，有几个<code>*</code>就是几级指针</p><pre><code>int i = 123;//int类型一级指针 int* p = &amp;i;//int 类型 二级指针 二级指针只能保存一级指针的地址 int** p2 = &amp;p;//int 类型 三级指针  三级指针只能保存二级指针的地址 int*** p3 = &amp;p2;//通过p3 取出 i的值printf(&quot;***p3 = %d\n&quot;, ***p3);</code></pre><h3 id="9、堆、栈、静态内存、动态内存"><a href="#9、堆、栈、静态内存、动态内存" class="headerlink" title="9、堆、栈、静态内存、动态内存"></a>9、堆、栈、静态内存、动态内存</h3><p>栈内存:系统自动分配，系统自动销毁，连续的内存区域，向低地址扩展，大小固定，栈上分配的内存称为静态内存。</p><p>静态内存分配：子函数执行完，子函数中的所有局部变量都会被销毁，内存释放，但内存地址不可能被销毁，只是地址上的值没了。</p><p>堆内存：程序员手动分配（java：new，c：malloc），空间不连续，大小取决于系统的虚拟内存，C程序员手动回收free，java自动回收，堆上分配的内存称为动态内存。</p><pre><code>#include&lt;stdio.h&gt;    #include&lt;stdlib.h&gt;    main()&#123;    printf(&quot;请输入班级的人数:&quot;);   int count;   scanf(&quot;%d&quot;,&amp;count);   //申请一块堆内存   int* pointer = malloc(sizeof(int)*count);   int i;   for(i = 0;i&lt;count;i++)&#123;         printf(&quot;请输入第%d个学生的学号:&quot;,i+1);         scanf(&quot;%d&quot;, pointer+i);         &#125;     for(i = 0;i&lt;count;i++)&#123;         printf(&quot;第%d个学生的学号是:%d\n&quot;,i+1,*(pointer+i));           &#125;    printf(&quot;请输入插班生的人数:&quot;);   //声明一个变量increment用来保存 插班生的人数    int increment;   //接受用户的输入    scanf(&quot;%d&quot;,&amp;increment);   //重新申请一块足够大的内存    //如果 malloc申请到的内存后面还有足够的空间 realloc会在malloc申请的内存空间后继续申请足够大的内存空间   //如果 malloc申请到的内存后面没有足够的空间 realloc会找到一块足够大的堆内存 并且把 malloc申请到的内存中的值复制过来   pointer = realloc(pointer,sizeof(int)*(count+increment));  for(i = count;i&lt;count+increment;i++)&#123;         printf(&quot;请输入第%d个学生的学号:&quot;,i+1);         scanf(&quot;%d&quot;, pointer+i);        &#125;  for(i = count;i&lt;count+increment;i++)&#123;        printf(&quot;第%d个学生的学号是:%d\n&quot;,i+1,*(pointer+i));          &#125;   system(&quot;pause&quot;); &#125; </code></pre><h3 id="10、结构体"><a href="#10、结构体" class="headerlink" title="10、结构体"></a>10、结构体</h3><p>结构体的大小大于等于结构体中每一变量的占字节数的和;结构体的大小是最大的那个变量所占字节数的整数倍。</p><blockquote><p>c结构体类似java的class。struct来声明c的结构体。C结构体中不能定义函数，可以定义函数指针 。 </p></blockquote><pre><code>#include&lt;stdio.h&gt;    #include&lt;stdlib.h&gt;    void study()&#123;           printf(&quot;good good study!\n&quot;);           &#125;typedef struct Student&#123;      int age;  //8      int score;  // 4      char sex;   //1      void(*studypointer)();      &#125; stud;main()&#123;     stud stu = &#123;18,100,&apos;f&apos;&#125;; stu.studypointer = &amp;study; stu.studypointer(); struct Student* stuPointer = &amp;stu; printf(&quot;*stuPointer.age = %d\n&quot;,(*stuPointer).age); (*stuPointer).sex =&apos;m&apos;; printf(&quot;stu.sex = %c\n&quot;,stu.sex); printf(&quot;stuPointer-&gt;age = %d&quot;,stuPointer-&gt;age); //printf(&quot;stu.age = %hd\n&quot;,stu.age); //printf(&quot;stu.score = %d\n&quot;,stu.score); //printf(&quot;stu.sex = %c\n&quot;,stu.sex); // printf(&quot;结构体student占%d个字节\n&quot;,sizeof(stu));       system(&quot;pause&quot;); &#125; </code></pre><h3 id="11、联合体"><a href="#11、联合体" class="headerlink" title="11、联合体"></a>11、联合体</h3><p><code>union</code>长度等于联合体中定义的变量当中最长的那个,联合体只能保存一个变量的值,联合体共用同一块内存</p><h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><p>c++开发jni代码时 env不再是结构体Jninativeinterface的二级指针。<code>_JNIEnv</code>是C++的结构体，C++的结构体可以定义函数。<code>env</code>是<code>JNIEnv</code>的一级指针,也就是结构体<code>_JNIEnv</code>的一级指针。<code>env-&gt;</code>来调用结构体里的函数。</p><h2 id="am命令"><a href="#am命令" class="headerlink" title="am命令"></a>am命令</h2><p>am命令:在adb shell里可以通过am命令进行一些操作如启动activity Service 启动浏览器等等。</p><pre><code>#include &lt;jni.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;android/log.h&gt;    #define LOG_TAG &quot;System.out&quot;    #define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)int ppid;JNIEXPORT void JNICALL Java_com__cfork_demo_MainActivity_cfork  (JNIEnv * env, jobject obj)&#123;    int pid = fork();    //fork成功的分叉出一个子进程 会返回当前进程的id 但是只能在主进程中fork成功    //在子进程中运行fork 会返回0 但是不能再分叉出新的进程    //fork的返回值可能三种  &gt;0  == 0 &lt;0    FILE* file;    if(pid&gt;0)&#123;        LOGD(&quot;pid = %d&quot;,pid);    &#125;else if(pid == 0)&#123;        //拿到父进程的进程编号        LOGD(&quot;pid == 0&quot;);        while(1)&#123;            ppid = getppid();            //如果父进程的进程编号为1 说明父进程被杀死了            if(ppid == 1)&#123;                LOGD(&quot;ppid =%d&quot;,ppid);                file = fopen(&quot;/data/data/com.cfork.demo&quot;,&quot;r&quot;);                if(file == NULL)&#123;                    //打开网页 调用am命令                    execlp(&quot;am&quot;, &quot;am&quot;, &quot;start&quot;, &quot;--user&quot;,&quot;0&quot;,&quot;-a&quot;, &quot;android.intent.action.VIEW&quot;, &quot;-d&quot;, &quot;http://www.baidu.com&quot;, (char *) NULL);                &#125;else&#123;                    execlp(&quot;am&quot;, &quot;am&quot;, &quot;start&quot;, &quot;--user&quot;,&quot;0&quot;, &quot;-n&quot; , &quot;com.cfork.demo/com.cfork.demo.MainActivity&quot;,(char *) NULL);                &#125;                break;            &#125;                    LOGD(&quot;sub process is running&quot;);                    sleep(2);        &#125;    &#125;else&#123;        LOGD(&quot;pid&lt;0 &quot;);    &#125;&#125;</code></pre><h2 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h2><p>c本地函数命名规则:<code>Java_包名_类名_本地方法名</code>。</p><p>参数<code>jobject thiz</code>：调用本地函数的java对象，在这个例子中，就是MainActivity的实例。</p><p>参数<code>JNIEnv* env</code>：是结构体JNINativeInterface的二级指针。JNIEnv是结构体JNINativeInterface的一级指针，操作一级指针用<code>(*env)-&gt;</code>。JNINativeInterface结构体中定义了大量的函数指针，这些函数指针在jni开发中很常用。</p><p>C代码</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;jni.h&gt;jstring Java_com_vcredit_cdemo_MainActivity_stringFromJNI(JNIEnv* env,jobject thiz)&#123;    char* cstr = &quot;hello from c!&quot;;    return (*env)-&gt;NewStringUTF(env,cstr);&#125;</code></pre><p>C++代码</p><pre><code>#include &lt;jni.h&gt;#include &lt;string&gt;extern &quot;C&quot; JNIEXPORT jstring JNICALLJava_com_vcredit_cdemo_MainActivity_stringFromJNI(        JNIEnv *env,        jobject /* this */) &#123;    std::string hello = &quot;Hello from C++&quot;;    return env-&gt;NewStringUTF(hello.c_str());&#125;</code></pre><h3 id="java传参数给c"><a href="#java传参数给c" class="headerlink" title="java传参数给c"></a>java传参数给c</h3><p>Java给C传递<code>int</code>，<code>String</code>和<code>int[]</code>，并且返回:</p><pre><code>#include &lt;jni.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;//传递数字，并返回数字    JNIEXPORT jint JNICALLJava_com_vcredit_cdemo_MainActivity_intFromJNI(JNIEnv *env, jobject thiz, jint a, jint b) &#123;    return a + b;&#125;char *_JString2CStr(JNIEnv *env, jstring jstr) &#123;    char *rtn = NULL;    jclass clsstring = (*env)-&gt;FindClass(env, &quot;java/lang/String&quot;);    jstring strencode = (*env)-&gt;NewStringUTF(env, &quot;GB2312&quot;);    jmethodID mid = (*env)-&gt;GetMethodID(env, clsstring, &quot;getBytes&quot;, &quot;(Ljava/lang/String;)[B&quot;);    jbyteArray barr = (jbyteArray) (*env)-&gt;CallObjectMethod(env, jstr, mid,                                                            strencode); // String .getByte(&quot;GB2312&quot;);    jsize alen = (*env)-&gt;GetArrayLength(env, barr);    jbyte *ba = (*env)-&gt;GetByteArrayElements(env, barr, JNI_FALSE);    if (alen &gt; 0) &#123;        rtn = (char *) malloc(alen + 1); //&quot;\0&quot;        memcpy(rtn, ba, alen);        rtn[alen] = 0;    &#125;    (*env)-&gt;ReleaseByteArrayElements(env, barr, ba, 0);    return rtn;&#125;//传递字符串，并返回字符串JNIEXPORT jstring JNICALLJava_com_vcredit_cdemo_MainActivity_stringChange(JNIEnv *env, jobject thiz, jstring string) &#123;    char *cstr = _JString2CStr(env, string);    int length = strlen(cstr);    int i;    for (i = 0; i &lt; length; i++) &#123;        *(cstr + i) += 1;    &#125;    return (*env)-&gt;NewStringUTF(env, cstr);&#125;//传递int数组，并返回数组JNIEXPORT jintArray JNICALLJava_com_vcredit_cdemo_MainActivity_arrIncrease(JNIEnv *env, jobject thiz, jintArray jArray) &#123;    jsize length = (*env)-&gt;GetArrayLength(env, jArray);    jint *arrayPointer = (*env)-&gt;GetIntArrayElements(env, jArray, NULL);    int i;    for (i = 0; i &lt; length; i++) &#123;        *(arrayPointer + i) += 10;    &#125;    (*env)-&gt;SetIntArrayRegion(env, jArray, 0, length, arrayPointer);    return jArray;&#125;</code></pre><h3 id="在C中打印log"><a href="#在C中打印log" class="headerlink" title="在C中打印log"></a>在C中打印log</h3><pre><code>#include &lt;android/log.h&gt;#define LOG_TAG &quot;System.out&quot;#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)//使用LOGD(&quot;length = %d&quot;,length);</code></pre><h3 id="c调用Java"><a href="#c调用Java" class="headerlink" title="c调用Java"></a>c调用Java</h3><p>C调用Java空参方法</p><pre><code>JNIEXPORT void JNICALLJava_com_vcredit_cdemo_MainActivity_callbackvoidmethod(JNIEnv* env, jobject thiz) &#123;    jclass claz = (*env)-&gt;FindClass(env, &quot;com/vcredit/cdemo/MainActivity&quot;);    jmethodID methodID = (*env)-&gt;GetMethodID(env, claz, &quot;helloFromJava&quot;, &quot;()V&quot;);    (*env)-&gt;CallVoidMethod(env, thiz, methodID);&#125;public void helloFromJava() &#123;    Log.d(&quot;-----rrrrr&quot;, &quot;hello from java&quot;);&#125;</code></pre><blockquote><p>注意FindClass路径用<code>/</code>。</p></blockquote><p>C调用Java有Int参数方法并返回</p><pre><code>JNIEXPORT void JNICALLJava_com_vcredit_cdemo_MainActivity_callbackintmethod(JNIEnv *env, jobject thiz) &#123;    jclass claz = (*env)-&gt;FindClass(env, &quot;com/vcredit/cdemo/MainActivity&quot;);    jmethodID methodID = (*env)-&gt;GetMethodID(env, claz, &quot;add&quot;, &quot;(II)I&quot;);    int result = (*env)-&gt;CallIntMethod(env, thiz, methodID, 6, 6);    LOGD(&quot;result = %d&quot;, result);&#125;public int add(int x, int y) &#123;    return x + y;&#125;</code></pre><p>C调用Java有String参数方法</p><pre><code>JNIEXPORT void JNICALLJava_com_vcredit_cdemo_MainActivity_callbackStringmethod(JNIEnv *env, jobject thiz) &#123;    jclass claz = (*env)-&gt;FindClass(env, &quot;com/vcredit/cdemo/MainActivity&quot;);    jmethodID methodID = (*env)-&gt;GetMethodID(env, claz, &quot;printString&quot;, &quot;(Ljava/lang/String;)V&quot;);    jstring result = (*env)-&gt;NewStringUTF(env, &quot;hello from c&quot;);    (*env)-&gt;CallVoidMethod(env, thiz, methodID, result);&#125;public void printString(String s) &#123;    Log.d(&quot;-----rrrrr&quot;, s);&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JNI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android自定义控件入门与实战-读书笔记</title>
    <link href="/2020/01/04/32.Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
    <url>/2020/01/04/32.Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="第1章、绘图基础"><a href="#第1章、绘图基础" class="headerlink" title="第1章、绘图基础"></a>第1章、绘图基础</h2><h3 id="1-1、基本图形绘制"><a href="#1-1、基本图形绘制" class="headerlink" title="1.1、基本图形绘制"></a>1.1、基本图形绘制</h3><h4 id="1-1-1、概述"><a href="#1-1-1、概述" class="headerlink" title="1.1.1、概述"></a>1.1.1、概述</h4><p>在 Android中，Paint类就是画笔，而Canvas类就是纸，在这里叫作画布。</p><h4 id="1-1-2、画笔的基本设置"><a href="#1-1-2、画笔的基本设置" class="headerlink" title="1.1.2、画笔的基本设置"></a>1.1.2、画笔的基本设置</h4><p>Paint</p><pre><code>paint.setAntiAlias(true); //打开抗锯齿功能paint.setColor(Color.RED); //设置画笔颜色paint.setStyle(Paint.Style.FILL); //设置填充样式paint.setStrokeWidth(50); //设置画笔宽度</code></pre><p>ARGB</p><pre><code>A 代表透明度（Alpha）R 代表红色值（Red）G 代表绿色值（Green）B 代表蓝色值（Blue）</code></pre><p>设置填充样式，对于文字和几何图形都有效:</p><pre><code>Paint.Style.FILL//仅填充内部。Paint.Style.FILL_AND_STROKE//填充内部和描边。Paint.Style.STROKE//仅描边。</code></pre><blockquote><p>FILL_AND_STROKE比FILL多了一个描边的宽度。    </p></blockquote><h4 id="1-1-3、Canvas使用基础"><a href="#1-1-3、Canvas使用基础" class="headerlink" title="1.1.3、Canvas使用基础"></a>1.1.3、Canvas使用基础</h4><p>demo地址</p><pre><code>com.vcredit.doview.chapter1.DrawShapeView</code></pre><h5 id="1、画布背景设置"><a href="#1、画布背景设置" class="headerlink" title="1、画布背景设置"></a>1、画布背景设置</h5><pre><code>canvas.drawColor(int color)canvas.drawARGB(int a, int r, int g, int b)canvas.drawRGB(int r, int g, int b) //透明度Alpha的值取255</code></pre><h5 id="2、画直线"><a href="#2、画直线" class="headerlink" title="2、画直线"></a>2、画直线</h5><pre><code>void drawLine(float startX, float startY, float stopX, float stopY, Paint paint)</code></pre><p>直线的粗细是与setStrokeWidth有直接关系的。所以，paint.setStrokeWidth在Style起作用时，用于设置描边宽度；在Style不起作用时，用于设置画笔宽度。</p><h5 id="3、多条直线"><a href="#3、多条直线" class="headerlink" title="3、多条直线"></a>3、多条直线</h5><pre><code>void drawLines(float[] pts, Paint paint)void drawLines(float[] pts, int offset, int count, Paint paint)</code></pre><p>pts：点的集合。两个元素形成一个点，每两个点形成一条直线。</p><p>offset：pts集合中跳过的元素个数。</p><p>count：pts集合中参与绘制的元素个数。</p><pre><code>float[] pts = &#123;10,10,100,100,200,200,400,400&#125;;canvas.drawLines(pts,2,4,paint);</code></pre><p>表示点(100,100)和(200,200)这两个点的连线。</p><h5 id="4、点"><a href="#4、点" class="headerlink" title="4、点"></a>4、点</h5><pre><code>void drawPoint(float x, float y, Paint paint)</code></pre><p>点的大小只与setStrokeWidth(width)有关，而与setStyle无关。</p><h5 id="5、多个点"><a href="#5、多个点" class="headerlink" title="5、多个点"></a>5、多个点</h5><pre><code>void drawPoints(float[] pts, Paint paint)void drawPoints(float[] pts, int offset, int count, Paint paint)</code></pre><p>这几个参数的含义与多条直线中的参数含义相同。</p><h5 id="6、矩形工具类RectF和Rect"><a href="#6、矩形工具类RectF和Rect" class="headerlink" title="6、矩形工具类RectF和Rect"></a>6、矩形工具类RectF和Rect</h5><p>RectF与Rect中的方法、成员变量完全一样，都是根据4个点构造出一个矩形结构，唯一不同的是：RectF是用来保存float类型数值的矩形结构的；而Rect是用来保存int类型数值的矩形结构的。</p><pre><code>//RectF 的构造函数有如下4个，但最常用的还是第二个，即根据 4 个点构造出一个矩形。RectF()RectF(float left, float top, float right, float bottom)RectF(RectF r)RectF(Rect r)//Rect的构造函数有如下3个。Rect()Rect(int left, int top, int right, int bottom)Rect(Rect r)</code></pre><p>一般而言，要构造一个矩形结构，可以通过以下两种方法来实现。</p><pre><code>//方法一：直接构造Rect rect = new Rect(10,10,100,100);//方法二：间接构造Rect rect = new Rect();rect.set(10,10,100,100);</code></pre><h5 id="7、矩形"><a href="#7、矩形" class="headerlink" title="7、矩形"></a>7、矩形</h5><p>矩形的绘制方法</p><pre><code>void drawRect(float left, float top, float right, float bottom, Paint paint)void drawRect(RectF rect, Paint paint)void drawRect(Rect r, Paint paint)</code></pre><h5 id="8、圆角矩形"><a href="#8、圆角矩形" class="headerlink" title="8、圆角矩形"></a>8、圆角矩形</h5><pre><code>void drawRoundRect(RectF rect, float rx, float ry, Paint paint)</code></pre><p>rect：要绘制的矩形；rx：生成圆角的椭圆的X轴半径；ry：生成圆角的椭圆的Y轴半径。</p><p>drawRoundRect()函数不能针对每个角设置对应的椭圆，而只能统一设置4个角对应的椭圆。</p><h5 id="9、圆形"><a href="#9、圆形" class="headerlink" title="9、圆形"></a>9、圆形</h5><pre><code>void drawCircle(float cx, float cy, float radius, Paint paint)</code></pre><p>参数是圆心和半径</p><h5 id="10、椭圆"><a href="#10、椭圆" class="headerlink" title="10、椭圆"></a>10、椭圆</h5><pre><code>void drawOval(RectF oval, Paint paint)</code></pre><p>椭圆是根据矩形生成的，以矩形的长为椭圆的X轴，以矩形的宽为椭圆的Y轴。</p><h5 id="11、弧"><a href="#11、弧" class="headerlink" title="11、弧"></a>11、弧</h5><pre><code>void drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter,Paint paint)</code></pre><p>弧是椭圆的一部分，而椭圆是根据矩形来生成的，所以弧也是根据矩形来生成的。</p><p>oval：生成椭圆的矩形。startAngle：弧开始的角度，以 X 轴正方向为 0°。sweepAngle：弧持续的角度,顺时针方向为正值。</p><p>useCenter：是否有弧的两边。为true时，表示带有两边；为false时，只有一条弧。</p><h4 id="1-1-4、Rect与RectF"><a href="#1-1-4、Rect与RectF" class="headerlink" title="1.1.4、Rect与RectF"></a>1.1.4、Rect与RectF</h4><h5 id="1、是否包含点、矩形"><a href="#1、是否包含点、矩形" class="headerlink" title="1、是否包含点、矩形"></a>1、是否包含点、矩形</h5><pre><code>//判断是否包含某个点，如果在，则返回true；如果不在，则返回false。boolean contains(int x, int y)//rect.contains(mX, mY)//判断是否包含某个矩形Boolean contains(int left, int top, int right, int bottom)boolean contains(Rect r)</code></pre><blockquote><p>postInvalidate()和 nvalidate()函数都是用来重绘控件的，区别是invalidate()函数一定要在主线程中执行，否则就会报错；而postInvalidate()可以在任何线程中执行。因为在 postInvalidate()函数中就是利用handler给主线程发送刷新界面的消息来实现的，所以它可以在任何线程中执行而不会出错。postInvalidate()界面刷新速度可能没有直接调用invalidate()函数那么快。</p></blockquote><h5 id="2、判断两个矩形是否相交"><a href="#2、判断两个矩形是否相交" class="headerlink" title="2、判断两个矩形是否相交"></a>2、判断两个矩形是否相交</h5><pre><code>//这是Rect类的一个静态方法，如果相交则返回true，否则返回false。static boolean intersects(Rect a, Rect b)//还可以使用 Rect 类中自带的方法来判断当前 Rect 对象与其他矩形是否相交。boolean intersects(int left, int top, int right, int bottom)//判断相交并返回结果//不仅会返回是否相交的结果，而且会把相交部分的矩形赋给当前Rect对象。如果两个矩形不相交，则当前Rect对象的值不变。boolean intersect(int left, int top, int right, int bottom)boolean intersect(Rect r)</code></pre><h5 id="3、合并"><a href="#3、合并" class="headerlink" title="3、合并"></a>3、合并</h5><p>合并两个矩形的意思就是将两个矩形合并成一个矩形，即无论这两个矩形是否相交，取两个矩形最小左上角点作为结果矩形的左上角点，取两个矩形最大右下角点作为结果矩形的右下角点。如果要合并的两个矩形有一方为空，则将有值的一方作为最终结果。</p><pre><code>public void union(int left, int top, int right, int bottom)public void union(Rect r)</code></pre><p>合并矩形与某个点：先判断当前矩形与目标合并点的关系，如果不相交，则根据目标点(x,y)的位置，将目标点设置为当前矩形的左上角点或者右下角点。如果当前矩形是一个空矩形，则最后的结果矩形为([0,0],[x,y])，即结果矩形的左上角点为[0,0]，右下角点为[x,y]。</p><pre><code>public void union(int x, int y)</code></pre><h4 id="1-1-5、Color"><a href="#1-1-5、Color" class="headerlink" title="1.1.5、Color"></a>1.1.5、Color</h4><blockquote><p>当需要重绘时就会调用onDraw()函数，所以在 onDraw()函数中创建的变量会一直被重复创建，这样会引起频繁的程序GC（回收内存），进而引起程序卡顿。所以一定要记住，在onDraw()函数中不能创建变量！一般在自定义控件的构造函数中创建变量，即在初始化时一次性创建。</p></blockquote><h3 id="1-2、路径"><a href="#1-2、路径" class="headerlink" title="1.2、路径"></a>1.2、路径</h3><h4 id="1-2-1、概述"><a href="#1-2-1、概述" class="headerlink" title="1.2.1、概述"></a>1.2.1、概述</h4><p>Path类就代表路径。在Canvas中绘制路径的方法</p><pre><code>void drawPath(Path path, Paint paint)</code></pre><h4 id="1-2-2、直线路径"><a href="#1-2-2、直线路径" class="headerlink" title="1.2.2、直线路径"></a>1.2.2、直线路径</h4><pre><code>//(x1,y1)是直线的起始点void moveTo(float x1, float y1)//(x2,y2)是直线的终点，又是下一次绘制直线路径的起始点； lineTo()函数可以一直使用。void lineTo(float x2, float y2)//首尾点连接起来，形成闭环void close()</code></pre><h4 id="1-2-3、弧线路径"><a href="#1-2-3、弧线路径" class="headerlink" title="1.2.3、弧线路径"></a>1.2.3、弧线路径</h4><pre><code>//弧线是从椭圆上截取的一部分void arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)//oval：生成椭圆的矩形。//startAngle：弧开始的角度，以 X 轴正方向为 0°。sweepAngle：弧持续的角度。//forceMoveTo 的含义是是否强制将弧的起始点作为绘制起始位置。</code></pre><h4 id="1-2-4、addXXX系列函数"><a href="#1-2-4、addXXX系列函数" class="headerlink" title="1.2.4、addXXX系列函数"></a>1.2.4、addXXX系列函数</h4><p>addXXX系列函数可以让我们直接往Path中添加一些曲线，而不必考虑连贯性。</p><h5 id="添加矩形路径"><a href="#添加矩形路径" class="headerlink" title="添加矩形路径"></a>添加矩形路径</h5><pre><code>void addRect(float left, float top, float right, float bottom,Path.Direction dir)void addRect(RectF rect, Path.Direction dir)</code></pre><p>Path.Direction 参数有两个值。Path.Direction.CCW：是指创建逆时针方向的矩形路径。Path.Direction.CW：指创建顺时针方向的矩形路径。</p><h5 id="添加圆角矩形路径"><a href="#添加圆角矩形路径" class="headerlink" title="添加圆角矩形路径"></a>添加圆角矩形路径</h5><pre><code>void addRoundRect(RectF rect, float[] radii, Path.Direction dir)void addRoundRect(RectF rect, float rx, float ry, Path.Direction dir)</code></pre><p><code>float[] radii</code>：必须传入8个数值，分4组，第一组对应第一个角（左上角）的用来生成圆角的椭圆的横轴半径和纵轴半径。在第二个构造函数中，只能构建统一的圆角大小，rx：生成圆角的椭圆的横轴半径，ry：生成圆角的椭圆的纵轴半径。</p><h5 id="添加圆形路径"><a href="#添加圆形路径" class="headerlink" title="添加圆形路径"></a>添加圆形路径</h5><pre><code>void addCircle(float x, float y, float radius, Path.Direction dir)</code></pre><p>x和y：圆心坐标；radius：圆半径。</p><h5 id="添加椭圆路径"><a href="#添加椭圆路径" class="headerlink" title="添加椭圆路径"></a>添加椭圆路径</h5><pre><code>void addOval(RectF oval, Path.Direction dir)</code></pre><h5 id="添加弧形路径"><a href="#添加弧形路径" class="headerlink" title="添加弧形路径"></a>添加弧形路径</h5><pre><code>void addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle)void addArc(RectF oval, float startAngle, float sweepAngle)</code></pre><p>oval：生成椭圆的矩形;startAngle：弧开始的角度;sweepAngel：弧持续的角度。</p><h4 id="1-2-5、填充模式"><a href="#1-2-5、填充模式" class="headerlink" title="1.2.5、填充模式"></a>1.2.5、填充模式</h4><p>Path的填充模式是指填充Path的哪部分。</p><pre><code>//Path.FillType 表示 Path 的填充模式，它有 4 个枚举值。FillType.WINDING：默认值，当两个图形相交时，取相交部分显示。FillType.EVEN_ODD：取 path 所在并不相交的区域。FillType.INVERSE_WINDING：取 path 的外部区域。FillType.INVERSE_EVEN_ODD：取 path 的外部和相交区域。</code></pre><p>在利用画笔填充图形时，填充的肯定是图形内部，而 path.setFillType()函数就是用来界定哪里算Path内部的算法，进而让Paint填充这部分图像。</p><h4 id="1-2-6、重置路径"><a href="#1-2-6、重置路径" class="headerlink" title="1.2.6、重置路径"></a>1.2.6、重置路径</h4><p>系统提供了两个重置路径的方法:</p><pre><code>void reset()void rewind()</code></pre><p>共同点是都会清空内部所保存的所有路径。</p><p>区别:<code>rewind()</code>函数不会清除内存，但会清除FillType；而<code>reset()</code>函数则会清除内存，但不会清除FillType。</p><h4 id="1-2-7、蜘蛛网状图示例"><a href="#1-2-7、蜘蛛网状图示例" class="headerlink" title="1.2.7、蜘蛛网状图示例"></a>1.2.7、蜘蛛网状图示例</h4><h3 id="1-3、文字"><a href="#1-3、文字" class="headerlink" title="1.3、文字"></a>1.3、文字</h3><h4 id="1-3-1、Paint设置"><a href="#1-3-1、Paint设置" class="headerlink" title="1.3.1、Paint设置"></a>1.3.1、Paint设置</h4><p>Paint与文字相关的设置:</p><pre><code>//普通设置paint.setStrokeWidth(5); //设置画笔宽度paint.setAntiAlias(true); //指定是否使用抗锯齿功能paint.setStyle(Paint.Style.FILL); //绘图样式，对于文字和几何图形都有效paint.setTextAlign(Align.CENTER); //设置文字对齐方式，取值为Align.CENTER、Align.LEFT 或 Align.RIGHTpaint.setTextSize(12); //设置文字大小//样式设置paint.setFakeBoldText(true); //设置是否为粗体文字paint.setUnderlineText(true); //设置下画线paint.setTextSkewX((float) -0.25); //字体水平倾斜度，默认为0，普通斜体字设为-0.25，负数代表向右倾斜paint.setStrikeThruText(true); //设置带有删除线效果//其他设置paint.setTextScaleX(2); //水平方向拉伸，高度不变，表示拉伸倍数，默认为1表示不拉伸</code></pre><h4 id="1-3-2、Canvas绘制文本"><a href="#1-3-2、Canvas绘制文本" class="headerlink" title="1.3.2、Canvas绘制文本"></a>1.3.2、Canvas绘制文本</h4><pre><code>//setTextAlign的显示与x、y的设置有关系canvas.drawText(String text,Float x,Float y,Paint paint);</code></pre><h5 id="1、普通绘制"><a href="#1、普通绘制" class="headerlink" title="1、普通绘制"></a>1、普通绘制</h5><pre><code>//参数(x,y)就是起始点坐标void drawText(String text, float x, float y, Paint paint)//start：表示起始绘制字符所在字符串中的索引。//end：表示结束绘制字符所在字符串中的索引。x,y：起始点坐标。void drawText(CharSequence text, int start, int end, float x, float y, Paint paint)void drawText(String text, int start, int end, float x, float y, Paint paint)    //绘制char类型的数组所组成的字符串。其他参数的含义如下。index：指定起始绘制字符的位置。//count：指定从起始绘制字符开始绘制几个字符。x,y：起始点坐标。void drawText(char[] text, int index, int count, float x, float y, Paint paint)</code></pre><p>举例</p><pre><code>canvas.drawText(&quot;床前明月光&quot;,2,4, 10,100, paint);//明月</code></pre><h5 id="2、逐个指定文字位置"><a href="#2、逐个指定文字位置" class="headerlink" title="2、逐个指定文字位置"></a>2、逐个指定文字位置</h5><p>指定每个要绘制的文字的具体位置</p><pre><code>void drawPosText(String text, float[] pos, Paint paint)void drawPosText(char[] text, int index, int count, float[] pos, Paint paint)</code></pre><p>index：第一个要绘制的文字的索引。count：要绘制的文字的个数。pos：要绘制的每个文字的具体位置，两个点确定一个文字的位置。</p><h5 id="3、沿路径绘制"><a href="#3、沿路径绘制" class="headerlink" title="3、沿路径绘制"></a>3、沿路径绘制</h5><pre><code>void drawTextOnPath (String text, Path path, float hOffset, float vOffset, Paint paint)void drawTextOnPath (char[] text, int index, int count, Path path, float hOffset,float vOffset, Paint paint)</code></pre><p>hOffset：与路径起始点的水平偏移量。vOffset：与路径中心的垂直偏移量。</p><h4 id="1-3-3、设置字体样式"><a href="#1-3-3、设置字体样式" class="headerlink" title="1.3.3、设置字体样式"></a>1.3.3、设置字体样式</h4><p>在Paint中有一个函数是专门用来设置字体样式的。使用这个函数的前提是必须构造Typeface类的一个参数。</p><pre><code>Typeface setTypeface(Typeface typeface)</code></pre><p>设置字体样式</p><pre><code>Typeface defaultFromStyle(int style)//参数int style的取值如下。Typeface.NORMAL：正常字体。Typeface.BOLD：粗体。Typeface.ITALIC：斜体。Typeface.BOLD_ITALIC：粗斜体。</code></pre><p>举例，设置粗斜体样式:</p><pre><code>Typeface typeface = Typeface.defaultFromStyle(Typeface.BOLD_ITALIC);paint.setTypeface(typeface);</code></pre><h3 id="1-4、Region"><a href="#1-4、Region" class="headerlink" title="1.4、Region"></a>1.4、Region</h3><p>Region译为“区域”，区域是一块任意形状的封闭图形。</p><h4 id="1-4-1、构造Region"><a href="#1-4-1、构造Region" class="headerlink" title="1.4.1、构造Region"></a>1.4.1、构造Region</h4><h5 id="直接构造"><a href="#直接构造" class="headerlink" title="直接构造"></a>直接构造</h5><pre><code>public Region(Region region) //复制一个 Region 的范围public Region(Rect r) //创建一个矩形区域public Region(int left, int top, int right, int bottom) //创建一个矩形区域</code></pre><h5 id="间接构造"><a href="#间接构造" class="headerlink" title="间接构造"></a>间接构造</h5><p>间接构造主要是通过空构造函数与set系列函数相结合来实现的。</p><pre><code>//Region的空构造函数：public Region()//set 系列函数：public void setEmpty() //置空public boolean set(Region region)//利用新的区域替换原来的区域public boolean set(Rect r)public boolean set(int left, int top, int right, int bottom)public boolean setPath(Path path, Region clip)//根据路径的区域与某区域的交集构造出新的区域</code></pre><blockquote><p>无论调用set系列函数的Region是不是有区域值，当调用set系列函数后，原来的区域值就会被替换成set系列函数里的区域值。</p></blockquote><blockquote><p>利用setPath可以设置不规则区域</p></blockquote><h4 id="1-4-2、枚举区域——RegionIterator类"><a href="#1-4-2、枚举区域——RegionIterator类" class="headerlink" title="1.4.2、枚举区域——RegionIterator类"></a>1.4.2、枚举区域——RegionIterator类</h4><pre><code>//构造函数：根据区域构建对应的矩形集。RegionIterator(Region region)//获取下一个矩形，将结果保存在参数 Rect r 中。boolean next(Rect r)</code></pre><p>Canvas中没有直接绘制Region的函数，想要绘制一个区域，就只能通过RegionIterator类构造矩形集来逼近显示区域。</p><pre><code>private void drawRegion(Canvas canvas,Region rgn,Paint paint)&#123;    RegionIterator iter = new RegionIterator(rgn);    Rect r = new Rect();    while (iter.next(r)) &#123;        canvas.drawRect(r, paint);    &#125;&#125;</code></pre><h4 id="1-4-3、区域相交"><a href="#1-4-3、区域相交" class="headerlink" title="1.4.3、区域相交"></a>1.4.3、区域相交</h4><p>Region不是用来绘图的，Region最重要的功能在区域的相交操作中。</p><h5 id="union-函数"><a href="#union-函数" class="headerlink" title="union()函数"></a>union()函数</h5><pre><code>boolean union(Rect r)</code></pre><p>该函数用于与指定矩形取并集，即将Rect所指定的矩形加入当前区域中。举例：</p><pre><code>Region region = new Region(10,10,200,100);region.union(new Rect(10,10,50,300));</code></pre><h5 id="区域操作"><a href="#区域操作" class="headerlink" title="区域操作"></a>区域操作</h5><p>方法一：</p><p>相交操作，并将结果赋给当前的Region对象。如果计算成功，则返回true；否则返回false。</p><pre><code>boolean op(Rect r, Op op)boolean op(int left, int top, int right, int bottom, Op op)boolean op(Region region, Op op)</code></pre><p>Op参数值有如下6个：</p><pre><code>public enum Op &#123;    DIFFERENCE(0), //最终区域为region1区域，但是不包括与region2相交的区域    INTERSECT(1), // 最终区域为region1与region2 相交的区域    UNION(2), //最终区域为region1与region2组合在一起的区域    XOR(3), //最终区域为region1和region2区域，但是不包括相交的区域    REVERSE_DIFFERENCE(4),//最终区域为region2区域，但是不包括与region1相交的区域    REPLACE(5); //最终区域为region2的区域&#125;</code></pre><p>方法二：传入两个 Region 对象进行区域操作</p><pre><code>boolean op(Rect rect, Region region, Op op)boolean op(Region region1, Region region2, Region.Op op)</code></pre><h4 id="1-4-4、其他函数"><a href="#1-4-4、其他函数" class="headerlink" title="1.4.4、其他函数"></a>1.4.4、其他函数</h4><p>几个判断</p><pre><code>//该函数用于判断该区域是否为空public boolean isEmpty();//该函数用于判断该区域是否是一个矩阵。public boolean isRect();//该函数用于判断该区域是否是多个矩阵的组合。public boolean isComplex();</code></pre><p>getBound系列函数</p><pre><code>//这两个函数用于返回能够包裹当前路径的最小矩形。public Rect getBounds()public boolean getBounds(Rect r)//这两个函数用于返回当前矩形所对应的 Path 对象。public Path getBoundaryPath()public boolean getBoundaryPath(Path path)</code></pre><p>是否包含</p><pre><code>//该函数用于判断该区域是否包含某个点。public boolean contains(int x, int y)//这两个函数用于判断该区域是否包含某个矩形。public boolean quickContains(Rect r)public boolean quickContains(int left, int top, int right,int bottom)</code></pre><p>是否相交</p><pre><code>//这两个函数用于判断该区域是否没有和指定矩形相交。public boolean quickReject(Rect r)public boolean quickReject(int left, int top, int right, int bottom);//该函数用于判断该区域是否没有和指定区域相交。public boolean quickReject(Region rgn);</code></pre><p>平移变换</p><pre><code>//该函数用于将Region对象向X轴平移dx距离，向Y轴平移dy距离，并将结果赋给当前的Region对象。X轴向右是正方向，Y轴向下是正方向。public void translate(int dx, int dy)//与上一个函数不同的是，该函数将结果赋给dst对象，而当前Region对象的值保持不变。public void translate(int dx, int dy, Region dst)</code></pre><h3 id="1-5、Canvas（画布）"><a href="#1-5、Canvas（画布）" class="headerlink" title="1.5、Canvas（画布）"></a>1.5、Canvas（画布）</h3><p>除了在Canvas上绘图以外，还可以对画布进行变换及裁剪等操作。</p><h4 id="1-5-1、Canvas变换"><a href="#1-5-1、Canvas变换" class="headerlink" title="1.5.1、Canvas变换"></a>1.5.1、Canvas变换</h4><h5 id="平移（Translate）"><a href="#平移（Translate）" class="headerlink" title="平移（Translate）"></a>平移（Translate）</h5><p>右是X轴正方向，向下是Y轴正方向。</p><pre><code>void translate(float dx, float dy)</code></pre><p>举例</p><pre><code>canvas.translate(100, 100);Rect rect = new Rect(0,0,400,220);canvas.drawRect(rect, paint);</code></pre><h4 id="屏幕显示与Canvas的关系"><a href="#屏幕显示与Canvas的关系" class="headerlink" title="屏幕显示与Canvas的关系"></a>屏幕显示与Canvas的关系</h4><p>每次调用drawXXX系列函数来绘图时，都会产生一个全新的Canvas透明图层。调用平移、旋转等函数对Canvas进行了操作，不会对之前已经draw的产生影响。</p><h5 id="旋转（Rotate）"><a href="#旋转（Rotate）" class="headerlink" title="旋转（Rotate）"></a>旋转（Rotate）</h5><pre><code>//旋转的中心点是原点(0,0)void rotate(float degrees)//指定旋转的中心点坐标(px,py)void rotate(float degrees, float px, float py)</code></pre><h5 id="缩放（Scale）"><a href="#缩放（Scale）" class="headerlink" title="缩放（Scale）"></a>缩放（Scale）</h5><pre><code>//sx是小数表示缩小，sx是整数表示放大public void scale(float sx, float sy)//px,py表示缩放中心位置public void scale(float sx, float sy, float px, float py)</code></pre><h5 id="扭曲（Skew）"><a href="#扭曲（Skew）" class="headerlink" title="扭曲（Skew）"></a>扭曲（Skew）</h5><pre><code>//sx为X轴方向倾斜角度的正切值，比如在X轴方向上倾斜60°，tan60=1.732void skew(float sx, float sy)</code></pre><p>举例</p><pre><code>canvas.skew(1.732f,0);//X 轴倾斜 60°， Y 轴不变</code></pre><h5 id="裁剪画布（clip系列函数）"><a href="#裁剪画布（clip系列函数）" class="headerlink" title="裁剪画布（clip系列函数）"></a>裁剪画布（clip系列函数）</h5><p>一旦Canvas被裁剪，就不能恢复。在使用clip系列函数时，需要禁用硬件加速功能，<code>setLayerType(LAYER_TYPE_SOFTWARE,null)</code>。</p><p>clip 系列函数如下：</p><pre><code>boolean clipPath(Path path)boolean clipPath(Path path, Region.Op op)boolean clipRect(Rect rect, Region.Op op)boolean clipRect(RectF rect, Region.Op op)boolean clipRect(int left, int top, int right, int bottom)boolean clipRect(float left, float top, float right, float bottom)boolean clipRect(RectF rect)boolean clipRect(float left, float top, float right, float bottom, Region.Op op)boolean clipRect(Rect rect)boolean clipRegion(Region region)boolean clipRegion(Region region, Region.Op op)</code></pre><h4 id="1-5-2、画布的保存与恢复"><a href="#1-5-2、画布的保存与恢复" class="headerlink" title="1.5.2、画布的保存与恢复"></a>1.5.2、画布的保存与恢复</h4><h5 id="save-和restore-函数"><a href="#save-和restore-函数" class="headerlink" title="save()和restore()函数"></a>save()和restore()函数</h5><p>每次调用save()函数，都会先保存当前画布的状态，然后将其放入特定的栈中。每次调用restore()函数，都会把栈中顶层的画布状态取出来，并按照这个状态恢复当前的画布，然后在这个画布上作画。</p><h4 id="restoreToCount-int-saveCount-函数"><a href="#restoreToCount-int-saveCount-函数" class="headerlink" title="restoreToCount(int saveCount)函数"></a>restoreToCount(int saveCount)函数</h4><p>在利用save()函数保存画布时，会有一个int类型的返回值。该返回值是当前所保存的画布所在栈的索引。restoreToCount()函数就是一直出栈，直到指定索引的画布出栈为止，即将指定索引的画布作为当前画布。</p><pre><code>public void restoreToCount(int saveCount);</code></pre><h4 id="1-5-3、圆形头像示例"><a href="#1-5-3、圆形头像示例" class="headerlink" title="1.5.3、圆形头像示例"></a>1.5.3、圆形头像示例</h4><h4 id="1-5-4、裁剪动画示例"><a href="#1-5-4、裁剪动画示例" class="headerlink" title="1.5.4、裁剪动画示例"></a>1.5.4、裁剪动画示例</h4><h3 id="1-6、控件的使用方法"><a href="#1-6、控件的使用方法" class="headerlink" title="1.6、控件的使用方法"></a>1.6、控件的使用方法</h3><h4 id="1-6-1、控件概述"><a href="#1-6-1、控件概述" class="headerlink" title="1.6.1、控件概述"></a>1.6.1、控件概述</h4><h4 id="1-6-2、通过XML引入控件"><a href="#1-6-2、通过XML引入控件" class="headerlink" title="1.6.2、通过XML引入控件"></a>1.6.2、通过XML引入控件</h4><p>通过XML引入控件，所调用的构造函数：</p><pre><code>public MyView(Context context, AttributeSet attrs) &#123;    super(context, attrs);&#125;</code></pre><h4 id="1-6-3、动态添加控件"><a href="#1-6-3、动态添加控件" class="headerlink" title="1.6.3、动态添加控件"></a>1.6.3、动态添加控件</h4><pre><code>LinearLayout rootView = (LinearLayout)findViewById(R.id.root);CustomView customView = new CustomView(this);LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams (LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);rootView.addView(customView,layoutParams);</code></pre><p>LayoutParams的作用就是设置控件的宽和高，对应的是XML中的<code>layout_width</code>和<code>layout_height</code>属性。</p><p>LayoutParams有三个构造函数:</p><pre><code>//指定具体的宽和高:LayoutParams.MATCH_PARENT或者具体值public LayoutParams(int width, int height)//从AttributeSet中提取出宽高等属性值public LayoutParams(Context c, AttributeSet attrs)//复制一份LayoutParamspublic LayoutParams(LayoutParams source)</code></pre><p>LinearLayout、FrameLayout、RelativeLayout都有各自的LayoutParams。</p><h5 id="addRule"><a href="#addRule" class="headerlink" title="addRule"></a>addRule</h5><p>RelativeLayout.LayoutParams的addRule()函数：第一个参数是指RelativeLayout的布局属性，第二个参数是指相对于哪个控件ID来布局。</p><pre><code>RelativeLayout rootView = (RelativeLayout) findViewById(R.id.root);CustomView customView = new CustomView(this);RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);layoutParams.addRule(RelativeLayout.RIGHT_OF,R.id.text);rootView.addView(customView, layoutParams);</code></pre><h5 id="设置margin"><a href="#设置margin" class="headerlink" title="设置margin"></a>设置margin</h5><pre><code>LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);lp.setMargins(10, 20, 30, 40);imageView.setLayoutParams(lp);</code></pre><h5 id="设置layout-weight（方法一）"><a href="#设置layout-weight（方法一）" class="headerlink" title="设置layout_weight（方法一）"></a>设置layout_weight（方法一）</h5><p>构造函数    </p><pre><code>public LayoutParams(int width, int height, float weight)</code></pre><p>示例：</p><pre><code>TextView tv_like = new TextView(this);LinearLayout.LayoutParams LP_LIKE_MW = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);tv_like.setText(&quot;赞(8)&quot;);tv_like.setTextSize(16);layout_sub_Lin.addView(tv_like, LP_LIKE_MW);</code></pre><h5 id="设置layout-weight（方法二）"><a href="#设置layout-weight（方法二）" class="headerlink" title="设置layout_weight（方法二）"></a>设置layout_weight（方法二）</h5><pre><code>LinearLayout rootView = (LinearLayout) findViewById(R.id.root);CustomView customView = new CustomView(this);LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);layoutParams.weight = 1.0f;rootView.addView(customView, layoutParams);</code></pre><h5 id="设置layout-gravity"><a href="#设置layout-gravity" class="headerlink" title="设置layout_gravity"></a>设置layout_gravity</h5><pre><code>LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.FILL_PARENT);params.gravity = Gravity.TOP;</code></pre><p>params.gravity的取值有<code>Gravity.TOP</code>、<code>Gravity.BOTTOM</code>、<code>Gravity.LEFT</code>、<code>Gravity.RIGHT</code>、<code>Gravity.CENTER_VERTICAL</code>、<code>Gravity.CENTER_HORIZONTAL</code>等这些属性值可<code>|</code>（或）运算符合并。</p><h5 id="设置android-gravity"><a href="#设置android-gravity" class="headerlink" title="设置android:gravity"></a>设置android:gravity</h5><p>分别给Button和rootView设置</p><pre><code>Button button = new Button(this);button.setGravity(Gravity.TOP);button.setText(&quot;btn&quot;);rootView.addView(button, layoutParams);rootView.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);</code></pre><h5 id="addView"><a href="#addView" class="headerlink" title="addView"></a>addView</h5><pre><code>public void addView(View child, int index)</code></pre><p>在指定位置添加一个View控件，index的取值有-1、0和正数。当取值为-1时，表示在末尾添加一个View控件，此时的效果就与addView(View child)相同；当取值为0时，表示在容器顶端添加一个View控件；当取值为正数时，表示在对应的索引位置插入一个View控件。</p><h2 id="第2章、视图动画"><a href="#第2章、视图动画" class="headerlink" title="第2章、视图动画"></a>第2章、视图动画</h2><p>两种类型的动画：<code>View Animation</code>（视图动画）和<code>Property Animation</code>（属性动画）。其中，<code>View Animation</code>包括<code>Tween Animation</code>（补间动画）和<code>Frame Animation</code>（逐帧动画）;<code>Property Animation</code>包括<code>ValueAnimator</code>和<code>ObjectAnimator</code>。</p><h3 id="2-1、视图动画标签"><a href="#2-1、视图动画标签" class="headerlink" title="2.1、视图动画标签"></a>2.1、视图动画标签</h3><h4 id="2-1-1、概述"><a href="#2-1-1、概述" class="headerlink" title="2.1.1、概述"></a>2.1.1、概述</h4><p>alpha(渐变透)、scale(缩放)、translate(位置移动)、rotate(旋转)set(动画集)。</p><h5 id="配置XML动画文件"><a href="#配置XML动画文件" class="headerlink" title="配置XML动画文件"></a>配置XML动画文件</h5><pre><code>//首先加载动画Animation animation = AnimationUtils.loadAnimation(Activity.this,R.a aim.scaleanim);//然后利用View的startAnimation()函数开始动画tv.startAnimation(animation);</code></pre><h4 id="2-1-2、scale标签"><a href="#2-1-2、scale标签" class="headerlink" title="2.1.2、scale标签"></a>2.1.2、scale标签</h4><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:duration=&quot;700&quot;    android:fillBefore=&quot;true&quot;    android:fromXScale=&quot;1.0&quot;    android:fromYScale=&quot;1.2&quot;    android:pivotX=&quot;50%&quot;    android:pivotY=&quot;50%&quot;    android:repeatCount=&quot;1&quot;    android:repeatMode=&quot;reverse&quot;    android:toXScale=&quot;0.4&quot;    android:toYScale=&quot;0.6&quot; /&gt;</code></pre><p>android:fromXScale：动画起始时，控件在X轴方向上相对自身的缩放比例，浮点值，比如1.0 代表自身无变化，0.5代表缩小1倍，2.0代表放大1倍。</p><p>android:toXScale：动画结束时，控件在X轴方向上相对自身的缩放比例，浮点值。</p><p>android:fromYScale和android:toYScale类似。</p><p>android:pivotX：缩放起始点X轴坐标，可以是数值、百分数、百分数p三种样式，如50、50%、50%p。如果是数值，则表示在当前视图本身View的左上角，即原点处加上50px，作为缩放起始点X轴坐标；如果是50%，则表示在当前控件的左上角加上自己宽度的50%作为缩放起始点X轴坐标；如果是50%p，则表示在当前控件的左上角加上父控件宽度的50%作为缩放起始点X轴坐标。</p><p>android:pivotY：与android:pivotX一样用法。</p><h5 id="Animation继承属性"><a href="#Animation继承属性" class="headerlink" title="Animation继承属性"></a>Animation继承属性</h5><p>android:duration：用于设置完成一次动画的持续时间，以毫秒为单位。</p><p>android:fillAfter：如果设置为true，则控件动画结束时，将保持动画结束时的状态。</p><p>android:fillBefore：如果设置为true，则控件动画结束时，将还原到初始化状态。</p><p>android:fillEnabled：与android:fillBefore效果相同。</p><p>android:repeatCount：用于指定动画的重复次数，当取值为infinite时，表示无限循环。</p><p>android:repeatMode：用于设定重复的类型，有reverse和restart两个值。其中，reverse表示倒序回放：restart表示重放，并且必须与repeatCount一起使用才能看到效果。</p><p>android:interpolator：用于设定插值器，其实就是指定的动画效果，比如弹跳效果等。</p><h4 id="2-1-3、alpha标签"><a href="#2-1-3、alpha标签" class="headerlink" title="2.1.3、alpha标签"></a>2.1.3、alpha标签</h4><p>透明度动画效果。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:duration=&quot;3000&quot;    android:fillBefore=&quot;true&quot;    android:fromAlpha=&quot;1.0&quot;    android:toAlpha=&quot;0.1&quot;&gt;&lt;/alpha&gt;</code></pre><p>android:fromAlpha:开始时的透明度,android:toAlpha:结束时的透明度。0.0表示全透明，1.0表示完全不透明。</p><h4 id="2-1-4、rotate标签"><a href="#2-1-4、rotate标签" class="headerlink" title="2.1.4、rotate标签"></a>2.1.4、rotate标签</h4><p>旋转动画效果。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;rotate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:duration=&quot;3000&quot;    android:fillAfter=&quot;true&quot;    android:fromDegrees=&quot;0&quot;    android:pivotX=&quot;100%&quot;    android:pivotY=&quot;100%&quot;    android:toDegrees=&quot;-650&quot;&gt;&lt;/rotate&gt;</code></pre><p>android:fromDegrees：动画开始旋转时的角度位置；android:toDegrees：动画结束时旋转到的角度位置。正值代表顺时针方向的度数，负值代表逆时针方向的度数。</p><p>android:pivotX：旋转中心点X轴坐标；android:pivotY：旋转中心点Y轴坐标。没有指定android:pivotX与android:pivotY属性，旋转中心点是默认的控件坐标原点，即控件左上角位置。</p><h4 id="2-1-5、translate标签"><a href="#2-1-5、translate标签" class="headerlink" title="2.1.5、translate标签"></a>2.1.5、translate标签</h4><p>位置移动动画效果。 </p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;translate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:duration=&quot;2000&quot;    android:fromXDelta=&quot;0&quot;    android:fromYDelta=&quot;0&quot;    android:toXDelta=&quot;-80&quot;    android:toYDelta=&quot;-80&quot;&gt;&lt;/translate&gt;</code></pre><p>android:fromXDelta：起始点X轴坐标，android:fromYDelta：起始点Y轴坐标，android:toXDelta：终点X轴坐标，android:toYDelta：终点Y轴坐标。可以是数值、百分数、百分数p三种样式。</p><h4 id="2-1-6、set标签"><a href="#2-1-6、set标签" class="headerlink" title="2.1.6、set标签"></a>2.1.6、set标签</h4><p>定义动画集。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:duration=&quot;3000&quot;    android:fillAfter=&quot;true&quot;&gt;    &lt;alpha        android:fromAlpha=&quot;0.0&quot;        android:toAlpha=&quot;1.0&quot; /&gt;    &lt;scale        android:fromXScale=&quot;0.0&quot;        android:fromYScale=&quot;0.0&quot;        android:pivotX=&quot;50%&quot;        android:pivotY=&quot;50%&quot;        android:toXScale=&quot;1.4&quot;        android:toYScale=&quot;1.4&quot; /&gt;    &lt;rotate        android:fromDegrees=&quot;0&quot;        android:pivotX=&quot;50%&quot;        android:pivotY=&quot;50%&quot;        android:toDegrees=&quot;720&quot; /&gt;&lt;/set&gt;</code></pre><p>在set标签中设直repeateCount属性是无效的，必须对每个动画单独设直才有作用。</p><h3 id="2-2、视图动画的代码实现"><a href="#2-2、视图动画的代码实现" class="headerlink" title="2.2、视图动画的代码实现"></a>2.2、视图动画的代码实现</h3><h4 id="2-2-1、概述"><a href="#2-2-1、概述" class="headerlink" title="2.2.1、概述"></a>2.2.1、概述</h4><pre><code>setDuration(long)setFillAfter(boolean)setFillBefore(boolean)setFillEnabled(boolean)setRepeatCount(int)setRepeatMode(int)setlnterpolator(lnterpolator)</code></pre><p>setRepeatMode(int）取值为Animation.RESTART或者Animation.REVERSE;setRepeatCount(int）用于设置循环次数，当设置为Animation.INFINITE时，表示无限循环。</p><h4 id="2-2-2、ScaleAnimation"><a href="#2-2-2、ScaleAnimation" class="headerlink" title="2.2.2、ScaleAnimation"></a>2.2.2、ScaleAnimation</h4><pre><code>ScaleAnimation(float fromX , float toX, float fromY , float toY)ScaleAnimation(float fromX , float toX , float fromY , float toY , float pivotX, float pivotY)ScaleAnimation(float fromX , float toX , float fromY , float toY, intpivotXType,float pivotXVal ue , int pivotYType , float pivotYValue)</code></pre><p>pivotXType的取值有三个：<code>Animation.ABSOLUTE</code>、<code>Animation.RELATIVE_TO_SELF</code>和<code>Animation.RELATIVE_TO_PARENT</code>。对应的是<code>android:pivotX</code>中的三种取值样式:数值、百分数、百分数p。</p><pre><code>ScaleAnimation scaleAnim = new ScaleAnimation(O.Of , 1.4f, O.Of, 1.4f, Animation.RELATIVE_TO_SELF , 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);scaleAnim.setDuration(700);tv.startAnimation(scaleAnim);</code></pre><h4 id="2-2-3、AlphaAnimation"><a href="#2-2-3、AlphaAnimation" class="headerlink" title="2.2.3、AlphaAnimation"></a>2.2.3、AlphaAnimation</h4><pre><code>AlphaAnimation(Context context , AttributeSet attrs)AlphaAnimation(float fromAlpha , float toAlpha)</code></pre><p>示例</p><pre><code>AlphaAnimation alphaAnim = new AlphaAnimation(1.Of, 0.1f);alphaAnim.setDuration(3000);alphaAnim.setFillBefore(true);tv.startAnimation(alphaAnim);</code></pre><h4 id="2-2-4、RotateAnimation"><a href="#2-2-4、RotateAnimation" class="headerlink" title="2.2.4、RotateAnimation"></a>2.2.4、RotateAnimation</h4><pre><code>RotateAnimation(Context context , AttributeSet attrs)RotateAnimation(float fromDegrees , float toDegrees)RotateAnimation(float fromDegrees , float toDegrees , float pivotX,float pivotY)RotateAnimation (float fromDegrees , float toDegrees , int pivotXType , float pivotXValue , int pivotYType , float pivotYValue)</code></pre><p>示例</p><pre><code>RotateAnimation rotateAnim = new RotateAnimation(0 , -650, Animation.RELATIVE_TO_SELF, O.5f , Animation.RELATIVE_TO_SELF , 0.5f);rotateAnim.setDuration(3000);rotateAnim.setFillAfter(true);tv.startAnimation(rotateAnim);</code></pre><h4 id="2-2-5、TranslateAnimation"><a href="#2-2-5、TranslateAnimation" class="headerlink" title="2.2.5、TranslateAnimation"></a>2.2.5、TranslateAnimation</h4><pre><code>TranslateAnimation(Context context , AttributeSet attrs)TranslateAnimation(float fromXDelta ,float toXDelta, float fromYDelta, float toYDelta)TranslateAnimation(int fromXType, float fromXValue, int toXType, float toXValue , int fromYType , float fromYValue , int toYType , float toYValue)</code></pre><p>示例</p><pre><code>TranslateAnimation translateAnim = new TranslateAnimation(Animation.ABSOLUTE, 0, Animation.ABSOLUTE, -80, Animation.ABSOLUTE, 0, Animation.ABSOLUTE, -80);translateAnim.setDuration(2000);translateAnim.setFillBefore(true);tv.startAnimation(translateAnim);</code></pre><h4 id="2-2-6、AnimationSet"><a href="#2-2-6、AnimationSet" class="headerlink" title="2.2.6、AnimationSet"></a>2.2.6、AnimationSet</h4><p>构造函数</p><pre><code>AnimationSet(Context context, AttributeSet attrs)AnimationSet(boolean shareinterpolator)</code></pre><p>shareinterpolator当取值为true，在AnimationSet类中定义一个插值器（Interpolator）其下面的所有动画共用该插值器；当取值为false，则表示其下面的动画定义各自的插值器。</p><p>增加动画的函数为：</p><pre><code>public void addAnimation(Animation a)</code></pre><p>示例</p><pre><code>Animation alpha_Anim = new AlphaAnimation(1.0f, 0.1f);Animation scale_Anim = new ScaleAnimation(0.0f, 1.4f, 0.0f, 1.4f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);Animation rotate_Anim = new RotateAnimation(0, 720, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);AnimationSet setAnim = new AnimationSet(true);setAnim.addAnimation(alpha_Anim);setAnim.addAnimation(scale_Anim);setAnim.addAnimation(rotate_Anim);setAnim.setDuration(3000);setAnim.setFillAfter(true);tv.startAnimation(setAnim);</code></pre><h4 id="2-2-7、Animation"><a href="#2-2-7、Animation" class="headerlink" title="2.2.7、Animation"></a>2.2.7、Animation</h4><pre><code>//取消动画void cancel()//将控件重置到动画开始前状态void reset()//设置动画监昕void setAnimationListener(Animation.AnimationListener listener)</code></pre><p>监听：</p><pre><code>scaleAnim.setAnimationListener(new Animation.AnimationListener() &#123;    @Override    public void onAnimationStart(Animation animation) &#123;    &#125;    @Override    public void onAnimationEnd(Animation animation) &#123;    &#125;    @Override    public void onAnimationRepeat(Animation animation) &#123;    &#125;&#125;);</code></pre><h3 id="2-3、插值器初探"><a href="#2-3、插值器初探" class="headerlink" title="2.3、插值器初探"></a>2.3、插值器初探</h3><p>Interpolator只是一个接口，通过实现这个接口就可以自定义动画的变化速率。</p><p>使用：</p><pre><code>//xml中android:interpolator=”@android:anim/accelerate_interpolator”//代码alphaAnim.setinterpolator(new LinearInterpolator());</code></pre><h4 id="2-3-1、AccelerateDeceleratelnterpolator"><a href="#2-3-1、AccelerateDeceleratelnterpolator" class="headerlink" title="2.3.1、AccelerateDeceleratelnterpolator"></a>2.3.1、AccelerateDeceleratelnterpolator</h4><p>加速减速插值器，表示在开始与结束的地方速率改变比较慢，在中间的时候加速。效果是先加速后减速。</p><h4 id="2-3-2、Acceleratelnterpolator"><a href="#2-3-2、Acceleratelnterpolator" class="headerlink" title="2.3.2、Acceleratelnterpolator"></a>2.3.2、Acceleratelnterpolator</h4><p>动画开始的地方速率改变比较慢，然后开始加速。动画一直是加速的。</p><h4 id="2-3-3、Deceleratelntelnterpolator"><a href="#2-3-3、Deceleratelntelnterpolator" class="headerlink" title="2.3.3、Deceleratelntelnterpolator"></a>2.3.3、Deceleratelntelnterpolator</h4><p>动画开始的一瞬间加速到最大值，然后逐渐变慢。</p><h4 id="2-3-4、Linearlnterpolator"><a href="#2-3-4、Linearlnterpolator" class="headerlink" title="2.3.4、Linearlnterpolator"></a>2.3.4、Linearlnterpolator</h4><p>动画的速率始终保持恒定。</p><h4 id="2-3-5、Bouncelnterpolator"><a href="#2-3-5、Bouncelnterpolator" class="headerlink" title="2.3.5、Bouncelnterpolator"></a>2.3.5、Bouncelnterpolator</h4><p>弹跳插值器，模拟了控件自由落地后回弹的效果。</p><h4 id="2-3-6、Anticipatelnterpolator"><a href="#2-3-6、Anticipatelnterpolator" class="headerlink" title="2.3.6、Anticipatelnterpolator"></a>2.3.6、Anticipatelnterpolator</h4><p>动画开始后，会先往动画反方向移动一段距离，再应用动画。</p><p>Anticipatelnterpolator还有一个构造函数：</p><pre><code>public Anticipateinterpolator(float tension)</code></pre><p>参数<code>tension</code>对应的XML属性为<code>android:tension</code>，表示张力值，默认值为2，值越大，初始的偏移量越大，而且速度越快。</p><h4 id="2-3-7、Overshootlnterpolator"><a href="#2-3-7、Overshootlnterpolator" class="headerlink" title="2.3.7、Overshootlnterpolator"></a>2.3.7、Overshootlnterpolator</h4><p>结束偏移插值器，表示在动画结束时，沿动画方向继续运动一段距离后再结束动画。</p><p>Overshootlnterpolator也有另一个构造函数：</p><pre><code>public Overshootinterpolator(float tension）</code></pre><p>参数<code>tension</code>对应的XML属性为<code>android:tension</code>，表示张力值，默认值为2，值越大，结束时的偏移量越大，而且速度越快。</p><h4 id="2-3-8、AnticipateOvershootlnterpolator"><a href="#2-3-8、AnticipateOvershootlnterpolator" class="headerlink" title="2.3.8、AnticipateOvershootlnterpolator"></a>2.3.8、AnticipateOvershootlnterpolator</h4><p>AnticipateOvershootlnterpolator是Anticipatelnterpolator与Overshootlnterpolator的合体，即在动画开始时向前偏移一段距离，在动画结束时向后偏移一段距离。</p><p>AnticipateOvershootlnterpolator也有其他的构造函数</p><pre><code>public AnticipateOvershootlnterpolator(float tension)public AnticipateOvershootlnterpolator(float tension, float extraTension)</code></pre><p>tension默认值为2，extraTension默认值为1.5。 </p><h4 id="2-3-9、Cyclelnterpolator"><a href="#2-3-9、Cyclelnterpolator" class="headerlink" title="2.3.9、Cyclelnterpolator"></a>2.3.9、Cyclelnterpolator</h4><p>循环插值器，表示动画循环播放特定的次数，速率沿正弦曲线改变。</p><p>Cyclelnterpolator的构造函数如下：</p><pre><code>public Cycleinterpolator(float cycles)</code></pre><p>参数cycles表示循环次数。</p><h3 id="2-4、动画示例"><a href="#2-4、动画示例" class="headerlink" title="2.4、动画示例"></a>2.4、动画示例</h3><h4 id="2-4-1、镜头由远及近效果"><a href="#2-4-1、镜头由远及近效果" class="headerlink" title="2.4.1、镜头由远及近效果"></a>2.4.1、镜头由远及近效果</h4><h4 id="2-4-2、加载框效果"><a href="#2-4-2、加载框效果" class="headerlink" title="2.4.2、加载框效果"></a>2.4.2、加载框效果</h4><h4 id="2-4-3、扫描动画效果"><a href="#2-4-3、扫描动画效果" class="headerlink" title="2.4.3、扫描动画效果"></a>2.4.3、扫描动画效果</h4><p>用<code>Animation.setStartOffset(int time）</code>来延迟各个动画的开始时间。</p><h3 id="2-5、逐帧动画"><a href="#2-5、逐帧动画" class="headerlink" title="2.5、逐帧动画"></a>2.5、逐帧动画</h3><p>Frame Animation</p><h4 id="2-5-1、XML实现"><a href="#2-5-1、XML实现" class="headerlink" title="2.5.1、XML实现"></a>2.5.1、XML实现</h4><h5 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h5><p>XML文件放置在<code>／res</code>下的drawable目录中：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:oneshot=&quot;false&quot;&gt;    &lt;item        android:drawable=&quot;@drawable/list_icon_gif_playing1&quot;        android:duration=&quot;60&quot; /&gt;    &lt;item        android:drawable=&quot;@drawable/list_icon_gif_playing2&quot;        android:duration=&quot;60&quot; /&gt;    &lt;item        android:drawable=&quot;@drawable/list_icon_gif_playing3&quot;        android:duration=&quot;60&quot; /&gt;    &lt;item        android:drawable=&quot;@drawable/list_icon_gif_playing4&quot;        android:duration=&quot;60&quot; /&gt;    &lt;item        android:drawable=&quot;@drawable/list_icon_gif_playing5&quot;        android:duration=&quot;60&quot; /&gt;&lt;/animation-list&gt;</code></pre><p><code>android:oneshot</code>如果定义为true，那么此动画只会执行1次;如果定义为false，则一直循环。</p><p>然后给ImageView设置动画资源。可以通过<code>android:src</code>实现，也可以通过<code>android:background</code>实现。</p><pre><code>android:background=&quot;@drawable/playing_ani&quot;//或者android:src=&quot;@drawable/playing_ani&quot;</code></pre><p>最后代码中开始动画</p><pre><code>AnimationDrawable anim = (AnimationDrawable) image.getDrawable();anim.start();</code></pre><p>当我们通过<code>android:src＝””</code>设置动画资源时，对应的取出方式是<code>image.getDrawable()</code>如果我们通过<code>android:background=””</code>设置动画资源，那么对应的取出方式就是<code>image.getBackground()</code>。</p><h5 id="2、音乐播放示例"><a href="#2、音乐播放示例" class="headerlink" title="2、音乐播放示例"></a>2、音乐播放示例</h5><h5 id="3、AnimationDrawable类"><a href="#3、AnimationDrawable类" class="headerlink" title="3、AnimationDrawable类"></a>3、AnimationDrawable类</h5><p>AnimationDrawable有下面几个常用函数</p><pre><code>void start()//开始播放逐帧动画void stop()//停止播放逐帧动画int getDuration(int index）//得到指定index的帧的持续时间Drawable getFrame(int index）//得到指定index的帧所对应的Drawable对象int getNumberOfFrames()//得到当前AnimationDrawable的所有帧数量boolean isRunning() //判断当前AnimationDrawable是否正在播放void setOneShot(boolean oneShot）//设置AnimationDrawable是否执行一次，true表示执行一次，false表示循环播放boolean isOneShot() //判断当前AnimationDrawable是否执行一次，true表示执行一次，返回false表示循环播放。void addFrame(Drawable frame,int duration）//为AnimationDrawable添加1帧，并设置持续时间。</code></pre><h4 id="2-5-2、代码实现"><a href="#2-5-2、代码实现" class="headerlink" title="2.5.2、代码实现"></a>2.5.2、代码实现</h4><pre><code>&lt;ImageView    android:id=&quot;@+id/frame_iv&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;/&gt;</code></pre><p>代码</p><pre><code>AnimationDrawable anim = new AnimationDrawable();for (int i = 1; i &lt;= 14; i++) &#123;    int id = getResources().getIdentifier(&quot;list_icon_gif_playing&quot; + i,&quot;drawable&quot;, getPackageName());    Drawable drawable = getResources().getDrawable(id);    anim.addFrame(drawable, 60);&#125;anim.setOneShot(false);image.setBackgroundDrawable(anim);anim.start();</code></pre><p>getldentifier()函数的完整声明如下：</p><pre><code>int getldentifier(String name, String defType, String defPackage)//获得stringgetResources().getldentifier(”name”,”string”, packdgeName);//获得array中的数组：getResources().getidentifier(”name”,”array”, packdgeName);</code></pre><h2 id="第3章、属性动画"><a href="#第3章、属性动画" class="headerlink" title="第3章、属性动画"></a>第3章、属性动画</h2><h3 id="3-1、ValueAnimator的基本使用"><a href="#3-1、ValueAnimator的基本使用" class="headerlink" title="3.1、ValueAnimator的基本使用"></a>3.1、ValueAnimator的基本使用</h3><h4 id="3-1-1、概述"><a href="#3-1-1、概述" class="headerlink" title="3.1.1、概述"></a>3.1.1、概述</h4><p>View Animation中的动画类命名都是XXXXAnimation，而Property Animation中的动画类命名都是XXXXAnimator。</p><p>视图动画仅能对指定的控件做动画，而属性动画是通过改变控件的某一属性值来做动画的。</p><h4 id="3-1-2、ValueAnimator的简单使用"><a href="#3-1-2、ValueAnimator的简单使用" class="headerlink" title="3.1.2、ValueAnimator的简单使用"></a>3.1.2、ValueAnimator的简单使用</h4><p>ValueAnimator不会对控件执行任何操作，我们可以给它设定从哪个值运动到哪个值，通过监听这些值的渐变过程来自己操作控件。</p><pre><code>//创建实例ValueAnimator animator = ValueAnimator.ofInt(0, 400);animator.setDuration(1000);//添加监昕事件animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;    @Override    public void onAnimationUpdate(ValueAnimator animation) &#123;        int curValue = (Integer)animation.getAnimatedValue() ;        Log.d(&quot;qijian&quot;,&quot;curValue:&quot; + curValue);    &#125;&#125;);//开启动画animator.start();</code></pre><p>改变控件位置</p><pre><code>view.layout();</code></pre><h4 id="3-1-3、常用函数"><a href="#3-1-3、常用函数" class="headerlink" title="3.1.3、常用函数"></a>3.1.3、常用函数</h4><pre><code>public static ValueAnimator ofint (int... values)public static ValueAnimator ofFloat(float... values)//设置动画时长，单位是毫秒ValueAnimator setDuration(long duration)//获取 ValueAnimator 在运动时当前运动点的值Object getAnimatedValue()//开始动画void start()//设置循环次数，设置为ValueAnimator.INFINITE表示无限循环void setRepeatCount(int value)//设置循环模式有ValueAnimator.RESTART和ValueAnimator.REVERSEvoid setRepeatMode(int value)//取消动画void cancel()</code></pre><blockquote><p>重复次数为INFINITE的动画，当Activity结束的时候，必须调用cancel()函数取消动画，否则动画将无限循环，从而导致View无法释放，进一步导致整个Activity无法释放，最终引起内存泄漏。</p></blockquote><pre><code>//监听动画过程中值的实时变化,添加方法为:public void addUpdateListener(AnimatorUpdateListener listener)public static interface AnimatorUpdateListener &#123;    void onAnimationUpdate(ValueAnimator animation);&#125;//听动画变化时的4个状态,添加方法为:public void addListener(AnimatorListener listener)public static interface AnimatorListener &#123;    void onAnimationStart(Animator animation);    void onAnimationEnd(Animator animation);    void onAnimationCancel(Animator animation);    void onAnimationRepeat(Animator animation);&#125;</code></pre><p>移除监听</p><pre><code>void removeUpdateListener(AnimatorUpdateListener listener);void removeAllUpdateListeners();void removeListener(AnimatorListener listener);void removeAllListeners();</code></pre><p>其他不常用函数</p><pre><code>//延时多久开始，单位是毫秒public void setStartDelay(long startDelay)//完全克隆一个ValueAnimator实例，包括它所有的设置以及所有对监听器代码的处理public void Animatorclone()</code></pre><h4 id="3-1-4、弹跳加载申效果示例"><a href="#3-1-4、弹跳加载申效果示例" class="headerlink" title="3.1.4、弹跳加载申效果示例"></a>3.1.4、弹跳加载申效果示例</h4><p>通过<code>setTop(int top）</code>函数将控件移动到当前位置。这里需要说明的是，<code>getTop</code>和<code>setTop</code>函数所得到的和设置的坐标都是相对父控件的坐标位置。</p><h3 id="3-2、自定义插值器与Evaluator"><a href="#3-2、自定义插值器与Evaluator" class="headerlink" title="3.2、自定义插值器与Evaluator"></a>3.2、自定义插值器与Evaluator</h3><p>对于Animator而言，不仅可以设置插值器，还可以设置Evaluator。</p><h4 id="3-2-1、自定义插值器"><a href="#3-2-1、自定义插值器" class="headerlink" title="3.2.1、自定义插值器"></a>3.2.1、自定义插值器</h4><p>系统插值器实现的接口：</p><pre><code>public interface TimeInterpolator &#123;    float getInterpolation(float input);&#125;</code></pre><p>参数input:取值范围是0～1，表示当前动画的进度，只与时间有关，取0时表示动画刚开始，取1时表示动画结束。</p><p>返回值：表示当前实际想要显示的进度。取值可以超过1，也可以小于0。超过1表示己经超过目标值，小于0表示小于开始位置。</p><p>自定义插值器，只需实现<code>Timelnterpolator</code>接口就可以了。</p><h4 id="3-2-2、Evaluator"><a href="#3-2-2、Evaluator" class="headerlink" title="3.2.2、Evaluator"></a>3.2.2、Evaluator</h4><p>流程：oflnt(0,400）定义动画数值区间 -&gt; 插值器(返面当前数值进度，如0.2) -&gt; Evaluator(根据数值进度计算当前值) -&gt; 监听器退回(在AnimatorUpdatelistener中返回)。</p><p>Evaluator用于将从插值器返回的数值进度转换成对应的数值。</p><pre><code>public class IntEvaluator Implements TypeEvaluator&lt;Integer&gt; &#123;    public Integer evaluate(float fraction , Integer startValue , Integer endValue) &#123;        int startint = startValue;        return (int) (startint + fraction * (endValue - startint));    &#125;&#125;</code></pre><p><code>fraction</code>参数就是插值器中的返回值，表示当前动画的数值进度，以小数表示。<code>startValue</code>和<code>endValue</code>分别对应<code>oflnt(int start,int end）</code>函数中<code>start</code>和<code>end</code>的数值。返回值就是在<code>AnimatorUpdateListener</code>监听器中通过<code>animation.getAnimatedValue()</code>函数得到的数值。</p><p>使用</p><pre><code>animator.setEvaluator(new IntEvaluator());</code></pre><p>所以既可以通过重写插值器改变数值进度来改变数值位置，也可以通过改变Evaluator中数值进度所对应的具体数值来改变数值位置。</p><h5 id="ArgbEvaluator"><a href="#ArgbEvaluator" class="headerlink" title="ArgbEvaluator"></a>ArgbEvaluator</h5><p>除 <code>IntEvaluator</code> 和 <code>FloatEvaluator</code> 外，还有一个名为 <code>ArgbEvaluator</code>，它是用来实现颜色值过渡转换的。</p><pre><code>ValueAnimator animator = ValueAnimator.ofInt(0xffffff00,0xff0000ff);animator.setEvaluator(new ArgbEvaluator());animator.setDuration(3000);animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;    public void onAnimationUpdate(ValueAnimator animation) &#123;        int curValue = (Integer) animation.getAnimatedValue();        tv.setBackgroundColor(curValue);    &#125;&#125;);animator.start();</code></pre><h3 id="3-3、ValueAnimator进阶ofObject"><a href="#3-3、ValueAnimator进阶ofObject" class="headerlink" title="3.3、ValueAnimator进阶ofObject"></a>3.3、ValueAnimator进阶ofObject</h3><pre><code>public static ValueAnimator ofObject(TypeEvaluator evaluator, Object ...values)</code></pre><h4 id="TextView中的字母从A变化到Z实例"><a href="#TextView中的字母从A变化到Z实例" class="headerlink" title="TextView中的字母从A变化到Z实例"></a>TextView中的字母从A变化到Z实例</h4><h4 id="3-3-2、示例：抛物动画"><a href="#3-3-2、示例：抛物动画" class="headerlink" title="3.3.2、示例：抛物动画"></a>3.3.2、示例：抛物动画</h4><h3 id="3-4、ObjectAnimator"><a href="#3-4、ObjectAnimator" class="headerlink" title="3.4、ObjectAnimator"></a>3.4、ObjectAnimator</h3><h4 id="3-4-1、概述"><a href="#3-4-1、概述" class="headerlink" title="3.4.1、概述"></a>3.4.1、概述</h4><p><code>ObjectAnimator</code>是派生自<code>ValueAnimator</code>的，所以<code>ValueAnimator</code>中所能使用的函数在<code>ObjectAnimator</code>中都可以正常使用。</p><pre><code>public static ObjectAnimator ofFloat(Object target,String propertyName,float ...values)</code></pre><p>在View中，有关动画共有下面几组set函数。</p><pre><code>// 1. 透明 度： alphapublic void setAlpha(float alpha)// 2. 旋转度数 ： rotation 、 rotationX 、 rotationYpublic void setRotation(float rotation)public void setRotationX(float rotationX)public void setRotationY(float rotationY)// 3. 平移 ： translationX 、 translationYpublic void setTranslationX(float translationX)public void setTranslationY(float translationY)// 4. 缩放 ： scaleX 、 scaleYpublic void setScaleX(float scaleX)public void setScaleY(float scaleY)</code></pre><h4 id="3-4-2、ObjectAnimator动画原理"><a href="#3-4-2、ObjectAnimator动画原理" class="headerlink" title="3.4.2、ObjectAnimator动画原理"></a>3.4.2、ObjectAnimator动画原理</h4><p><code>ofFloat(tv, &quot;scaleY&quot;,0,3,1）</code>(定义动画对象及区间） —&gt; 插值器(返面当前数值进度，如0.2) -&gt; Evaluator(根据数值进度计算当前值) -&gt; 调用set函数(根据属性拼装set函数并反射调用，并将当前值作为参数传入)。</p><p>ObjectAnimator 只负责把动画过程中的数值传到对应属性的set函数中就结束了。</p><h4 id="3-4-3、自定义ObjectAnimator属性"><a href="#3-4-3、自定义ObjectAnimator属性" class="headerlink" title="3.4.3、自定义ObjectAnimator属性"></a>3.4.3、自定义ObjectAnimator属性</h4><p>抛物动画例子</p><h4 id="3-4-4、何时需要实现对应属性的get函数"><a href="#3-4-4、何时需要实现对应属性的get函数" class="headerlink" title="3.4.4、何时需要实现对应属性的get函数"></a>3.4.4、何时需要实现对应属性的get函数</h4><p>当动画只有一个过渡值时，系统才会调用对应属性的get函数来得到动画的初始值。当不存在get函数时，则会取动画参数类型的默认值作为初始值；当无法取得动画参数类型的默认值时，则会直接崩渍。</p><h4 id="3-4-5、常用函数"><a href="#3-4-5、常用函数" class="headerlink" title="3.4.5、常用函数"></a>3.4.5、常用函数</h4><pre><code>//设置动画时长，单位是毫秒ValueAnimator setDuration(long duration)//获取 ValueAnimator 在运动时，当前运动点的值Object getAnimatedValue () ;//开始动画void start ()//设置循环次数，设置为 INFINITE 表示无限循环void setRepeatCount(int value)//设置循环模式，value 取值有 RESTART 和 REVERSEvoid setRepeatMode （Int value)//取消动画void cancel()//监听动画变化时的实时值//添加方法为 public void addUpdateListener(AnimatorUpdateListener listenerpublic static interface AnimatorUpdateListener &#123;    void onAnimatorUpdate(ValueAnimator animation);)//监听器二 ： 监听动画变化时的 4 种状态//添加方法为 public void addListener(AnimatorListener listener)public static interface AnimatorListener &#123;    void onAnimationStart(Animator animation);    void onAnimationEnd(Animator animation);    void onAnimationCancel(Animator animation);    void onAnimationRepeat(Animator animation);&#125;//设置插值器public void setInterpolator(Timeinterpolator value)//设置 Evaluatorpublic void setEvaluator(TypeEvaluator value)</code></pre><h3 id="3-5、组合动画AnimatorSet"><a href="#3-5、组合动画AnimatorSet" class="headerlink" title="3.5、组合动画AnimatorSet"></a>3.5、组合动画AnimatorSet</h3><h4 id="3-5-1、playSequentially与playTogether"><a href="#3-5-1、playSequentially与playTogether" class="headerlink" title="3.5.1、playSequentially与playTogether"></a>3.5.1、playSequentially与playTogether</h4><p>playSequentially：动画依次播放，playTogether：所有动画一起开始。</p><p>playTogether和playSequentially函数在开始动画时，只是把每个控件的动画激活，至于每个控件自身的动画是否延时、是否无限循环，只与控件自身的动画设定有关，与playTogether和 playSequentially函数无关，它们只负责到时间后激活动画。</p><p>playSequentially函数只有在上一个控件做完动画以后，才会激活下一个控件的动画。如果上一个控件的动画是无限循环的，那么下一个控件就别再指望能做动画了。</p><h4 id="3-5-2、AnimatorSet-Builde"><a href="#3-5-2、AnimatorSet-Builde" class="headerlink" title="3.5.2、AnimatorSet.Builde"></a>3.5.2、AnimatorSet.Builde</h4><pre><code>//表示要播放哪个动画public Builder play (Animator anim)//和前面的动画一起执行public Builder with(Animator anim)//先执行这个动画，再执行前面的动画public Builder before (Animator aηim)//在执行前面的动画后才执行该动画public Builder after(Animator anim)//延迟 n 毫秒之后执行动画public Builder after(long delay)</code></pre><h4 id="3-5-3、AnimatorSet监昕器"><a href="#3-5-3、AnimatorSet监昕器" class="headerlink" title="3.5.3、AnimatorSet监昕器"></a>3.5.3、AnimatorSet监昕器</h4><pre><code>public void addListener(AnimatorListener listener);</code></pre><h4 id="3-5-4、常用函数"><a href="#3-5-4、常用函数" class="headerlink" title="3.5.4、常用函数"></a>3.5.4、常用函数</h4><pre><code>//设置单次动画时长public AnimatorSet setDuration(long duration);//设置插值器public void setinterpolator(Timeinterpolator interpolator)//设置 ObjectAnimator 动画目标控件public void setTarget(Object target)</code></pre><p>在AnimatorSet中设置以后，会覆盖单个ObjectAnimator中的设置。</p><pre><code>//设置延时开始动画时长public void setStartDelay(long startDelay)</code></pre><p>不会覆盖单个动画的延时，而且仅针对性地延长AnimatorSet的激活时间。</p><h4 id="3-5-5、示例：路径动画"><a href="#3-5-5、示例：路径动画" class="headerlink" title="3.5.5、示例：路径动画"></a>3.5.5、示例：路径动画</h4><p>代码</p><pre><code>https://github.com/AdamRight/TeaTool/blob/master/app/src/main/java/com/tea/teatool/pathMenu/PathMenuActivity.java</code></pre><h3 id="3-6、Animator动画的XML实现"><a href="#3-6、Animator动画的XML实现" class="headerlink" title="3.6、Animator动画的XML实现"></a>3.6、Animator动画的XML实现</h3><p>在 XML 中与 Animator 对应的有三个标签:</p><pre><code>&lt;animator/＞:对应ValueAnimator&lt;objectAnimator/＞ 对应ObjectAnimator&lt;set/＞对应 AnimatorSet ValueAnimator valueAnimator = (ValueAnimator)Animatorinflater.loadAnimator(MyActivity.this , R.animator.animator);valueAnimator.start();ObjectAnimator animator = (ObjectAnimator) Animatorinflater.loadAnimator(MyActivity.this , R.animator.object_animator);animator.setTarget(mTvl);animator.start();</code></pre><h2 id="第4章属性动画进阶"><a href="#第4章属性动画进阶" class="headerlink" title="第4章属性动画进阶"></a>第4章属性动画进阶</h2><h3 id="4-1、PropertyValuesHolder与Keyframe"><a href="#4-1、PropertyValuesHolder与Keyframe" class="headerlink" title="4.1、PropertyValuesHolder与Keyframe"></a>4.1、PropertyValuesHolder与Keyframe</h3><p>通过<code>ofPropertyValu巳sHolder</code>函数来创建实例。</p><h4 id="4-1-1、PropertyValuesHolder"><a href="#4-1-1、PropertyValuesHolder" class="headerlink" title="4.1.1、PropertyValuesHolder"></a>4.1.1、PropertyValuesHolder</h4><p>ofFloat</p><pre><code>PropertyValuesHolder rotationHolder = PropertyValuesHolder.ofFloat(&quot;Rotation&quot;, 60f, -60f, 40f, -40f, -20f, 20f, 10f, -10f, 0f);PropertyValuesHolder alphaHolder = PropertyValuesHolder.ofFloat(&quot;alpha&quot;, 0.1f, 1f, 0.1f, 1f);ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(mTextView, rotationHolder, alphaHolder);animator.setDuration(3000);animator.start();</code></pre><p>ofObject</p><pre><code>public static PropertyValuesHolder ofObject (String propertyName ,TypeEvaluator evaluator, Object . .. values )</code></pre><h4 id="4-1-2、Keyframe"><a href="#4-1-2、Keyframe" class="headerlink" title="4.1.2、Keyframe"></a>4.1.2、Keyframe</h4><p>关键帧：解决控制动画速率的问题。</p><pre><code>public static Keyframe ofFloat(float fraction , float value)fraction：表示当前的显示进度，即在插值器中getlnterpolation函数的返回值。value：表示动画当前所在的数值位置。</code></pre><p>设置插值器：</p><pre><code>public void setinterpolator(Timeinterpolator interpolator)</code></pre><p>使用ofObject函数来制作动画的时候，必须设置Evaluator，因为系统根本无法知道动画的中间值Object真正是什么类型的。</p><h4 id="4-1-3-PropertyValuesHolde其他函数"><a href="#4-1-3-PropertyValuesHolde其他函数" class="headerlink" title="4.1.3 PropertyValuesHolde其他函数"></a>4.1.3 PropertyValuesHolde其他函数</h4><h4 id="4-1-4、电话晌铃效果示例"><a href="#4-1-4、电话晌铃效果示例" class="headerlink" title="4.1.4、电话晌铃效果示例"></a>4.1.4、电话晌铃效果示例</h4><p>借助Keyframe，不需要使用AnimatorSet，也能实现多个动画同时播放。</p><h3 id="4-2、ViewPropertyAnimator"><a href="#4-2、ViewPropertyAnimator" class="headerlink" title="4.2、ViewPropertyAnimator"></a>4.2、ViewPropertyAnimator</h3><h4 id="4-2-1、概述"><a href="#4-2-1、概述" class="headerlink" title="4.2.1、概述"></a>4.2.1、概述</h4><h4 id="4-2-2、常用函数"><a href="#4-2-2、常用函数" class="headerlink" title="4.2.2、常用函数"></a>4.2.2、常用函数</h4><pre><code>tv.animate().scaleX(2).scaleY(2).setListener(new Animator.AnimatorListener() &#123;    public void onAnimationStart(Animator animation ) &#123;&#125;    public void onAnimationEnd (Animator animation ) &#123;&#125;    public void onAnimationCancel(Animator animation) &#123;&#125;    public void onAnimationRepeat(Animator animation) &#123;&#125;&#125;);</code></pre><h3 id="4-3、为ViewGroup内的组件添加动画"><a href="#4-3、为ViewGroup内的组件添加动画" class="headerlink" title="4.3、为ViewGroup内的组件添加动画"></a>4.3、为ViewGroup内的组件添加动画</h3><h4 id="4-3-1、animatelayoutChanges属性"><a href="#4-3-1、animatelayoutChanges属性" class="headerlink" title="4.3.1、animatelayoutChanges属性"></a>4.3.1、animatelayoutChanges属性</h4><p><code>android:animateLayoutChanges＝”true/false”</code>，所有派生自ViewGroup类的控件都具有此属性。动画不能自定义。</p><h4 id="4-3-2、LayoutTransition"><a href="#4-3-2、LayoutTransition" class="headerlink" title="4.3.2、LayoutTransition"></a>4.3.2、LayoutTransition</h4><p>第一步，创建实例。</p><pre><code>LayoutTransition transitioner = new LayoutTransition();</code></pre><p>第二步创建动画并进行设置。</p><pre><code>ObjectAnimator animOut = ObjectAnimator.ofFloat(null,”rotation”, Of,90f, Of);transitioner.setAnimator(LayoutTransition.DISAPPEARING , animOut);</code></pre><p>第三步将LayoutTransition设置到ViewGroup中。</p><pre><code>linearLayout.setLayoutTransition(transitioner);</code></pre><p>其中,transitionType表示当前应用动画的对象范围，取值如下:</p><pre><code>APPEARING：元素在容器中出现时所定义的动画。DISAPPEARING：元素在容器中消失时所定义的动画。CHANGE_APPEARING:由于容器中要显现一个新的元素，其他需要变化的元素所应用的动画。CHANGE_DISAPPEARING：当容器中某个元素消失时，其他需要变化的元素所应用的动画。</code></pre><h4 id="4-3-3、其他函数"><a href="#4-3-3、其他函数" class="headerlink" title="4.3.3、其他函数"></a>4.3.3、其他函数</h4><h3 id="4-4、开源动画库NineOldAndroids"><a href="#4-4、开源动画库NineOldAndroids" class="headerlink" title="4.4、开源动画库NineOldAndroids"></a>4.4、开源动画库NineOldAndroids</h3><h2 id="第5章动画进阶"><a href="#第5章动画进阶" class="headerlink" title="第5章动画进阶"></a>第5章动画进阶</h2><h3 id="5-1、利用PathMeasure实现路径动画"><a href="#5-1、利用PathMeasure实现路径动画" class="headerlink" title="5.1、利用PathMeasure实现路径动画"></a>5.1、利用PathMeasure实现路径动画</h3><h4 id="5-1-1、初始化"><a href="#5-1-1、初始化" class="headerlink" title="5.1.1、初始化"></a>5.1.1、初始化</h4><p>方式一：</p><pre><code>PathMeasure pathMeasure = new PathMeasure() ;setPath (Path path , boolean forceClosed);</code></pre><p>方式二：</p><pre><code>PathMeasure(Path path , boolean forceClosed);</code></pre><p><code>boolean forceClosed</code>表示Path最终是否需要闭合，如果为true，则不管关联的Path是否是闭合的，都会被闭合。对绑定的Path不会产生任何影响，PathMeasure的计算就会包含最后一段闭合的路径，与原来的Path不同。</p><h4 id="5-1-2、简单函数使用"><a href="#5-1-2、简单函数使用" class="headerlink" title="5.1.2、简单函数使用"></a>5.1.2、简单函数使用</h4><pre><code>//获取计算的路径长度PathMeasure.getLength()//判断测量Path时是否计算闭合public boolean isClosed()//函数得到的曲线的顺序与Path中添加的顺序相同。getLength等函数针对的都是当前的曲线，而不是整个Path。PathMeasure.nextContour()</code></pre><h4 id="5-1-3、getSegment函数"><a href="#5-1-3、getSegment函数" class="headerlink" title="5.1.3、getSegment函数"></a>5.1.3、getSegment函数</h4><pre><code>//截取整个Path中的某个片段，将截取后的 Path 保存到参数 dst 中。boolean getSegrneηt(float startD ,float stopD, Path dst, boolean startWithMoveTo)startD、stopD：开始截取位置距离 Path 起始点的长度；结束截取位置距离 Path 起始点的长度。Path dst：截取的Path将会被添加到dst中。注意是添加，而不是替换。boolean startWithMoveTo：起始点是否使用 moveTo。</code></pre><h4 id="5-1-4、getPosTan函数"><a href="#5-1-4、getPosTan函数" class="headerlink" title="5.1.4、getPosTan函数"></a>5.1.4、getPosTan函数</h4><pre><code>//用于得到路径上某一长度的位置以及该位置的正切值 boolean getPosTan(float distance , float[] pos , float[] tan)</code></pre><p><code>float distance</code>：距离Path起始点的长度。<code>float[] pos</code>：该点的坐标值。<code>pos[O]</code>表示x坐标，<code>pos[1］</code>表示y坐标。<code>float[] tan</code>：该点的正切值。</p><p>箭头加载动画示例</p><h4 id="5-1-5、getMatrix函数"><a href="#5-1-5、getMatrix函数" class="headerlink" title="5.1.5、getMatrix函数"></a>5.1.5、getMatrix函数</h4><pre><code>//用于得到路径上某一长度的位置以及该位置的正切值的矩阵boolean getMatrix(float distance , Matrix matrix , int flags)</code></pre><h4 id="5-1-6、支付宝支付成功动画示例"><a href="#5-1-6、支付宝支付成功动画示例" class="headerlink" title="5.1.6、支付宝支付成功动画示例"></a>5.1.6、支付宝支付成功动画示例</h4><h3 id="5-2、SVG动画"><a href="#5-2、SVG动画" class="headerlink" title="5.2、SVG动画"></a>5.2、SVG动画</h3><h4 id="5-2-1、概述"><a href="#5-2-1、概述" class="headerlink" title="5.2.1、概述"></a>5.2.1、概述</h4><p>SVG 的全称是<code>Scalable Vector Graphics</code>（可缩放矢量图形〉。矢量图相对应的是位图，Bitmap就是位图。</p><p>对于5.0以下的机型，可以通过引入 <code>com.android.support:appcompat-v7:23.4.0</code>及以上版本进行支持。</p><h4 id="5-2-2、vector标签与图像显示"><a href="#5-2-2、vector标签与图像显示" class="headerlink" title="5.2.2、vector标签与图像显示"></a>5.2.2、vector标签与图像显示</h4><p>vector标签指定的是画布大小，path标签则指定的是路径内容。</p><p>Android工程中使用SVG图像。</p><h4 id="5-2-3、动态Vector"><a href="#5-2-3、动态Vector" class="headerlink" title="5.2.3、动态Vector"></a>5.2.3、动态Vector</h4><h4 id="5-2-4、输入搜索动画示例"><a href="#5-2-4、输入搜索动画示例" class="headerlink" title="5.2.4、输入搜索动画示例"></a>5.2.4、输入搜索动画示例</h4><h2 id="第6章Paint基本使用"><a href="#第6章Paint基本使用" class="headerlink" title="第6章Paint基本使用"></a>第6章Paint基本使用</h2><h3 id="6-1、硬件加速"><a href="#6-1、硬件加速" class="headerlink" title="6.1、硬件加速"></a>6.1、硬件加速</h3><p>GPU的英文全称为<code>Graphic Processing Unit</code>，中文翻译为“图形处理器”。GPU是专门为处理图形任务而产生的芯片。在GPU加速时，实际上是使用OpenGL的相关函数来完成绘制的。</p><p>Android提供了不同的禁用方法，分Application、Activity、Window、View4个层级。</p><p>在<code>AndroidManifest.xml</code>文件中为application标签添加如下属性，即可为整个应用程序开启/关闭硬件加速。</p><pre><code>&lt;application android:hardwareAccelerated=”true”...&gt;</code></pre><p>在activity标签下开启或关闭硬件加速:</p><pre><code>&lt;activity android:hardwareAccelerated=”false” /&gt;</code></pre><p>在Window层级上使用如下代码开启硬件加速(在Window层级上不支持关闭硬件加速:</p><pre><code>getWiηdow().setFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);</code></pre><p>在View层级上使用如下代码关闭硬件加速（在View层级上不支持开启硬件加速）</p><pre><code>setLayerType(View.LAYER_TYPE_SOFTWARE,null&#125;;</code></pre><p>或者使用<code>android:layerType＝&quot;software&quot;</code>来关闭硬件加速。</p><h3 id="6-2、文字"><a href="#6-2、文字" class="headerlink" title="6.2、文字"></a>6.2、文字</h3><h4 id="6-2-1、概述"><a href="#6-2-1、概述" class="headerlink" title="6.2.1、概述"></a>6.2.1、概述</h4><p>基线就是四线格中的第三条线。</p><pre><code>public void drawText (String text , float x , float y , Paint paint)</code></pre><p>y代表的是基线的位置,而不是左上角。x代表所要绘制的文字所在矩形的相对位置。</p><pre><code>Align的取值为 Paint.Align.LEFT、Paint.Align.CENTER、Paint.Align.RIGHTPaint :: setTextAlign(Align align);</code></pre><h4 id="6-2-2、绘图四线搭与FontMetrics"><a href="#6-2-2、绘图四线搭与FontMetrics" class="headerlink" title="6.2.2、绘图四线搭与FontMetrics"></a>6.2.2、绘图四线搭与FontMetrics</h4><pre><code>ascent：系统推荐的，在绘制单个字符时，字符应当的最高高度所在线。descent：系统推荐的，在绘制单个字符肘，宇符应当的最低高度所在线。top：可绘制的最高高度所在线。bottom：可绘制的最低高度所在线。</code></pre><p>ascent变量的值是负数。descent变量的值必然是正数。</p><pre><code>ascent线的y坐标 ＝ baseline线的y坐标 ＋ fontMetric.ascentdescent线的y坐标 ＝ baseline线的y坐标 ＋ fontMetric.descenttop线的y坐标 ＝ baseline线的y坐标 ＋ fontMetric.topbottom线的y坐标 ＝ baseline线的y坐标 ＋ fontMetric.bottom</code></pre><p>获取 FontMetrics 对象</p><pre><code>Paint paint = new Paint();Paint.FontMetrics fm = paint.getFontMetrics();//Float类型Paint.FontMetricsint fmint = paint.getFontMetricsint();//Int类型</code></pre><h4 id="6-2-3、常用函数"><a href="#6-2-3、常用函数" class="headerlink" title="6.2.3、常用函数"></a>6.2.3、常用函数</h4><p>字符串所占区域的高度、宽度和最小矩形。</p><p>高度：bottom线所在位置的y坐标减去top线所在位置的y坐标</p><pre><code>Paint.FontMetricsint fm = paint.getFontMetricsint();int top = baseLineY + fm.top;int bottom = baseLineY + fm.bottom;//所占区域的高度int height = bottom - top;</code></pre><p>宽度:</p><pre><code>int width = paint.measureText(String text);</code></pre><p>最小矩形</p><pre><code>//以（0, 0）点所在位置为基线,text要测量最小矩形的字符串,start 要测量起始字符在字符串中的索引,//end 所要测量的字符的长度,bounds接收测量结果public void getTextBounds(String text, int start, int end, Rect bounds);</code></pre><p>矩形实际位置的坐标如下</p><pre><code>Rect minRect = new Rect();paint.getTextBounds(text , 0 , text. length(), minRect);//最小矩形，实际top线的位置int minTop =bounds.top + baselineY;//最小矩形，实际 bottom 线的位置int minBottom = bounds.bottom + baselineY;</code></pre><h4 id="6-2-4、定点写字示例"><a href="#6-2-4、定点写字示例" class="headerlink" title="6.2.4、定点写字示例"></a>6.2.4、定点写字示例</h4><p>当给定中间线位置以后，baseline线的位置为：</p><pre><code>baseline = center + (FontMetrics.bottom - FontMetrics.top)/2 - FontMetrics.bottom</code></pre><h3 id="6-3、Paint常用函数"><a href="#6-3、Paint常用函数" class="headerlink" title="6.3、Paint常用函数"></a>6.3、Paint常用函数</h3><h4 id="6-3-1、基本设置函数"><a href="#6-3-1、基本设置函数" class="headerlink" title="6.3.1、基本设置函数"></a>6.3.1、基本设置函数</h4><pre><code>reset()setColor(int color)setARGB(int a, int r, int g, int b)setAlpha(int a)//Paint.Style.FILL、Paint.Style.FILL_AND_STROE、Paint.Style.STROKEsetStyle(Paint.Style style)setStrokeWidth(float width)setAntiAlias(boolean aa)setStrokeMiter(float miter)//ComposePathEffect、CornerPathEffect、DashPathEffect、DiscretePathEffect、PathDashPathEffect、SumPathEffect。setPathEffect(PathEffect effect)//Paint.Cap.ROUND 、Paint.Cap.SQUARE、Paint.Cap.BUTTsetStrokeCap(Paint.Cap cap)//Paiηt.Join.MITER、Paiηt.Join.ROUND、Paiηt.Join.BEVELsetStrokeJoin (Paiηt.Join join)setDither(boolean dither)</code></pre><h4 id="6-3-2、字体相关函数"><a href="#6-3-2、字体相关函数" class="headerlink" title="6.3.2、字体相关函数"></a>6.3.2、字体相关函数</h4><pre><code>setTextSize(float textSize)setFakeBoldText(boolean fakeBoldText)setUnderlineText(boolean underlineText)setTextAlign（Paint.Align align)setTextScaleX(float scaleX)setTextSkewX(float skewX)setTypeface(Typeface typeface)setSubpixelText(boolean subpixelText)</code></pre><h2 id="第7章绘图进阶"><a href="#第7章绘图进阶" class="headerlink" title="第7章绘图进阶"></a>第7章绘图进阶</h2><h3 id="7-1、贝济埃曲线"><a href="#7-1、贝济埃曲线" class="headerlink" title="7.1、贝济埃曲线"></a>7.1、贝济埃曲线</h3><h4 id="7-1-1、概述"><a href="#7-1-1、概述" class="headerlink" title="7.1.1、概述"></a>7.1.1、概述</h4><p>一阶贝济埃曲线，可以理解为在由起始点和终点形成的这条直线上匀速移动的点。</p><p>二阶贝济埃曲线的移动轨迹是建立在两条一阶贝济埃曲线的中间点的基础上的。</p><p>所谓几阶贝济埃曲线，全部是由一条条一阶贝济埃曲线搭起来的。</p><h3 id="7-1-2、贝济埃曲线之quadTo"><a href="#7-1-2、贝济埃曲线之quadTo" class="headerlink" title="7.1.2、贝济埃曲线之quadTo"></a>7.1.2、贝济埃曲线之quadTo</h3><pre><code>//二阶贝济埃曲线public void quadTo(float xl , float yl, fl oat x2 , float y2)public void rQuadTo(float dxl, float dyl , float dx2, float dy2)//三阶贝济埃曲线public void cubicTo (float xl , float yl , float x2 , float y2 , float x3 , float y3)public void rCubicTo(float xl , float yl, float x2 , float y2 , float x3 , float y3 )</code></pre><p>起始点是通过<code>Path.moveTo(x,y）</code>函数来指定的，而如果我们连续调用<code>quadTo（）</code>函数， 那么前一个<code>quadTo（）</code>函数的终点就是下一个<code>quadTo（）</code>函数的起始。</p><p>传统捕捉手势轨迹示例</p><h4 id="7-1-3、贝济埃曲线之rQuadTo"><a href="#7-1-3、贝济埃曲线之rQuadTo" class="headerlink" title="7.1.3、贝济埃曲线之rQuadTo"></a>7.1.3、贝济埃曲线之rQuadTo</h4><p>quadTo()函数定义一个绝对坐标：</p><pre><code>path.moveTo(300,400)path.quadTo(500,300,500,500)</code></pre><p>与利用rQuadTo()函数定义相对坐标是等价的：</p><pre><code>path.moveTo(300,400)path.rQuadTo(200,-100,200,100)</code></pre><h4 id="7-1-4、波浪效果示例"><a href="#7-1-4、波浪效果示例" class="headerlink" title="7.1.4、波浪效果示例"></a>7.1.4、波浪效果示例</h4><h3 id="7-2、setShadowLayer与阴影效果"><a href="#7-2、setShadowLayer与阴影效果" class="headerlink" title="7.2、setShadowLayer与阴影效果"></a>7.2、setShadowLayer与阴影效果</h3><h4 id="7-2-1、setShadowlayer-构造函数"><a href="#7-2-1、setShadowlayer-构造函数" class="headerlink" title="7.2.1、setShadowlayer()构造函数"></a>7.2.1、setShadowlayer()构造函数</h4><pre><code>public void setShadowLayer(float radius, float dx , float dy , int color)</code></pre><p><code>float radius</code>：模糊半径，<code>radius</code>越大越模糊、越小越清晰。如果<code>radius</code>设置为0则阴影消失不见。<code>float dx</code>：阴影的横向偏移距离，正值向右偏移，负值向左偏移。<code>float dy</code>：阴影的纵向偏移距离，正值向下偏移，负值向上偏移。<code>int color</code>：绘制阴影的画笔颜色，阴影的颜色（对图片阴影无效）。</p><p><code>setShadowLayer()</code>函数使用的是高斯模糊算法。高斯模糊的具体算法是：对于正在处理的每一个像素，取周围若干个像素的RGB值并且平均，这个平均值就是模糊处理过的像素。如果对图片中的所有像素都这么处理，那么处理完成的图片就会变得模糊。其中，所取周围像素的半径就是模糊半径。所以，模糊半径越大，所得平均像素与原始像素相差就越大，也就越模糊。</p><h4 id="7-2-2、清除阴影"><a href="#7-2-2、清除阴影" class="headerlink" title="7.2.2、清除阴影"></a>7.2.2、清除阴影</h4><p>setShadowLayer函数的radius参数值设为0， 或者用专门的清除阴影的函数：</p><pre><code>public void clearShadowLayer()</code></pre><h4 id="7-2-3、给文字添加阴影示例"><a href="#7-2-3、给文字添加阴影示例" class="headerlink" title="7.2.3、给文字添加阴影示例"></a>7.2.3、给文字添加阴影示例</h4><h3 id="7-3、BlurMaskFilter发光效果与图片阴影"><a href="#7-3、BlurMaskFilter发光效果与图片阴影" class="headerlink" title="7.3、BlurMaskFilter发光效果与图片阴影"></a>7.3、BlurMaskFilter发光效果与图片阴影</h3><pre><code>public MaskFilter setMaskFilter(MaskFilter maskfilter)public BlurMaskFilter&#123;float radius ,Blur style)</code></pre><h4 id="7-3-2、给图片添加纯色阴影"><a href="#7-3-2、给图片添加纯色阴影" class="headerlink" title="7.3.2、给图片添加纯色阴影"></a>7.3.2、给图片添加纯色阴影</h4><pre><code>public Bitmap extractAlpha();</code></pre><p>extractAlpha会新建一幅仅具有Alpha值的空白图像，而且这幅图像的颜色是在使用<code>canvas.drawBitmap</code>函数绘制时由传入的画笔颜色指定的。</p><h3 id="7-4、Shader与BitmapShader"><a href="#7-4、Shader与BitmapShader" class="headerlink" title="7.4、Shader与BitmapShader"></a>7.4、Shader与BitmapShader</h3><h4 id="7-4-1、Shader概述"><a href="#7-4-1、Shader概述" class="headerlink" title="7.4.1、Shader概述"></a>7.4.1、Shader概述</h4><p>通过给Shader指定对应的图像、渐变色等来填充图形的。</p><pre><code>public Shader setShader (Shader shader)</code></pre><h4 id="7-4-2、BitmapShader的基本用法"><a href="#7-4-2、BitmapShader的基本用法" class="headerlink" title="7.4.2、BitmapShader的基本用法"></a>7.4.2、BitmapShader的基本用法</h4><pre><code>public BitmapShader(Bitmap bitmap, TileMode tileX , TileMode tileY)</code></pre><p>bitmap用来指定图案，tileX用来指定当X轴超出单张图片大小时所使用的重复策略，tileY用来指定当Y轴超出单张图片大小时所使用的重复策略。</p><p>TileMode的取值：</p><pre><code>TileMode.CLAMP：用边缘色彩来填充多余空间。TileMode.REPEAT：重复原图像来填充多余空间。TileMode.MIRROR：重复使用镜像模式的 图像来填充多余空间。</code></pre><p>先填充Y轴，然后填充X轴。</p><h4 id="7-4-3、望远镜效果示例"><a href="#7-4-3、望远镜效果示例" class="headerlink" title="7.4.3、望远镜效果示例"></a>7.4.3、望远镜效果示例</h4><h4 id="7-4-4、生成不规则头像示例"><a href="#7-4-4、生成不规则头像示例" class="headerlink" title="7.4.4、生成不规则头像示例"></a>7.4.4、生成不规则头像示例</h4><h3 id="7-5、Shader之LinearGradient"><a href="#7-5、Shader之LinearGradient" class="headerlink" title="7.5、Shader之LinearGradient"></a>7.5、Shader之LinearGradient</h3><h4 id="7-5-1、概述"><a href="#7-5-1、概述" class="headerlink" title="7.5.1、概述"></a>7.5.1、概述</h4><pre><code>public LinearGradient(float xO , float yO , float xl , float yl , int colorO , int colorl , TileMode tile)public LinearGradient (float xO , fl 。atyO, floatxl ,floatyl,intcolors[], float positions[] , TileMode tile)</code></pre><h4 id="7-5-2、闪光文字效果示例"><a href="#7-5-2、闪光文字效果示例" class="headerlink" title="7.5.2、闪光文字效果示例"></a>7.5.2、闪光文字效果示例</h4><h3 id="7-6、Shader之RadialGradient"><a href="#7-6、Shader之RadialGradient" class="headerlink" title="7.6、Shader之RadialGradient"></a>7.6、Shader之RadialGradient</h3><h4 id="7-6-1、双色渐变"><a href="#7-6-1、双色渐变" class="headerlink" title="7.6.1、双色渐变"></a>7.6.1、双色渐变</h4><pre><code>RadialGradient(float centerX , float centerY , float radius , int centerColor ,int edgeColor, Shader.TileMode tileMode)</code></pre><h4 id="7-6-2、多色渐变"><a href="#7-6-2、多色渐变" class="headerlink" title="7.6.2、多色渐变"></a>7.6.2、多色渐变</h4><pre><code>RadialGradient(float centerX , float centerY , float radius, int[] colors , float[] stops, Shader.TileMode tileMode)</code></pre><h2 id="第8章混合模式"><a href="#第8章混合模式" class="headerlink" title="第8章混合模式"></a>第8章混合模式</h2><h3 id="8-1、混合模式之AvoidXfermode"><a href="#8-1、混合模式之AvoidXfermode" class="headerlink" title="8.1、混合模式之AvoidXfermode"></a>8.1、混合模式之AvoidXfermode</h3><h4 id="8-1-1、混合模式概述"><a href="#8-1-1、混合模式概述" class="headerlink" title="8.1.1、混合模式概述"></a>8.1.1、混合模式概述</h4><p>Xfermode的子类有AvoidXfermode、PixelXorXfermode和PorterDuffXfermode。</p><p>在使用Xfermode时，为了保险起见，需要做两件事：</p><p>禁用硬件加速：</p><pre><code>setLayerType(View.LAYER_TYPE_SOFTWARE, null);</code></pre><p>使用离屏绘制:</p><pre><code>需要把绘制的核心代码放在canvas.save和canvas.restore函数之间//新建图层int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(),null ,Canvas.ALL_SAVE_FLAG);//核心绘制代码//....//还原图层canvas.restoreToCount(layerid);</code></pre><h4 id="8-1-2、AvoidXfermode"><a href="#8-1-2、AvoidXfermode" class="headerlink" title="8.1.2、AvoidXfermode"></a>8.1.2、AvoidXfermode</h4><pre><code>public AvoidXfermode (int opColor, int tolerance ,Mode mode)</code></pre><h4 id="8-1-3、AvoidXfermode绘制原理"><a href="#8-1-3、AvoidXfermode绘制原理" class="headerlink" title="8.1.3、AvoidXfermode绘制原理"></a>8.1.3、AvoidXfermode绘制原理</h4><h4 id="8-1-4、AvoidXfermode之Mode-AVOID"><a href="#8-1-4、AvoidXfermode之Mode-AVOID" class="headerlink" title="8.1.4、AvoidXfermode之Mode.AVOID"></a>8.1.4、AvoidXfermode之Mode.AVOID</h4><h3 id="8-2、混合模式之PorterDuffXfermode"><a href="#8-2、混合模式之PorterDuffXfermode" class="headerlink" title="8.2、混合模式之PorterDuffXfermode"></a>8.2、混合模式之PorterDuffXfermode</h3><h4 id="8-2-1、PorterDuffXfermode概述"><a href="#8-2-1、PorterDuffXfermode概述" class="headerlink" title="8.2.1、PorterDuffXfermode概述"></a>8.2.1、PorterDuffXfermode概述</h4><pre><code>public PorterDuffXfermode(PorterDuff .Mode mode)</code></pre><p>在Xfermode设置前画出的图像叫作目标图像，即给谁应用Xfermode；在Xfermode设置后画出 的图像叫作源图像，即拿什么应用Xfermode。</p><h4 id="8-2-2、颜色叠加相关模式"><a href="#8-2-2、颜色叠加相关模式" class="headerlink" title="8.2.2、颜色叠加相关模式"></a>8.2.2、颜色叠加相关模式</h4><h3 id="8-3、PorterDuffXfermode之源图像模式"><a href="#8-3、PorterDuffXfermode之源图像模式" class="headerlink" title="8.3、PorterDuffXfermode之源图像模式"></a>8.3、PorterDuffXfermode之源图像模式</h3><p>刮刮卡效果示例</p><h3 id="8-4、目标图像模式与真他模式"><a href="#8-4、目标图像模式与真他模式" class="headerlink" title="8.4、目标图像模式与真他模式"></a>8.4、目标图像模式与真他模式</h3><p>区域波纹示例</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ConstraintLayout布局详解</title>
    <link href="/2019/12/23/31.ConstraintLayout%E5%B8%83%E5%B1%80/"/>
    <url>/2019/12/23/31.ConstraintLayout%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="ConstraintLayout"><a href="#ConstraintLayout" class="headerlink" title="ConstraintLayout"></a>ConstraintLayout</h1><p>代码：<a href="https://github.com/AdamRight/Android2021Code/blob/master/app/src/main/java/com/android/code/constraintlayout/ConstraintLayoutActivity.kt">https://github.com/AdamRight/Android2021Code/blob/master/app/src/main/java/com/android/code/constraintlayout/ConstraintLayoutActivity.kt</a></p><h3 id="相对位置"><a href="#相对位置" class="headerlink" title="相对位置"></a>相对位置</h3><hr><p>下面是<code>ConstraintLayout</code>确定位置的属性：</p><pre><code>layout_constraintLeft_toLeftOflayout_constraintLeft_toRightOflayout_constraintRight_toLeftOflayout_constraintRight_toRightOflayout_constraintTop_toTopOflayout_constraintTop_toBottomOflayout_constraintBottom_toTopOflayout_constraintBottom_toBottomOf＃ 与left\right相似layout_constraintStart_toEndOflayout_constraintStart_toStartOflayout_constraintEnd_toStartOflayout_constraintEnd_toEndOf</code></pre><hr><h3 id="尺寸约束0dp"><a href="#尺寸约束0dp" class="headerlink" title="尺寸约束0dp"></a>尺寸约束0dp</h3><hr><p><code>ConstraintLayout</code> 中不支持 <code>MATCH_PARENT</code> 这个值，如果需要实现跟<code>MATCH_PARENT</code>同样的效果，可以使用<code>0dp</code>来代替，其表示<code>MATCH_CONSTRAINT</code>,即适应约束。其跟<code>MATCH_PARENT</code>还是有区别的。</p><pre><code>android:layout_width=&quot;0dp&quot;</code></pre><hr><h3 id="权重weight"><a href="#权重weight" class="headerlink" title="权重weight"></a>权重weight</h3><hr><p>通过设置以下两个属性：</p><pre><code>app:layout_constraintHorizontal_weight //水平权重app:layout_constraintVertical_weight //竖直权重</code></pre><p>比如</p><pre><code>&lt;View    android:background=&quot;@color/black&quot;    android:id=&quot;@+id/view1&quot;    android:layout_width=&quot;0dp&quot;    android:layout_height=&quot;50dp&quot;    app:layout_constraintEnd_toStartOf=&quot;@+id/view2&quot;    app:layout_constraintHorizontal_weight=&quot;1&quot;    app:layout_constraintStart_toStartOf=&quot;parent&quot;    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&lt;View    android:background=&quot;@color/purple_200&quot;    android:id=&quot;@+id/view2&quot;    android:layout_width=&quot;0dp&quot;    android:layout_height=&quot;50dp&quot;    app:layout_constraintEnd_toEndOf=&quot;parent&quot;    app:layout_constraintHorizontal_weight=&quot;2&quot;    app:layout_constraintStart_toEndOf=&quot;@+id/view1&quot;    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</code></pre><hr><h3 id="文字基准线对齐Baseline"><a href="#文字基准线对齐Baseline" class="headerlink" title="文字基准线对齐Baseline"></a>文字基准线对齐Baseline</h3><hr><pre><code># 底部对齐layout_constraintBaseline_toBaselineOf</code></pre><p>主要用于和文字底部对齐样式，<code>app:layout_constraintBaseline_toBaselineOf</code>主要和 <code>app:layout_constraintBottom_toBottomOf</code>做区分。</p><pre><code>&lt;TextView    android:id=&quot;@+id/textView1&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:layout_marginTop=&quot;80dp&quot;    android:background=&quot;@color/design_default_color_primary_variant&quot;    android:text=&quot;99&quot;    android:textSize=&quot;128sp&quot;    app:layout_constraintStart_toStartOf=&quot;parent&quot;    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&lt;TextView    android:id=&quot;@+id/textView2&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;%&quot;    android:textSize=&quot;26sp&quot;    app:layout_constraintBaseline_toBaselineOf=&quot;@+id/textView1&quot;    app:layout_constraintStart_toEndOf=&quot;@+id/textView1&quot; /&gt;&lt;TextView    android:id=&quot;@+id/textView4&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;%&quot;    android:textSize=&quot;26sp&quot;    app:layout_constraintBottom_toBottomOf=&quot;@+id/textView1&quot;    app:layout_constraintStart_toEndOf=&quot;@+id/textView1&quot; /&gt;</code></pre><hr><h3 id="圆形定位-角度布局Circl"><a href="#圆形定位-角度布局Circl" class="headerlink" title="圆形定位-角度布局Circl"></a>圆形定位-角度布局Circl</h3><hr><p>三个属性确定位置：以谁为圆心，半径，角度：</p><pre><code>app:layout_constraintCircleAngleapp:layout_constraintCircleRadiusapp:layout_constraintCircle</code></pre><hr><h3 id="约束限制constrained"><a href="#约束限制constrained" class="headerlink" title="约束限制constrained"></a>约束限制constrained</h3><hr><pre><code>app:layout_constrainedWidth=&quot;true&quot;app:layout_constrainedHeight=&quot;true&quot;</code></pre><p>一般控制TextView的宽度不超过限定的距离。</p><pre><code>&lt;TextView    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:layout_marginTop=&quot;12dp&quot;    android:background=&quot;@color/design_default_color_error&quot;    android:text=&quot;长文本长文本长文本长文本长文本文本长文本长文本&quot;    android:textColor=&quot;@android:color/white&quot;    app:layout_constrainedWidth=&quot;true&quot;    app:layout_constraintEnd_toEndOf=&quot;@+id/sun&quot;    app:layout_constraintStart_toStartOf=&quot;@+id/sun&quot;    app:layout_constraintTop_toBottomOf=&quot;@+id/sun&quot; /&gt;</code></pre><hr><h3 id="位置偏向bias"><a href="#位置偏向bias" class="headerlink" title="位置偏向bias"></a>位置偏向bias</h3><hr><p>如果想让view的位置偏向某一侧,其值同样也是0到1之间：</p><pre><code>layout_constraintHorizontal_bias  //水平偏向layout_constraintVertical_bias  //竖直偏向</code></pre><p><code>bias</code>可以和<code>constrained</code>一起使用：</p><pre><code>&lt;TextView    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:layout_marginTop=&quot;12dp&quot;    android:background=&quot;@color/design_default_color_error&quot;    android:text=&quot;长文本长文本长文本长文本长文本文本长文本长文本&quot;    android:textColor=&quot;@android:color/white&quot;    app:layout_constrainedWidth=&quot;true&quot;    app:layout_constraintEnd_toEndOf=&quot;@+id/sun&quot;    app:layout_constraintHorizontal_bias=&quot;0.508&quot;    app:layout_constraintStart_toStartOf=&quot;@+id/sun&quot;    app:layout_constraintTop_toBottomOf=&quot;@+id/sun&quot; /&gt;</code></pre><hr><h3 id="goneMargin"><a href="#goneMargin" class="headerlink" title="goneMargin"></a>goneMargin</h3><hr><p>当某个控件A存在时，下面的控件B距离A需要一个<code>margin_top=20dp</code>。 当A消失时(gone掉了)，此时<code>margin_top=0dp</code>。<code>layout_goneMarginTop</code>就有用了。</p><pre><code>&lt;TextView    android:id=&quot;@+id/textview&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:background=&quot;@color/colorPrimary&quot;    android:text=&quot;长文本长文本&quot;    android:textColor=&quot;@android:color/white&quot;    android:textSize=&quot;28sp&quot;    android:visibility=&quot;gone&quot;    app:layout_constraintStart_toStartOf=&quot;parent&quot;    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&lt;ImageView    app:layout_goneMarginStart=&quot;46dp&quot;    android:id=&quot;@+id/avatar&quot;    android:layout_width=&quot;40dp&quot;    android:layout_height=&quot;40dp&quot;    android:src=&quot;@mipmap/ic_launcher_round&quot;    app:layout_constraintStart_toEndOf=&quot;@id/textview&quot;    app:layout_constraintTop_toTopOf=&quot;@id/textview&quot; /&gt;</code></pre><hr><h3 id="约束链chain"><a href="#约束链chain" class="headerlink" title="约束链chain"></a>约束链chain</h3><hr><p>设置链样式的属性是：</p><pre><code>app:layout_constraintVertical_chainStyle=&quot;spread|spread_inside|packed&quot;app:layout_constraintHorizontal_chainStyle=&quot;spread|spread_inside|packed&quot;</code></pre><p>默认是<code>spread</code>（扩散），<code>packed</code>意思是打包在一起，<code>spread_inside</code>（内部扩散）。使用时候，给第一个控件view添加chainStyle即可。</p><hr><h3 id="宽高比DimensionRatio"><a href="#宽高比DimensionRatio" class="headerlink" title="宽高比DimensionRatio"></a>宽高比DimensionRatio</h3><hr><p>默认的都是<code>宽：搞</code>，然后根据另外一条边和比例算出。需要将宽或者高中的的<strong>至少一个</strong>设置为<code>0dp</code>（即<code>MATCH_CONSTRAINT</code>），即要适应约束条件。然后通过<code>layout_constraintDimensionRatio</code>属性设置一个比率即可。这个比率可以是一个浮点数，表示宽度和高度之间的比率；也可以是“宽度：高度”形式的比率。</p><pre><code>&lt;Button    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;0dp&quot;    android:text=&quot;-------------------宽高比2：1-------------------&quot;    app:layout_constraintDimensionRatio=&quot;2:1&quot;    app:layout_constraintLeft_toLeftOf=&quot;parent&quot;    app:layout_constraintRight_toRightOf=&quot;parent&quot;/&gt;</code></pre><p>如果宽和高都设置为<code>0dp（MATCH_CONSTRAINT）</code>，那么<code>layout_constraintDimensionRatio</code>的值需要先加一个<code>W,或H,</code>来表示约束宽度或高度。如下：</p><pre><code>&lt;Button    android:layout_width=&quot;0dp&quot;    android:layout_height=&quot;0dp&quot;    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;    app:layout_constraintDimensionRatio=&quot;H,16:9&quot;    app:layout_constraintLeft_toLeftOf=&quot;parent&quot;    app:layout_constraintRight_toRightOf=&quot;parent&quot;    app:layout_constraintTop_toTopOf=&quot;parent&quot;/&gt;</code></pre><p>这里例子是说，首先宽度将满足自适应的约束，然后将按照16：9的比例设置高度。</p><hr><h3 id="百分比宽高percent"><a href="#百分比宽高percent" class="headerlink" title="百分比宽高percent"></a>百分比宽高percent</h3><hr><p>要使用百分比，宽或高同样要设置为<code>0dp（MATCH_CONSTRAINT）</code>。</p><p>然后设置以下属性即可：</p><pre><code>app:layout_constraintWidth_default=&quot;percent&quot; //设置宽为百分比app:layout_constraintWidth_percent=&quot;0.3&quot; //0到1之间的值或app:layout_constraintHeight_default=&quot;percent&quot; //设置高为百分比app:layout_constraintHeight_percent=&quot;0.3&quot; //0到1之间的值</code></pre><p>例子</p><pre><code>&lt;Button    android:layout_width=&quot;0dp&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;宽50%&quot;    app:layout_constraintWidth_default=&quot;percent&quot;    app:layout_constraintLeft_toLeftOf=&quot;parent&quot;    app:layout_constraintWidth_percent=&quot;0.5&quot;/&gt;</code></pre><p><code>layout_constraintWidth_default</code> 设置为 <code>percent</code> 即采用百分比的方式布局，然后设置 <code>layout_constraintWidth_percent</code> 的属性值，来改变水平方向的百分比。</p><hr><h3 id="控件统一Group"><a href="#控件统一Group" class="headerlink" title="控件统一Group"></a>控件统一Group</h3><hr><p>通过<code>constraint_referenced_ids</code>使用引用的方式来避免布局嵌套。可以为一组控件统一设置 <code>setVisibility</code>，只有设置可见度的功能，不能设置点击事件。</p><pre><code>&lt;androidx.constraintlayout.widget.Group        android:id=&quot;@+id/group&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:constraint_referenced_ids=&quot;view,view1,view7,view8&quot; /&gt;  </code></pre><hr><h3 id="控件统一Layer"><a href="#控件统一Layer" class="headerlink" title="控件统一Layer"></a>控件统一Layer</h3><hr><p>和Group类似，通过引用的方式来避免布局嵌套，可以为一组控件统一设置旋转/缩放/位移。</p><pre><code>&lt;androidx.constraintlayout.helper.widget.Layer        android:id=&quot;@+id/layer&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        app:constraint_referenced_ids=&quot;view,view1,view7,view8&quot;        tools:ignore=&quot;MissingConstraints&quot; /&gt;</code></pre><hr><h3 id="控件统一Flow"><a href="#控件统一Flow" class="headerlink" title="控件统一Flow"></a>控件统一Flow</h3><hr><p>Flow统一控制控件的排列方向<code>orientation</code>和方式<code>flow_wrapMode</code>。<code>flow_wrapMode</code>的属性有<code>chain</code>、<code>aligned</code>、<code>none</code>(默认)。</p><pre><code>&lt;androidx.constraintlayout.helper.widget.Flow    android:id=&quot;@+id/flow&quot;    android:layout_width=&quot;0dp&quot;    android:layout_height=&quot;wrap_content&quot;    android:layout_marginStart=&quot;16dp&quot;    android:layout_marginTop=&quot;16dp&quot;    android:background=&quot;@color/colorAccent&quot;    android:orientation=&quot;horizontal&quot;    app:flow_wrapMode=&quot;chain&quot;    app:flow_verticalGap=&quot;16dp&quot;    app:flow_horizontalGap=&quot;16dp&quot;    app:constraint_referenced_ids=&quot;view1,view2,view3,view4,view5,view6&quot;    app:layout_constraintStart_toStartOf=&quot;parent&quot;    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</code></pre><hr><h3 id="辅助线Guideline"><a href="#辅助线Guideline" class="headerlink" title="辅助线Guideline"></a>辅助线Guideline</h3><hr><p>Guideline主要的属性有：</p><pre><code>//水平或垂直引导线android:orientation=&quot;horizontal|vertical&quot; //如果是水平引导线，则距离布局顶部30dp，如果是垂直引导线，则距离布局左边30dpapp:layout_constraintGuide_begin=&quot;30dp&quot; //如果是水平引导线，则距离布局底部30dp，如果是垂直引导线，则距离布局右边30dpapp:layout_constraintGuide_end=&quot;30dp&quot;//如果是水平引导线，则距离布局顶部为整个布局高度的50%，如果是垂直引导线，则距离布局左边文这个布局宽度的50%app:layout_constraintGuide_percent=&quot;0.5&quot;</code></pre><hr><h3 id="辅助线Barrier"><a href="#辅助线Barrier" class="headerlink" title="辅助线Barrier"></a>辅助线Barrier</h3><hr><p>通过设置一组控件的某个方向的屏障，来避免布局嵌套。比如view1和view2谁的宽度长，就以谁的宽度为基准，设置垂直的辅助线。</p><pre><code>&lt;androidx.constraintlayout.widget.Barrier    android:id=&quot;@+id/barrier&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    app:barrierDirection=&quot;end&quot;    app:constraint_referenced_ids=&quot;view1,view2&quot; /&gt;</code></pre><hr><h3 id="自定义ConstraintHelper"><a href="#自定义ConstraintHelper" class="headerlink" title="自定义ConstraintHelper"></a>自定义ConstraintHelper</h3><hr><p>通过继承ConstraintHelper类，自定义统一操作的控件组。</p><p>代码：<a href="https://github.com/AdamRight/Android2021Code/blob/master/app/src/main/java/com/android/code/constraintlayout/CircularRevealHelper.kt">https://github.com/AdamRight/Android2021Code/blob/master/app/src/main/java/com/android/code/constraintlayout/CircularRevealHelper.kt</a></p><hr><h3 id="占位符Placeholder"><a href="#占位符Placeholder" class="headerlink" title="占位符Placeholder"></a>占位符Placeholder</h3><hr><p>Placeholder通过<code>setContentId</code>来将指定控件放到占位符的位置。</p><p>代码：<code>activity_circular_reveal.xml</code></p><hr><h3 id="ConstraintSet"><a href="#ConstraintSet" class="headerlink" title="ConstraintSet"></a>ConstraintSet</h3><hr><p>使用ConstraintSet对象来动态修改布局。防止布局中有不存在的 <code>id</code> 控件报错，需要设置 <code>isForceId = false</code>。</p><p>布局扁平化更加容易做过渡动画，在布局修改之前加上 <code>TransitionManager</code> 来自动完成过渡动画。</p><hr><h2 id="2、MotionLayout"><a href="#2、MotionLayout" class="headerlink" title="2、MotionLayout"></a>2、MotionLayout</h2><h3 id="2-1、介绍"><a href="#2-1、介绍" class="headerlink" title="2.1、介绍"></a>2.1、介绍</h3><hr><p>MotionLayout是ConstraintLayout的子类。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ConstraintLayout</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adb命令</title>
    <link href="/2019/11/29/30.adb%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/11/29/30.adb%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>monkey测试</p><pre><code>adb shell monkey -p 包名 -v 次数</code></pre><p>启动adb、关闭adb</p><pre><code>adb start-serveradb kill-server</code></pre><p>获取手机的系统版本</p><pre><code>adb shell getprop ro.build.version.release</code></pre><p>清除apk的数据和缓存    </p><pre><code>adb shell pm clear 包名</code></pre><p>安装和卸载apk</p><pre><code>adb install 文件路径adb uninstall 包名</code></pre><p>电脑和手机文件互传</p><pre><code>adb push C:\Users\win\Desktop\xx.png /sdcardadb pull /sdcard/xx.png C:\Users\win\Desktop</code></pre><p>查看保存app错误日志</p><pre><code>adb logcat *:E | grep &quot;包名&quot; &gt; 电脑路径 //macadb logcat *:E | find &quot;包名&quot; &gt; 电脑路径 //win</code></pre><p>获取当前app包名和当前页面名(⼿机打开对应app)</p><pre><code>adb shell dumpsys window windows | grep mFocusedApp //macadb shell dumpsys window windows | findstr mFocusedApp //win</code></pre><p>log获取app的包名和activity名称</p><pre><code>adb logcat | grep START //macadb logcat | findstr START //win然后点击app </code></pre><p>关闭app后,获取app启动时间</p><pre><code>关闭appadb shell am start -W 包名/启动名adb shell am start -W com.xxx.xxx/.LaunchActivity//TotalTime： app⾃身启动时间,WaitTime： 系统启动应⽤时间</code></pre><p>Appium</p><pre><code>官⽹： www.appium.io,</code></pre><p>Appium是由nodejs的express框架写的Http Server,Appium使⽤WebDriver的json wire协议，来驱动Apple系统的UIAutomation库、Android系统的UIAutomator框架。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle构建详解</title>
    <link href="/2019/07/13/29.Gradle%E6%9E%84%E5%BB%BA%E8%AF%A6%E8%A7%A3/"/>
    <url>/2019/07/13/29.Gradle%E6%9E%84%E5%BB%BA%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="1、介绍和环境搭建"><a href="#1、介绍和环境搭建" class="headerlink" title="1、介绍和环境搭建"></a>1、介绍和环境搭建</h2><p>DSL(domain specific language)：领域特定语言，解决特定问题，包括Groovy，xml等等。</p><p>Groovy是一种基于JVM的敏捷开发语言，可以使用java所用的库。</p><p>Groovy官网</p><pre><code>http://groovy-lang.org/</code></pre><p>下载最新稳定版本(the latest stable version of Groovy)-2.5.8版本。</p><p>检查环境变量配置</p><pre><code>groovy -version</code></pre><p>在Android studio中Tools - Groovy Console直接编写Groovy语言。</p><pre><code>println &quot;hello groovy&quot;</code></pre><h2 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h2><h3 id="2-1、基础语法"><a href="#2-1、基础语法" class="headerlink" title="2.1、基础语法"></a>2.1、基础语法</h3><p>groovy变量的类型都是对象类型，没有基本类型，因为基本类型都会装箱成对象类型。</p><p>变量的定义包括强类型定义和弱类型def定义。</p><pre><code>def x = 10println x.class  //class java.lang.Integer</code></pre><p>字符串除了String还有GString，GString的常用三种定义方式</p><pre><code>def s1 = &apos;a single \&apos;a\&apos; String&apos;println s1  //a single &apos;a&apos; Stringdef s2 = &apos;&apos;&apos;\line oneline twoline three&apos;&apos;&apos;println s2  //line one            //line two            //line threedef s3 = &quot;a common String&quot;def say = &quot;this is $&#123;s3&#125;&quot;   //花括号可扩展任意的表达式println say  //this is a common Stringprintln say.class  //class org.codehaus.groovy.runtime.GStringImpl</code></pre><p>新增常用操作符</p><pre><code>def str = &quot;groovy&quot;//println str.center(9,&apos;a&apos;)   //agroovyaa//println str.padLeft(9,&apos;a&apos;)  //aaagroovy//println str.padRight(9,&apos;a&apos;)  //groovyaaadef str2 = &apos;Hello&apos;println str &gt; str2  //trueprintln str[0]  //gprintln str[0..1]  //grdef str3 = &apos;gro&apos;println str.minus(str3) //ovyprintln str - str3 //ovy//println str.reverse()   //yvoorgprintln str.capitalize()   //Groovyprintln str.isNumber()   //false</code></pre><p>逻辑控制:</p><p>switch</p><pre><code>def x = 1.23def resultswitch (x)&#123;    case &quot;str&quot;:        result = &apos;str&apos;        break    case [4,6,7,&apos;inlist&apos;]:  //list        result = &apos;list&apos;        break    case 12..30:    //范围        result = &apos;range&apos;        break    case Integer:        result = &apos;Integer&apos;        break    case BigDecimal:        result = &apos;BigDecimal&apos;        break    default:result = &apos;default&apos;&#125;println result  //BigDecimal</code></pre><p>for范围</p><pre><code>def sum = 0for (i in 0..9)&#123;    sum += i&#125;println sum //45</code></pre><p>list循环</p><pre><code>def sum = 0for (i in [1,2,3,4,5,6,7,8,9])&#123;    sum += i&#125;println sum //45</code></pre><p>map循环</p><pre><code>def sum = 0for (i in [&apos;wang&apos;:1,&apos;zhang&apos;:2,&apos;li&apos;:3])&#123;    sum += i.value&#125;println sum //6</code></pre><h3 id="2-2、闭包"><a href="#2-2、闭包" class="headerlink" title="2.2、闭包"></a>2.2、闭包</h3><p>类似于方法</p><pre><code>def clouser = &#123; println &quot;Hello groovy&quot;&#125;clouser.call()  //调用方式一，Hello groovyclouser()  //调用方式二，Hello groovy</code></pre><p>有参数的闭包<code>-&gt;</code>前的是参数,也可以有多个参数</p><pre><code>def clouser = &#123;String name -&gt; println &quot;$&#123;name&#125; Hello groovy&quot;&#125;clouser.call(&quot;this is&quot;)  //调用方式一，this is Hello groovyclouser(&quot;this is&quot;)  //调用方式二，this is Hello groovy</code></pre><p>隐式的it参数,不需要定义参数</p><pre><code>def clouser = &#123;println &quot;Hello $&#123;it&#125;&quot;&#125;clouser(&quot;groovy&quot;)  //Hello groovy</code></pre><p>返回值</p><pre><code>def clouser = &#123;String name -&gt; return  &quot;Hello $&#123;name&#125;&quot;&#125;println clouser(&quot;groovy&quot;)  //Hello groovy</code></pre><p>基本类型和闭包结合使用</p><pre><code>int x = cal(5)println x   //num的阶乘int fab(int number) &#123;    int result = 1    1.upto(number, &#123; num -&gt; result *= num &#125;)    return result&#125;int fab2(int number) &#123;    int result = 1    number.downto(1) &#123;        num -&gt; result *= num    &#125;    return result&#125;//累加int cal(int number) &#123;    int result = 0    number.times &#123;        num -&gt; result += num    &#125;    return result&#125;</code></pre><p>字符串和闭包结合使用</p><pre><code>String str = &apos;2 and 3 is 5&apos;//each遍历str.each &#123;//    String temp -&gt; println temp.multiply(2)    String temp -&gt; println temp&#125;//find查找符合条件的第一个,findAll查找所有符合条件的放到集合println str.find&#123;    String s -&gt; s.isNumber()&#125;def list = str.findAll&#123;    String s -&gt; s.isNumber()&#125;println list.toListString() //[2, 3, 5]def result = str.any &#123;    String s -&gt; s.isNumber()    //有一项是数字就返回true&#125;println result //trueprintln str.every &#123; //false    String s -&gt; s.isNumber()    //每一项都是数字就返回true&#125;def list2 = str.collect&#123;    it.toUpperCase()&#125;println list2.toListString()    //[2,  , A, N, D,  , 3,  , I, S,  , 5]</code></pre><p>闭包进阶</p><p>变量：this、owner、delegate</p><pre><code>def scriptClouser = &#123;    println &quot;this:&quot; + this  //代表闭包定义处的类    println &quot;owner:&quot; + owner    //代表闭包定义处的类或者对象    println &quot;delegate:&quot; + delegate  //代表任意对象，默认与owner一致&#125;scriptClouser.call()class Person&#123;//内部类    def classClouser = &#123;        println &quot;classClouser this:&quot; + this  //代表闭包定义处的类        println &quot;classClouser owner:&quot; + owner    //代表闭包定义处的类或者对象        println &quot;classClouser delegate:&quot; + delegate  //代表任意对象，默认与owner一致    &#125;    def say()&#123;        def classClouser = &#123;            println &quot;method classClouser this:&quot; + this  //代表闭包定义处的类            println &quot;method classClouser owner:&quot; + owner    //代表闭包定义处的类或者对象            println &quot;method classClouser delegate:&quot; + delegate  //代表任意对象，默认与owner一致        &#125;        classClouser.call()    &#125;&#125;Person person = new Person()person.classClouser.call()person.say()def nextClouser = &#123;    def innerClouser = &#123;        println &quot;innerClouser this:&quot; + this  //代表闭包定义处的类        println &quot;innerClouser owner:&quot; + owner    //代表闭包定义处的类或者对象        println &quot;innerClouser delegate:&quot; + delegate  //代表任意对象，默认与owner一致    &#125;    innerClouser.delegate = person  //修改delegate    innerClouser.call()&#125;nextClouser.call()</code></pre><p>闭包委托策略</p><pre><code>class Student &#123;    String name    def pretty = &#123;        &quot;My name is $&#123;name&#125;&quot;    &#125;    String toSting()&#123;        pretty.call()    &#125;&#125;class Teacher &#123;    String name&#125;def stu = new Student(name: &apos;Sarash&apos;)def tea = new Teacher(name: &apos;Qndroid&apos;)stu.pretty.delegate = teastu.pretty.resolveStrategy = Closure.DELEGATE_FIRST//delegate优先println stu.toSting()   //My name is Qndroid</code></pre><h3 id="2-3、列表list"><a href="#2-3、列表list" class="headerlink" title="2.3、列表list"></a>2.3、列表list</h3><p>数组和列表定义方式</p><pre><code>def array = [1, 2, 3, 4, 5, 6] as int[]int[] array2 = [1, 2, 3, 4, 5, 6]def list = [1, 2, 3, 4, 5, 6]</code></pre><p>主要介绍特有的</p><pre><code>//排序def sortList = [1, -4, 5, -6, 2, 3]//Collections.sort(sortList)//println sortList    //[-6, -4, 1, 2, 3, 5]sortList.sort()println sortList    //[-6, -4, 1, 2, 3, 5]//自定义排序//Comparator mc = &#123; a, b -&gt;//    a == b ? 0 : Math.abs(a) &lt; Math.abs(b) ? -1 : 1//&#125;//Collections.sort(sortList, mc)//println sortList    //[1, 2, 3, -4, 5, -6]sortList.sort &#123; a, b -&gt;    a == b ? 0 : Math.abs(a) &lt; Math.abs(b) ? -1 : 1&#125;println sortList    //[1, 2, 3, -4, 5, -6]//字符串排序def sortStringList = [&apos;123&apos;, &apos;a&apos;, &apos;groovy&apos;]sortStringList.sort &#123; it -&gt; return it.size() &#125;println sortStringList  //[a, 123, groovy]//查找def findList = [-3, 8, -8, 12, 4, 7]int result = findList.find &#123; return it % 2 == 0 &#125;println result  //8def result2 = findList.findAll &#123; return it % 2 == 0 &#125;println result2.toListString()  //[8, -8, 12, 4]def result3 = findList.any &#123; return it % 2 != 0 &#125;println result3 //truedef result4 = findList.every &#123; return it % 2 != 0 &#125;println result4 //falseprintln findList.min()  //-8println findList.max()  //12def num = findList.count &#123; return it % 2 == 0 &#125; //符合条件的个数println num //4</code></pre><h3 id="2-4、映射map"><a href="#2-4、映射map" class="headerlink" title="2.4、映射map"></a>2.4、映射map</h3><p>定义和基本操作</p><pre><code>def colors = [red: &apos;ff0000&apos;, green: &apos;00ff00&apos;, blue: &apos;0000ff&apos;]println colors.getClass()   //class java.util.LinkedHashMap//索引println colors[&apos;red&apos;]   //ff0000println colors.red  //ff0000//添加colors.yellow = &apos;ffff00&apos;println colors.toMapString()    //[red:ff0000, green:00ff00, blue:0000ff, yellow:ffff00]</code></pre><p>其他操作</p><pre><code>def students = [        1: [number: &apos;0001&apos;, name: &apos;zhang&apos;, score: 55, sex: &apos;male&apos;],        2: [number: &apos;0002&apos;, name: &apos;li&apos;, score: 62, sex: &apos;female&apos;],        3: [number: &apos;0003&apos;, name: &apos;wang&apos;, score: 63, sex: &apos;female&apos;],        4: [number: &apos;0004&apos;, name: &apos;zhao&apos;, score: 66, sex: &apos;male&apos;]]//遍历students.each &#123;    def student -&gt; println student.key + &quot;:&quot; + student.value&#125;//带索引students.eachWithIndex &#123;    def student, int index -&gt; println index + &apos;::&apos; + student.key + &quot;:&quot; + student.value&#125;//直接遍历students.each &#123;    key, value -&gt; println key + &quot;:&quot; + value&#125;students.eachWithIndex &#123;    key, value, index -&gt; println index + &apos;:::&apos; + key + &quot;:&quot; + value&#125;//查找def entry = students.find &#123; def student -&gt;    return student.value.score &gt;= 60&#125;println entry   //2=&#123;number=0002, name=li, score=62, sex=female&#125;def entry2 = students.findAll &#123; def student -&gt;    return student.value.score &gt;= 60&#125;println entry2//计数def count = students.count &#123;    def student -&gt; return student.value.score &gt;= 60 &amp;&amp; student.value.sex == &apos;male&apos;&#125;println count   //1//查找并筛选def names = students.findAll &#123;    def student -&gt; return student.value.score &gt;= 60&#125;.collect &#123;    return it.value.name&#125;println names   //[li, wang, zhao]//分组def group = students.groupBy &#123;    def student -&gt; return student.value.score &gt;= 60 ? &apos;及格&apos; : &apos;不及格&apos;&#125;println group.toMapString()//排序def sort = students.sort&#123;    def stu1 ,def stu2-&gt;        Number num1 = stu1.value.score        Number num2 = stu2.value.score        return num1 == num2 ? 0 : num1 &lt; num2 ? -1 : 1&#125;println sort.toMapString()</code></pre><h3 id="2-5、范围range"><a href="#2-5、范围range" class="headerlink" title="2.5、范围range"></a>2.5、范围range</h3><p>定义和使用</p><pre><code>def range = 1..10println range[0]    //1println range.contains(10)    //trueprintln range.from    //1println range.to    //10//遍历range.each &#123;    println it&#125;//switch中使用def result = getGrade(75)println resultdef getGrade(Number number)&#123;    def result    switch (number)&#123;        case 0..&lt;60:            result = &apos;不及格&apos;            break        case 60..&lt;70:            result = &apos;及格&apos;            break        case 70..&lt;80:            result = &apos;良好&apos;            break        case 80..100:            result = &apos;优秀&apos;            break    &#125;    return result&#125;</code></pre><h3 id="2-6、面向对象"><a href="#2-6、面向对象" class="headerlink" title="2.6、面向对象"></a>2.6、面向对象</h3><p>类、方法、接口</p><pre><code>//groovy中默认都是public类型class Person implements Action&#123;    String name    Integer age    def increasseAge(Integer years) &#123;        this.age += years    &#125;    @Override    void eat() &#123;&#125;    @Override    void drink() &#123;&#125;    @Override    void play() &#123;&#125;&#125;def person = new Person(name: &quot;zhang&quot;, age: 26)println &quot;name:$&#123;person.name&#125;,age:$&#123;person.age&#125;&quot;//name:zhang,age:26person.increasseAge(10)println &quot;name:$&#123;person.name&#125;,age:$&#123;person.age&#125;&quot;//name:zhang,age:36interface Action&#123;    void eat()    void drink()    void play()&#125;trait DefaultAction&#123;    abstract void eat()    void play()&#123;        println &apos;i can play&apos;    &#125;&#125;</code></pre><p>元编程</p><pre><code>class Person &#123;    String name    Integer age    def increasseAge(Integer years) &#123;        this.age += years    &#125;    //一个方法找不到时候，用它代替    def invokeMethod(String name, Object args) &#123;        return &quot;invokeMethod: $&#123;name&#125;,$&#123;args&#125;&quot;    &#125;    //优先级高于invokeMethod    def methodMissing(String name, Object args) &#123;        return &quot;methodMissing: $&#123;name&#125;,$&#123;args&#125;&quot;    &#125;&#125;def person = new Person(name: &apos;zhang&apos;, age: 26)println person.cry()//为类动态添加属性Person.metaClass.sex = &apos;male&apos;def person1 = new Person(name: &apos;zhang&apos;, age: 26)println person1.sex     //male//为类动态添加方法Person.metaClass.sexUpperCase = &#123; -&gt; sex.toUpperCase() &#125;def personn2 = new Person(name: &apos;zhang&apos;, age: 26)println personn2.sexUpperCase()     //MALE//添加静态方法Person.metaClass.static.createPerson = &#123;    String name, int age -&gt; new Person(name: name, age: age)&#125;def personn3 = Person.createPerson(&apos;li&apos;, 18)println personn3.name + personn3.age  //li18</code></pre><p>一次注入，应用程序其他方法都可以使用</p><pre><code>ExpandoMetaClass.enableGlobally()</code></pre><h2 id="3、高级用法"><a href="#3、高级用法" class="headerlink" title="3、高级用法"></a>3、高级用法</h2><h3 id="3-1、json文件处理"><a href="#3-1、json文件处理" class="headerlink" title="3.1、json文件处理"></a>3.1、json文件处理</h3><p>转换成json</p><pre><code>import groovy.json.JsonOutputimport groovy.json.JsonSlurperclass Person &#123;    String name    Integer age&#125;//转换成Jsondef list = [new Person(name: &apos;zhang&apos;, age: 26),            new Person(name: &apos;li&apos;, age: 22)]def json = JsonOutput.toJson(list)println JsonOutput.prettyPrint(json)//转成实体对象def jsonSlpuer = new JsonSlurper()jsonSlpuer.parseText()</code></pre><p>get请求</p><pre><code>import groovy.json.JsonSlurperdef response = getNetworkData(&quot;http://httpbin.org/get?id=123&quot;)println response.args.iddef getNetworkData(String url)&#123;    def connection = new URL(url).openConnection()    connection.setRequestMethod(&apos;GET&apos;)    connection.connect()    def response = connection.content.text    def jsonSlurper = new JsonSlurper()    return jsonSlurper.parseText(response)&#125;</code></pre><h3 id="3-2、xml读取和生成"><a href="#3-2、xml读取和生成" class="headerlink" title="3.2、xml读取和生成"></a>3.2、xml读取和生成</h3><p>解析xml格式数据，创建xml格式数据，都不再详解</p><h3 id="3-3、文件操作"><a href="#3-3、文件操作" class="headerlink" title="3.3、文件操作"></a>3.3、文件操作</h3><p>读取文件</p><pre><code>def file = new File(&quot;目标文件&quot;)//方式一file.eachLine &#123;    line -&gt; println line&#125;//方式二def text = file.getText()println text//方式三def result = file.readLines()println result//方式四,读取部分内容def reader = file.withReader &#123;    reader -&gt; char[] buffer = new char[100]        reader.read(buffer)        return buffer&#125;println reader</code></pre><p>拷贝文件</p><pre><code>def copy(String sourcePath, String destationPath) &#123;    try &#123;        def desFile = new File(destationPath)        if (!desFile.exists()) &#123;            desFile.createNewFile()        &#125;        new File(sourcePath).withReader &#123;            reader -&gt;                def lines = reader.readLines()                desFile.withWriter &#123;                    writer -&gt;                        lines.each &#123;                            line -&gt; writer.append(line + &quot;\r\n&quot;)                        &#125;                &#125;        &#125;        return true    &#125; catch (Exception e) &#123;    &#125;&#125;</code></pre><p>对象的读写</p><pre><code>def saveObject(Object object, String path) &#123;    try &#123;        def desFile = new File(path)        if (!desFile.exists()) &#123;            desFile.createNewFile()        &#125;        desFile.withObjectOutputStream &#123;            out -&gt; out.writeObject(object)        &#125;        return true    &#125; catch (Exception e) &#123;    &#125;    return false&#125;def readObject(String path) &#123;    def obj = null    try &#123;        def file = new File(path)        if (file == null || !file.exists()) return null        file.withObjectInputStream &#123;            input -&gt; obj = input.readObject()        &#125;    &#125; catch (Exception e) &#123;    &#125;    return obj&#125;</code></pre><h2 id="4、Gradle介绍"><a href="#4、Gradle介绍" class="headerlink" title="4、Gradle介绍"></a>4、Gradle介绍</h2><p>Gradle用于构建应用程序，使用Groovy核心语法。</p><p>在Terminal中执行</p><pre><code>gradlew clean    //wingradlew build    //win./gradlew clean    //mac./gradlew build    //mac</code></pre><p>gradle的生命周期</p><pre><code>initialization初始化阶段：根据settings.gradle解析整个工程中所有的Project，构建所有的Project对应的project对象。Configuration配置阶段：解析所有的projects对象中的task，构建好所有的task的拓扑图Excution执行阶段：执行具体的task及其依赖task</code></pre><p>生命周期监听</p><pre><code>//配置阶段开始前的监听回调this.beforeEvaluate &#123;    println &apos;------配置阶段开始------&apos;&#125;//配置阶段完成以后的监听回调this.afterEvaluate &#123;    println &apos;------配置阶段完成------&apos;&#125;//gradle执行完毕后的回调监听this.gradle.buildFinished &#123;    println &apos;------gradle执行完毕------&apos;&#125;//等同beforeEvaluatethis.gradle.beforeProject &#123;&#125;//等同afterEvaluatethis.gradle.afterProject &#123;&#125;</code></pre><h2 id="5、Project"><a href="#5、Project" class="headerlink" title="5、Project"></a>5、Project</h2><p>查看Project的个数</p><pre><code>gradlew projects./gradlew projects    //mac</code></pre><h3 id="5-1、Project相关API"><a href="#5-1、Project相关API" class="headerlink" title="5.1、Project相关API"></a>5.1、Project相关API</h3><p>在最外层的根的build.gradle中</p><pre><code>this.getProjects()def getProjects()&#123;    //只输全部projects    this.getAllprojects().eachWithIndex &#123;        Project project, int index -&gt;        if (index ==0)&#123;            println &quot;this is Root project:$&#123;project.name&#125;&quot;        &#125; else &#123;            println &quot;this is project:$&#123;project.name&#125;&quot;        &#125;    &#125;    //只输出子projects    this.getSubprojects().eachWithIndex &#123;        Project project, int index -&gt;            println &quot;this is project:$&#123;project.name&#125;&quot;    &#125;    //只输出根projects    println &quot;this is Root project:&quot; + this.getRootProject().name&#125;</code></pre><p>在module的build.gradle中</p><pre><code>//只输出父projectsprintln &quot;this is parent project:&quot; + this.getParent().name</code></pre><p>根project中可以配置module的配置</p><pre><code>//根project配置module为app的配置project(&apos;app&apos;) &#123;    Project project -&gt;        println project.name    //app        apply plugin: &apos;com.android.application&apos;        group &apos;com.tea&apos;        version &apos;1.0.0-release&apos;        dependencies &#123;&#125;        android &#123;&#125;&#125;</code></pre><p>配置当前节点工程和subproject的所有project</p><pre><code>//配置当前节点工程和subproject的所有projectallprojects &#123;    group &apos;com.tea&apos;    version &apos;1.0.0-release&apos;&#125;println project(&apos;app&apos;).group</code></pre><p>不包括当前节点工程，只包括他的subproject</p><pre><code>//不包括当前节点工程，只包括他的subprojectsubprojects &#123;    Project project -&gt;        if (project.plugins.hasPlugin(&apos;com.android.library&apos;)) &#123;            apply from: &apos;../publistTOMaven.gradle&apos;        &#125;&#125;</code></pre><h3 id="5-2、属性相关API"><a href="#5-2、属性相关API" class="headerlink" title="5.2、属性相关API"></a>5.2、属性相关API</h3><p>定义扩展属性</p><pre><code>ext&#123;&#125;</code></pre><p>所以提供扩展属性定义方式:</p><p>方式一：</p><p>可以在根build中定义</p><pre><code>ext &#123;    compileSdkVersion = 28    cardview = &apos;com.android.support:cardview-v7:28.0.0&apos;&#125;</code></pre><p>然后在需要用的build中引用</p><pre><code>compileSdkVersion this.rootProject.compileSdkVersionimplementation this.cardview</code></pre><p>方式二：</p><p>和根build同级定义common.gradle</p><pre><code>ext &#123;    android = [compileSdkVersion: 28,               buildToolsVersion: &apos;26.0.0&apos;,               applicationId    : &apos;com.tea&apos;,               minSdkVersion    : 16,               targetSdkVersion : 26,               versionCode      : 1,               versionName      : &apos;1.0.0&apos;,               multiDexEnabled  : true]    signConfigs = [&apos;storeFile&apos;    : &apos;tea.jks&apos;,                   &apos;storePassword&apos;: &apos;tea123456&apos;,                   &apos;keyAlias&apos;     : &apos;android&apos;,                   &apos;keyPassword&apos;  : &apos;tea123456&apos;]    java = [&apos;javaVersion&apos;: JavaVersion.VERSION_1_8]    dependence = [&apos;libCardview&apos; : &apos;com.android.support:cardview-v7:28.0.0&apos;,                  &apos;libAppcompat&apos;: &apos;com.android.support:appcompat-v7:28.0.0&apos;]&#125;</code></pre><p>在根build中引入</p><pre><code>apply from: this.file(&apos;common.gradle&apos;)</code></pre><p>在需要的build中使用</p><pre><code>compileSdkVersion rootProject.ext.android.compileSdkVersionimplementation rootProject.ext.dependence.libCardview</code></pre><p>方式三：</p><p>在gradle.properties中定义<code>key:value</code>形式</p><pre><code>mCompileSdkVersion = 28</code></pre><p>build中使用，默认都是字符串，需要转换</p><pre><code>compileSdkVersion mCompileSdkVersion.toInteger()</code></pre><h3 id="5-3、file相关API"><a href="#5-3、file相关API" class="headerlink" title="5.3、file相关API"></a>5.3、file相关API</h3><p>文件路径获取</p><pre><code>println getRootDir().absolutePathprintln getBuildDir().absolutePathprintln getProjectDir().absolutePath</code></pre><p>文件定位</p><pre><code>apply from: this.file(&apos;common.gradle&apos;)println getContent(&apos;common.gradle&apos;)def getContent(String path)&#123;    try &#123;        //路径是相对于当前project查找        def file = file(path)        return file.text    &#125;catch (GradleException e)&#123;        println &quot;not found&quot;    &#125;    return null&#125;</code></pre><p>文件拷贝,在app的build中拷贝文件或者文件夹</p><pre><code>copy &#123;    from file(&apos;build/outputs/apk/&apos;)    into getRootProject().getBuildDir().path + &apos;/apk/&apos;    exclude &#123;&#125;//补拷贝的文件    rename &#123;&#125;//重命名&#125;</code></pre><p>文件树</p><pre><code>fileTree(&apos;src/main/assets/&apos;)&#123;FileTree fileTree -&gt;    fileTree.visit &#123;FileTreeElement element -&gt;        println element.file.name        copy &#123;            from element.file            into getRootProject().getBuildDir().path + &apos;/test/&apos;        &#125;    &#125;&#125;</code></pre><h3 id="5-4、依赖相关API"><a href="#5-4、依赖相关API" class="headerlink" title="5.4、依赖相关API"></a>5.4、依赖相关API</h3><p>依赖</p><pre><code>buildscript &#123;        //配置工程的仓库地址    repositories &#123;    &#125;    //配置工程的gradle插件依赖地址，app中的是项目的第三库依赖    dependencies &#123;    &#125;&#125;</code></pre><p>依赖冲突常用解决办法</p><pre><code>compile (&apos;rootProject.ext.dependence.libAutoScrollViewPager&apos;) &#123;    exclude module: &apos;support-v4&apos;//排除依赖    exclude group: &apos;com.android.support&apos;    transitive false//禁止传递依赖&#125;</code></pre><p>provided只在编译起作用，占位编译。</p><h3 id="5-5、外部命令API"><a href="#5-5、外部命令API" class="headerlink" title="5.5、外部命令API"></a>5.5、外部命令API</h3><p>调用系统指令，执行<code>./gradlew apkcopy</code></p><pre><code>task(name: &apos;apkcopy&apos;) &#123;    doLast &#123;        def srcPath = this.buildDir.path + &apos;/outputs/apk&apos;        def destPath = &apos;./target/apk&apos;        def command = &quot;mv -f $&#123;srcPath&#125; $&#123;destPath&#125;&quot;        exec &#123;            try &#123;                executable &apos;bash&apos;                args &apos;-c&apos;, command                println &apos;this command exec success&apos;            &#125;catch(GradleException e)&#123;                println &apos;this command exec error&apos;            &#125;        &#125;    &#125;&#125;</code></pre><p>调用脚本</p><pre><code>task stopTomcat(type:Exec) &#123;    //dir    workingDir &apos;../tomcat/bin&apos;    //windows    commandLine &apos;cmd&apos;, &apos;/c&apos;, &apos;stop.bat&apos;    //linux    commandLine &apos;./stop.sh&apos;&#125;</code></pre><h2 id="6、task"><a href="#6、task" class="headerlink" title="6、task"></a>6、task</h2><h3 id="两种定义方式"><a href="#两种定义方式" class="headerlink" title="两种定义方式"></a>两种定义方式</h3><pre><code>task helloTask (group: &apos;com.tea&apos;,description: &apos;study&apos;)&#123;    println &apos;---------helloTask&apos;&#125;this.tasks.create(name : &apos;helloTask2&apos;)&#123;    setGroup(&apos;com.tea&apos;)    setDescription(&apos;study&apos;)    println &apos;---------helloTask2&apos;&#125;</code></pre><h3 id="doFirst和doLast"><a href="#doFirst和doLast" class="headerlink" title="doFirst和doLast"></a>doFirst和doLast</h3><pre><code>task helloTask (group: &apos;com.tea&apos;,description: &apos;study&apos;)&#123;    println &apos;---------helloTask&apos;    doFirst &#123;        println &apos;---------helloTask---doFirst&apos;    &#125;&#125;helloTask.doFirst&#123;    println &apos;---------helloTask---doFirst2&apos;//比闭包的先执行&#125;</code></pre><h3 id="统计Build时长"><a href="#统计Build时长" class="headerlink" title="统计Build时长"></a>统计Build时长</h3><pre><code>def startTime,endTimethis.afterEvaluate &#123;Project project -&gt;    def  preBuildTask = project.tasks.getByName(&apos;preBuild&apos;)    preBuildTask.doFirst &#123;        startTime = System.currentTimeMillis()        println &quot;==============:&quot; + startTime    &#125;    def buildTask = project.tasks.getByName(&apos;build&apos;)    buildTask.doLast &#123;        endTime = System.currentTimeMillis()        println &quot;==============:&quot; + endTime        println &quot;==============:&quot; + (endTime - startTime)    &#125;&#125;</code></pre><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre><code>task taskX &#123;    doLast &#123;        println &quot;taskX&quot;    &#125;&#125;task taskY &#123;    doLast &#123;        println &quot;taskY&quot;    &#125;&#125;//动态依赖task taskZ &#123;    dependsOn this.tasks.findAll &#123;        task -&gt;            println task.name            return task.name.startsWith(&apos;taskX&apos;)    &#125;    doLast &#123;        println &quot;taskZ&quot;    &#125;&#125;//静态依赖task taskZ(dependsOn: [taskX, taskY]) &#123;    dependsOn this.tasks.findAll &#123;        task -&gt; return task.name.startsWith(&apos;lib&apos;)    &#125;    doLast &#123;        println &quot;taskZ&quot;    &#125;&#125;//或者taskZ.dependsOn(taskX, taskY)</code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><pre><code>task writeTask&#123;    //输入    inputs.property(&quot;key&quot;,&quot;value&quot;)    def data = inputs.getProperties()    //输出    outputs.file 文件    File file = outputs.getFiles().getSingleFile()&#125;</code></pre><h3 id="执行顺序指定"><a href="#执行顺序指定" class="headerlink" title="执行顺序指定"></a>执行顺序指定</h3><pre><code>mustRunAfter</code></pre><h2 id="7、其他模块"><a href="#7、其他模块" class="headerlink" title="7、其他模块"></a>7、其他模块</h2><h3 id="7-1、SourceSet"><a href="#7-1、SourceSet" class="headerlink" title="7.1、SourceSet"></a>7.1、SourceSet</h3><p>修改资源路径</p><pre><code>sourceSets &#123;    main&#123;        jniLibs.srcDirs = [&apos;libs&apos;]//修改so库文件位置    &#125;&#125;</code></pre><p>给res分模块分包</p><pre><code>sourceSets &#123;    main&#123;        res.srcDirs = [&apos;src/main/res&apos;,                       &apos;src/main/res-ad&apos;,                       &apos;src/main/res-tea&apos;]    &#125;&#125;</code></pre><h3 id="7-2、自定义plugin"><a href="#7-2、自定义plugin" class="headerlink" title="7.2、自定义plugin"></a>7.2、自定义plugin</h3><hr><p>main下的java替换成groovy，新建.groovy类：</p><pre><code>class GradleStudyPlugin implements Plugin&lt;Project&gt;&#123;    @Override    void apply (Project project)&#123;        project.extensions.create(&apos;comTea&apos;,xxx（groovy类）)        &#125;&#125;</code></pre><p>自定义task的类</p><pre><code>class xxxxx extend DefaultTask&#123;    @TaskAction    void doAction()&#123;        //执行于gradle执行阶段的代码    &#125;&#125;</code></pre><p>main/resources/META-INF.gradle/包名.properties:</p><pre><code>implementation-class=包名.类名</code></pre><p>build.gradle为：</p><pre><code>apply plugin: &apos;groovy&apos;sourceSets &#123;    main&#123;        groovy &#123;            srcDir &apos;src/main/groovy&apos;        &#125;        resources &#123;            srcDir &apos;src/main/resources&apos;        &#125;    &#125;&#125;</code></pre><p>引用和传参</p><pre><code>apply plugin: &apos;包名&apos;comTea&#123;    //传参&#125;</code></pre><hr><h3 id="7-3、修改apk名字"><a href="#7-3、修改apk名字" class="headerlink" title="7.3、修改apk名字"></a>7.3、修改apk名字</h3><p>app的build中</p><pre><code>this.afterEvaluate &#123;    this.android.applicationVariants.all &#123; variant -&gt;        def output = variant.outputs.first()        def apkName = &quot;app-$&#123;variant.baseName&#125;&quot; + &quot;-$&#123;variant.versionName&#125;.apk&quot;        output.outputFile = new File(output.outputFile.parent,apkName)        println &quot;------------------&quot;    &#125;&#125; </code></pre><h2 id="8、Jenkins"><a href="#8、Jenkins" class="headerlink" title="8、Jenkins"></a>8、Jenkins</h2><pre><code>java -jar jenkins.war </code></pre><h2 id="Android实战应用"><a href="#Android实战应用" class="headerlink" title="Android实战应用"></a>Android实战应用</h2><h3 id="buildTypes和productFlavors"><a href="#buildTypes和productFlavors" class="headerlink" title="buildTypes和productFlavors"></a>buildTypes和productFlavors</h3><hr><p>和main同级别，同包名，创建文件，区别使用debug还是release。可以用来实现类似gradle调用java类。</p><hr><h3 id="implementation"><a href="#implementation" class="headerlink" title="implementation"></a>implementation</h3><hr><p>implementation：不会传递依赖；compile / api：会传递依赖；api 是 compile 的替代品。当依赖被传递时，二级依赖的改动会导致0级项目重新编译；当依赖不传递时，二级依赖的改动不会导致 0 级项目重新编译。</p><hr><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><hr><p><code>android&#123;&#125;</code>的内容就是对<code>apply plugin: &#39;com.android.application&#39;</code>的配置。</p><p>参考上述<code>7.2、自定义plugin</code>。</p><p>新建Module-<code>Java Library</code>-buildSrc模块</p><p>创建目录<code>\buildSrc\src\main\resources\META-INF\gradle-plugins</code>，创建文件xxx.properties</p><pre><code>implementation-class=com.plugin.demo.PluginDemo</code></pre><p>目录<code>buildSrc\src\main\groovy\com\plugin\demo</code>创建文件PluginDemo.groovy</p><pre><code>import com.android.build.gradle.BaseExtensionimport org.gradle.api.Pluginimport org.gradle.api.Projectpublic class PluginDemo implements Plugin&lt;Project&gt; &#123;    @Override    public void apply(Project project) &#123;        def extension = project.extensions.create(&apos;yyyy&apos;, ExtensionDemo)        project.afterEvaluate &#123;            println &quot;Hello $&#123;extension.name&#125;!&quot;//Hello zzzzz        &#125;        //def transform = new TransformDemo()        //def baseExtension = project.extensions.getByType(BaseExtension)        //baseExtension.registerTransform(transform)    &#125;&#125;</code></pre><p>创建文件ExtensionDemo.groovy</p><pre><code>public class ExtensionDemo &#123;    def name = &quot;Author&quot;;&#125;</code></pre><p>在app的build中使用plugin</p><pre><code>apply plugin: &apos;xxx&apos;yyyy &#123;    name &apos;zzzzz&apos;&#125;</code></pre><p>关于 buildSrc 目录：这是 gradle 的一个特殊目录，这个目录的 build.gradle 会自动被执行，即使不配配置进<code>settings.gradle</code>。buildSrc 的执行早于任何一个 project，也早于 settings.gradle。它是一个独立的存在。 buildSrc 所配置出来的 Plugin 会被自动添加到编译过程中的每一个 project 的 classpath，因此它们才可以直接使用 <code>apply plugin: &#39;xxx&#39;</code>的方式来便捷应用这些 plugin。</p><p>settings.gradle 中如果配置了 ‘:buildSrc’ ，buildSrc 目录就会被当做是子 Project ，因此会被执行两遍。所以在 settings.gradle 里面应该删掉 <code>:buildSrc</code> 的配置。</p><hr><h3 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h3><hr><p>Transform是由 Android 提供的，在项目构建过程中把编译后的文件（jar文件和 class文件）添加自定义的中间处理过程的工具。下面代码只是把编译完的内容原封不动搬运到目标位置，没有实际用处。要修改字节码，需要引入其他工具，例如 javassist。</p><p>新建TransformDemo.groovy</p><pre><code>import com.android.build.api.transform.Formatimport com.android.build.api.transform.QualifiedContentimport com.android.build.api.transform.Transformimport com.android.build.api.transform.TransformExceptionimport com.android.build.api.transform.TransformInvocationimport com.android.build.gradle.internal.pipeline.TransformManagerimport com.android.utils.FileUtils;public class TransformDemo extends Transform &#123;    @Override    String getName() &#123;        return &quot;hencoderTransform&quot;    &#125;    @Override    Set&lt;QualifiedContent.ContentType&gt; getInputTypes() &#123;        return TransformManager.CONTENT_CLASS    &#125;    @Override    Set&lt;? super QualifiedContent.Scope&gt; getScopes() &#123;        return TransformManager.SCOPE_FULL_PROJECT    &#125;    @Override    boolean isIncremental() &#123;        return false    &#125;    @Override    void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException &#123;        def inputs = transformInvocation.inputs        def outputProvider = transformInvocation.outputProvider        inputs.each &#123;            it.jarInputs.each &#123;                File dest = outputProvider.getContentLocation(it.name, it.contentTypes, it.scopes, Format.JAR)                FileUtils.copyFile(it.file, dest)            &#125;            it.directoryInputs.each &#123;                File dest = outputProvider.getContentLocation(it.name, it.contentTypes, it.scopes, Format.DIRECTORY)                FileUtils.copyDirectory(it.file, dest)            &#125;        &#125;    &#125;&#125;</code></pre><p>buildSrc-build中改为：</p><pre><code>repositories &#123;    google()    jcenter()&#125;dependencies &#123;    implementation &apos;com.android.tools.build:gradle:3.2.1&apos;&#125;</code></pre><p>PluginDemo.groovy中添加代码</p><pre><code>def transform = new TransformDemo()def baseExtension = project.extensions.getByType(BaseExtension)baseExtension.registerTransform(transform)</code></pre><p>修改app-build中的plugin放在android{}之后。</p><p>示例：<a href="https://github.com/liangzhitao/consuming-collector">https://github.com/liangzhitao/consuming-collector</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写实现EventBus</title>
    <link href="/2019/07/07/28.%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0EventBus/"/>
    <url>/2019/07/07/28.%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0EventBus/</url>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>github地址：</p><pre><code>https://github.com/greenrobot/EventBus</code></pre><p>引入</p><pre><code>implementation &apos;org.greenrobot:eventbus:3.0.0&apos;</code></pre><p>订阅和接收</p><pre><code>@Overrideprotected void onCreate(Bundle savedInstanceState) &#123;    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    EventBus.getDefault().register(this);&#125;@Overrideprotected void onDestroy() &#123;    super.onDestroy();    EventBus.getDefault().unregister(this);&#125;@Subscribe(threadMode = ThreadMode.MAIN,priority = 100,sticky = true)public void onStringEvent(String event) &#123;    Log.d(&quot;接收者&quot;, &quot;event----:&quot; + event);&#125;</code></pre><p>发布事件</p><pre><code>EventBus.getDefault().post(&quot;我来发布消息&quot;);</code></pre><p>发布粘性事件</p><pre><code>EventBus.getDefault().postSticky(&quot;我来发布消息&quot;);</code></pre><p>ThreadMode总共四个枚举项：</p><pre><code>MAIN //UI主线程BACKGROUND //后台线程POSTING //和发布者处在同一个线程ASYNC //异步线程</code></pre><p>终止事件往下传递：</p><pre><code>//优先级高的订阅者可以终止事件往下传递EventBus.getDefault().cancelEventDelivery(event);</code></pre><p>混淆</p><pre><code>-keepattributes *Annotation*-keepclassmembers class * &#123;    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;&#125;-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125; -keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;    &lt;init&gt;(java.lang.Throwable);&#125;</code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="第一步register"><a href="#第一步register" class="headerlink" title="第一步register"></a>第一步register</h3><p>第一步：<code>EventBus.getDefault().register(this);</code>其中<code>getDefault()</code>获取单例，看EventBus中<code>register()</code>方法：</p><pre><code>public void register(Object subscriber) &#123;    //首先获得class对象    Class&lt;?&gt; subscriberClass = subscriber.getClass();    //通过findSubscriberMethods来找到订阅者订阅了哪些事件，返回一个SubscriberMethod对象的List。    //SubscriberMethod里包含了：这个对象的方法method、响应订阅的线程ThreadMode、方法参数类型eventType、订阅的优先级 priority、是否接收粘性sticky的boolean值。    //其实就是解析这个类上的所有带@Subscriber注解的方法的属性。    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);    synchronized (this) &#123;        for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;            // 订阅，第二步分析            subscribe(subscriber, subscriberMethod);        &#125;    &#125;&#125;</code></pre><p>看SubscriberMethodFinder类中<code>findSubscriberMethods(Class&lt;?&gt; subscriberClass)</code>方法：</p><pre><code>List&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) &#123;    // 先从缓存里面读取，订阅者的Class    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);    if (subscriberMethods != null) &#123;        return subscriberMethods;    &#125;    // ignoreGeneratedIndex属性表示是否忽略注解器生成的MyEventBusIndex。    // 支持编译时注解的方式，需要引入eventbus的apt，ignoreGeneratedIndex的默认值为false，可以通过EventBusBuilder来设置它的值    if (ignoreGeneratedIndex) &#123;        // 利用反射来获取订阅类中所有订阅方法信息        subscriberMethods = findUsingReflection(subscriberClass);    &#125; else &#123;        // 从注解器生成的MyEventBusIndex类中获得订阅类的订阅方法信息        subscriberMethods = findUsingInfo(subscriberClass);    &#125;    if (subscriberMethods.isEmpty()) &#123;        throw new EventBusException(&quot;Subscriber &quot; + subscriberClass                + &quot; and its super classes have no public methods with the @Subscribe annotation&quot;);    &#125; else &#123;        METHOD_CACHE.put(subscriberClass, subscriberMethods);        return subscriberMethods;    &#125;&#125;</code></pre><p>会走到SubscriberMethodFinder类中<code>findUsingInfo(Class&lt;?&gt; subscriberClass)</code>方法：</p><pre><code>private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) &#123;    // FindState涉及到享元设计模式    FindState findState = prepareFindState();    findState.initForSubscriber(subscriberClass);    while (findState.clazz != null) &#123;        //默认是空，除非用了编译时注解        findState.subscriberInfo = getSubscriberInfo(findState);        if (findState.subscriberInfo != null) &#123;            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();            for (SubscriberMethod subscriberMethod : array) &#123;                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;                    findState.subscriberMethods.add(subscriberMethod);                &#125;            &#125;        &#125; else &#123;            //走到这里，通过反射去找            findUsingReflectionInSingleClass(findState);        &#125;        findState.moveToSuperclass();    &#125;    // 释放 findState 享元模式    return getMethodsAndRelease(findState);&#125;</code></pre><p>走到SubscriberMethodFinder类中<code>findUsingReflectionInSingleClass(FindState findState)</code>方法：</p><pre><code>//找方法的核心代码private void findUsingReflectionInSingleClass(FindState findState) &#123;    Method[] methods;    try &#123;        // 通过反射来获取订阅类的所有方法        methods = findState.clazz.getDeclaredMethods();    &#125; catch (Throwable th) &#123;        methods = findState.clazz.getMethods();        findState.skipSuperClasses = true;    &#125;    //for循环所有方法    for (Method method : methods) &#123;        // 获取方法访问修饰符        int modifiers = method.getModifiers();        //找到所有声明为public的方法        if ((modifiers &amp; Modifier.PUBLIC) != 0 &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == 0) &#123;            //获取参数的的Class            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();            //只允许包含一个参数            if (parameterTypes.length == 1) &#123;                //Subscribe注解                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);                if (subscribeAnnotation != null) &#123;                    //获取事件的Class ，也就是方法参数的Class                    Class&lt;?&gt; eventType = parameterTypes[0];                    // 检测添加                    if (findState.checkAdd(method, eventType)) &#123;                        //获取ThreadMode                        ThreadMode threadMode = subscribeAnnotation.threadMode();                        // 往集合里面添加 SubscriberMethod ，解析方法注解所有的属性                        findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,                                subscribeAnnotation.priority(), subscribeAnnotation.sticky()));                    &#125;                &#125;            &#125; else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;                String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName();                throw new EventBusException(&quot;@Subscribe method &quot; + methodName +                        &quot;must have exactly 1 parameter but has &quot; + parameterTypes.length);            &#125;        &#125; else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;            String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName();            throw new EventBusException(methodName +                    &quot; is a illegal @Subscribe method: must be public, non-static, and non-abstract&quot;);        &#125;    &#125;&#125;</code></pre><blockquote><p>第一步总结：<code>register()</code>方法中调用<code>findSubscriberMethods()</code>，去解析注册者对象的所有方法，找出public方法，并且带有<code>@Subscribe</code>注解、并且参数只有一个，的方法，然后通过Annotation解析所有细节参数<code>threadMode(线程)、priority(优先级)、sticky(是否粘性)、method(方法名)、eventType(方法参数类型)</code>，把这些参数封装成一个SubscriberMethod对象，添加到集合返回。</p></blockquote><h3 id="第二步register"><a href="#第二步register" class="headerlink" title="第二步register"></a>第二步register</h3><p>EventBus中<code>register()</code>方法调用了<code>subscribe(subscriber, subscriberMethod);</code>其中subscriber就是<code>register(this)</code>中的this，subscriberMethod就是第一步中的集合遍历的元素对象。</p><p>EventBus中<code>subscribe(Object subscriber, SubscriberMethod subscriberMethod)</code>方法:</p><pre><code>private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) &#123;    // 获取方法参数的class    Class&lt;?&gt; eventType = subscriberMethod.eventType;    // 创建一个 Subscription，subscribe方法的参数传给了Subscription    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);    // 获取订阅了此事件类的所有订阅者信息列表,下面有分析subscriptionsByEventType    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);    if (subscriptions == null) &#123;        // 线程安全的 ArrayList        subscriptions = new CopyOnWriteArrayList&lt;&gt;();        // 添加        subscriptionsByEventType.put(eventType, subscriptions);    &#125; else &#123;        // 是否包含，如果包含再次添加抛异常        if (subscriptions.contains(newSubscription)) &#123;            throw new EventBusException(&quot;Subscriber &quot; + subscriber.getClass() + &quot; already registered to event &quot;                    + eventType);        &#125;    &#125;    // 处理优先级priority    int size = subscriptions.size();    for (int i = 0; i &lt;= size; i++) &#123;        if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;            subscriptions.add(i, newSubscription);            break;        &#125;    &#125;    // 通过 subscriber 获取  List&lt;Class&lt;?&gt;&gt;，下面有分析typesBySubscriber    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);    if (subscribedEvents == null) &#123;        subscribedEvents = new ArrayList&lt;&gt;();        typesBySubscriber.put(subscriber, subscribedEvents);    &#125;    // 将此事件类加入 订阅者事件类列表中    subscribedEvents.add(eventType);    // 处理粘性事件    if (subscriberMethod.sticky) &#123;        if (eventInheritance) &#123;            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();            for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;                Class&lt;?&gt; candidateEventType = entry.getKey();                if (eventType.isAssignableFrom(candidateEventType)) &#123;                    Object stickyEvent = entry.getValue();                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);                &#125;            &#125;        &#125; else &#123;            Object stickyEvent = stickyEvents.get(eventType);            checkPostStickyEventToSubscription(newSubscription, stickyEvent);        &#125;    &#125;&#125;</code></pre><p>查看<strong>subscriptionsByEventType</strong>，是EventBus的一个Map成员变量，可以根据EventType查找订阅事件</p><pre><code>// key 是注解方法参数的class(eventType)，value 存放的是Subscription的线程安全的集合列表//Subscription 包含两个属性，一个是subscriber 订阅者（this），一个是SubscriberMethod注解方法的所有属性参数值（SubscriberMethod）private final Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</code></pre><p>查看typesBySubscriber，是EventBus的一个Map成员变量，根据我们的订阅对象找到EventType。</p><pre><code>// key 是所有的订阅者(this)，value 是所有订阅者里面方法的参数的class的集合private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</code></pre><p>粘性事件<code>stickyEvents</code>:是<code>ConcurrentHashMap</code>集合,粘性事件的缓存。</p><blockquote><p>第二步总结：<code>register()</code>方法中调用subscribe方法，解析所有SubscriberMethod的eventType，然后按照要求解析成<code>Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType</code>和<code>Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber</code>。</p></blockquote><h3 id="第三步post"><a href="#第三步post" class="headerlink" title="第三步post"></a>第三步post</h3><p>查看EventBus中post方法：</p><pre><code>public void post(Object event) &#123;    // currentPostingThreadState是一个 ThreadLocal，他的特点是获取当前线程一份独有的变量数据，不受其他线程影响。    PostingThreadState postingState = currentPostingThreadState.get();    // postingState 就是获取到的线程独有的变量数据    List&lt;Object&gt; eventQueue = postingState.eventQueue;    // 把post的事件添加到事件队列    eventQueue.add(event);    // 如果没有处在事件发布状态，那么开始发送事件并一直保持发布状态    if (!postingState.isPosting) &#123;        //是否是主线程        postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();        //isPosting = true        postingState.isPosting = true;        if (postingState.canceled) &#123;            throw new EventBusException(&quot;Internal error. Abort state was not reset&quot;);        &#125;        try &#123;            while (!eventQueue.isEmpty()) &#123;                //走到这里，下面有分析                postSingleEvent(eventQueue.remove(0), postingState);            &#125;        &#125; finally &#123;            postingState.isPosting = false;            postingState.isMainThread = false;        &#125;    &#125;&#125;private final ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = new ThreadLocal&lt;PostingThreadState&gt;() &#123;    @Override    protected PostingThreadState initialValue() &#123;        return new PostingThreadState();    &#125;&#125;;</code></pre><p>查看EventBus中postSingleEvent方法：</p><pre><code>//参数event是post的对象private void postSingleEvent(Object event, PostingThreadState postingState) throws Error &#123;    //得到事件的Class    Class&lt;?&gt; eventClass = event.getClass();    //是否找到订阅者    boolean subscriptionFound = false;    //如果支持事件继承，默认为支持    if (eventInheritance) &#123;        //查找 eventClass 的所有父类和接口        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);        int countTypes = eventTypes.size();        for (int h = 0; h &lt; countTypes; h++) &#123;            Class&lt;?&gt; clazz = eventTypes.get(h);            // 依次向 eventClass 的父类或接口的订阅方法发送事件            // 只要有一个事件发送成功，返回 true ，那么 subscriptionFound 就为 true，下面有分析            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);        &#125;    &#125; else &#123;        // 发送事件        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);    &#125;    // 如果没有订阅者    if (!subscriptionFound) &#123;        if (logNoSubscriberMessages) &#123;            Log.d(TAG, &quot;No subscribers registered for event &quot; + eventClass);        &#125;        if (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;                eventClass != SubscriberExceptionEvent.class) &#123;            post(new NoSubscriberEvent(this, event));        &#125;    &#125;&#125;</code></pre><p>查看EventBus中postSingleEventForEventType方法：</p><pre><code>//event是post的对象，eventClass是post的对象的classprivate boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass) &#123;    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;    synchronized (this) &#123;        // subscriptionsByEventType是第二步中的map，得到Subscription集合List        subscriptions = subscriptionsByEventType.get(eventClass);    &#125;    if (subscriptions != null &amp;&amp; !subscriptions.isEmpty()) &#123;        // 遍历subscriptions        for (Subscription subscription : subscriptions) &#123;            postingState.event = event;            postingState.subscription = subscription;            boolean aborted = false;            try &#123;                // 发送事件，下面分析                postToSubscription(subscription, event, postingState.isMainThread);                // 是否被取消了                aborted = postingState.canceled;            &#125; finally &#123;                postingState.event = null;                postingState.subscription = null;                postingState.canceled = false;            &#125;            // 如果被取消，则跳出循环            if (aborted) &#123;                break;            &#125;        &#125;        return true;    &#125;    return false;&#125;</code></pre><p>查看EventBus中postToSubscription方法：</p><pre><code>private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) &#123;    // 根据不同的线程模式执行对应    switch (subscription.subscriberMethod.threadMode) &#123;        // 和发送事件处于同一个线程        case POSTING:            invokeSubscriber(subscription, event);            break;        // 主线程        case MAIN:            if (isMainThread) &#123;                invokeSubscriber(subscription, event);            &#125; else &#123;                mainThreadPoster.enqueue(subscription, event);            &#125;            break;        // 子线程，如果发布事件的线程是主线程，那么调用线程池中的子线程来执行订阅方法；否则直接执行；        case BACKGROUND:            if (isMainThread) &#123;                backgroundPoster.enqueue(subscription, event);            &#125; else &#123;                invokeSubscriber(subscription, event);            &#125;            break;        // 异步线程：无论发布事件执行在主线程还是子线程，都利用一个异步线程来执行订阅方法        case ASYNC:            asyncPoster.enqueue(subscription, event);            break;        default:            throw new IllegalStateException(&quot;Unknown thread mode: &quot; + subscription.subscriberMethod.threadMode);    &#125;&#125;</code></pre><blockquote><p>第三步总结：post()方法中去遍历了<code>subscriptionsByEventType</code>，找到符合的方法,调用方法的<code>method.invoke()</code>执行。</p></blockquote><h3 id="第四步unregister"><a href="#第四步unregister" class="headerlink" title="第四步unregister"></a>第四步unregister</h3><p>unregister就是移除。查看EventBus中unregister方法：</p><pre><code>public synchronized void unregister(Object subscriber) &#123;    // 获取订阅对象的所有订阅事件类列表,第二步中的map    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);    if (subscribedTypes != null) &#123;        for (Class&lt;?&gt; eventType : subscribedTypes) &#123;            // 将订阅者的订阅信息移除，下面分析            unsubscribeByEventType(subscriber, eventType);        &#125;        // 将订阅者从列表中移除        typesBySubscriber.remove(subscriber);    &#125; else &#123;        Log.w(TAG, &quot;Subscriber to unregister was not registered before: &quot; + subscriber.getClass());    &#125;&#125;</code></pre><p>查看EventBus中unsubscribeByEventType方法：</p><pre><code>private void unsubscribeByEventType(Object subscriber, Class&lt;?&gt; eventType) &#123;    // 获取事件类的所有订阅信息列表，将订阅信息从订阅信息集合中移除，同时将订阅信息中的active属性置为FALSE,第二步中的map    List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);    if (subscriptions != null) &#123;        int size = subscriptions.size();        for (int i = 0; i &lt; size; i++) &#123;            Subscription subscription = subscriptions.get(i);            if (subscription.subscriber == subscriber) &#123;                // 将订阅信息激活状态置为FALSE                subscription.active = false;                // 将订阅信息从集合中移除                subscriptions.remove(i);                i--;                size--;            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h2><p><a href="https://github.com/AdamRight/TeaTool/blob/master/app/src/main/java/com/tea/teatool/teaeventbus">https://github.com/AdamRight/TeaTool/blob/master/app/src/main/java/com/tea/teatool/teaeventbus</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RecyclerView</title>
    <link href="/2019/07/01/27.RecyclerView/"/>
    <url>/2019/07/01/27.RecyclerView/</url>
    
    <content type="html"><![CDATA[<h2 id="1、基本使用和封装"><a href="#1、基本使用和封装" class="headerlink" title="1、基本使用和封装"></a>1、基本使用和封装</h2><p>布局、点击、分割线、多类型条目使用。</p><h3 id="1-1、基本使用"><a href="#1-1、基本使用" class="headerlink" title="1.1、基本使用"></a>1.1、基本使用</h3><p><a href="https://github.com/AdamRight/TeaTool/blob/master/app/src/main/java/com/tea/teatool/rv/baseuse">点我跳转</a></p><h3 id="1-2、基本封装"><a href="#1-2、基本封装" class="headerlink" title="1.2、基本封装"></a>1.2、基本封装</h3><p><a href="https://github.com/AdamRight/TeaTool/blob/master/app/src/main/java/com/tea/teatool/rv/common">点我跳转</a></p><h3 id="1-3、多类型条目"><a href="#1-3、多类型条目" class="headerlink" title="1.3、多类型条目"></a>1.3、多类型条目</h3><p><a href="https://github.com/AdamRight/TeaTool/blob/master/app/src/main/java/com/tea/teatool/rv/type">点我跳转</a></p><h3 id="1-4、添加头部和底部"><a href="#1-4、添加头部和底部" class="headerlink" title="1.4、添加头部和底部"></a>1.4、添加头部和底部</h3><p><a href="https://github.com/AdamRight/TeaTool/blob/master/app/src/main/java/com/tea/teatool/rv/headandbottom">点我跳转</a></p><h2 id="2、分割线"><a href="#2、分割线" class="headerlink" title="2、分割线"></a>2、分割线</h2><h3 id="2-1、条目相关"><a href="#2-1、条目相关" class="headerlink" title="2.1、条目相关"></a>2.1、条目相关</h3><p>设置分割线类中的<code>getItemOffsets</code>方法中</p><pre><code>//获取条目View在RecyclerView中的第几个位置：0、1、2、3...int currentPosition = ((RecyclerView.LayoutParams) view.getLayoutParams()).getViewLayoutPosition();//获取条目的总个数int itemCount = parent.getAdapter().getItemCount();//GridLayoutManager时候，获取列数RecyclerView.LayoutManager layoutManager = parent.getLayoutManager();if (layoutManager instanceof GridLayoutManager) &#123;    GridLayoutManager gridLayoutManager = (GridLayoutManager) layoutManager;    int spanCount = gridLayoutManager.getSpanCount();&#125;</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h2 id="实例化View的3种方式"><a href="#实例化View的3种方式" class="headerlink" title="实例化View的3种方式"></a>实例化View的3种方式</h2><pre><code>View.inflate(mContext, mLayoutId, null); LayoutInflater.from(mContext).inflate(mLayoutId, parent);LayoutInflater.from(mContext).inflate(mLayoutId, parent, false);</code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RecyclerView</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写实现Butterknife</title>
    <link href="/2019/06/29/26.%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Butterknife/"/>
    <url>/2019/06/29/26.%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Butterknife/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Butterknife源码地址</p><pre><code>https://github.com/JakeWharton/butterknife</code></pre><p>引入</p><pre><code>implementation &apos;com.jakewharton:butterknife:8.5.1&apos;annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.5.1&apos;</code></pre><p>主要是解决掉findViewById、setOnclick 、资源的注入等。反射造成大量的临时文件，造成gc，影响性能。<strong>而Butterknife采用编译时注解，即用APT mirror生成代码。</strong></p><p>ButterKnife的工作原理:</p><p>声明的注解的生命周期为CLASS。继承AbstractProcessor类，再调用AbstractProcessor的process方法。</p><p>编译的时候扫描注解，调用javapoet库，生成java代码。</p><p>调用<code>ButterKnife.bind(this);</code>方法的时候，将ID与对应的上下文绑定在一起。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>发现编译后生成<code>类名_ViewBinding</code>，那么我们手动实现Butterknife，先写下伪代码：</p><p>新建<code>类名_ViewBinding</code>：</p><pre><code>public class ButterknifeActivity_ViewBinding &#123;    private ButterknifeActivity target;    @UiThread    public ButterknifeActivity_ViewBinding(ButterknifeActivity target) &#123;        this.target = target;        target.textView = target.findViewById(R.id.tv);    &#125;    @CallSuper    public void unbind() &#123;        ButterknifeActivity target = this.target;        if (target == null) throw new IllegalStateException(&quot;Bindings already cleared.&quot;);        this.target = null;        target.textView = null;    &#125;&#125;</code></pre><p>在Activity中不需要再findViewById：</p><pre><code>public class ButterknifeActivity extends AppCompatActivity &#123;    public TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_butterknife);        ButterknifeActivity_ViewBinding viewBinding = new ButterknifeActivity_ViewBinding(this);        textView.setText(&quot;我是伪代码&quot;);    &#125;&#125;</code></pre><p>所以，我们的思路就是用APT实现伪代码，就实现了手写Butterknife。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h3><p>新建Module-Library</p><pre><code>Android Library:butterknifeJava Library:butterknife-annotations(运行时的注解)和butterknife-compiler(编译，生成代码)</code></pre><p>配置</p><p>app的build中引入</p><pre><code>implementation project(&apos;:butterknife-annotations&apos;)implementation project(&apos;:butterknife&apos;)annotationProcessor project(&apos;:butterknife-compiler&apos;)</code></pre><p>butterknife-compiler中引入</p><pre><code>implementation &apos;com.google.auto.service:auto-service:1.0-rc3&apos;//注解implementation &apos;com.squareup:javapoet:1.8.0&apos;//生成代码文件implementation project(&apos;:butterknife-annotations&apos;)//依赖butterknife-annotations</code></pre><blockquote><p>注解处理器是（Annotation Processor）是javac的一个工具，用来在编译时扫描和编译和处理注解（Annotation）。在编译时把标记了注解的类，变量等作为输入内容，经过注解处理器处理，生成想要生成的java代码。处理器都是继承于<code>AbstractProcessor</code>。</p></blockquote><blockquote><p>APT(Annotation Processing Tool)是一种处理注解的工具,它对源代码文件进行检测找出其中的Annotation，根据注解自动生成代码。 </p></blockquote><blockquote><p>注解处理器在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件(文件具体内容由Annotation处理器的编写者决定),APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。</p></blockquote><pre><code>@AutoService(Processor.class)public class ButterKnifeProcessor extends AbstractProcessor &#123;    @Override    public synchronized void init(ProcessingEnvironment processingEnvironment) &#123;        //先进init    &#125;    //用来指定支持的 SourceVersion    @Override    public SourceVersion getSupportedSourceVersion() &#123;        return SourceVersion.latestSupported();    &#125;    //用来指定支持的 AnnotationTypes    @Override    public Set&lt;String&gt; getSupportedAnnotationTypes() &#123;        Set&lt;String&gt; types = new LinkedHashSet&lt;&gt;();        for (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) &#123;            types.add(annotation.getCanonicalName());        &#125;        return types;    &#125;    //绑定哪些注解    private Set&lt;Class&lt;? extends Annotation&gt;&gt; getSupportedAnnotations() &#123;        Set&lt;Class&lt;? extends Annotation&gt;&gt; annotations = new LinkedHashSet&lt;&gt;();        annotations.add(BindView.class);        return annotations;    &#125;    //编译时候执行,核心方法，有注解就都会进来这个方法，可以扫描，处理注解等，并且可以生成java代码。    @Override    public boolean process(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment) &#123;        return false;    &#125;&#125;</code></pre><p>APT流程：编译开始 → 拿到元素(添加指定的注解元素) → 处理分解元素以及注解信息 → 通过JAVAPOET拼装生成Java文件 → 交给编译器。</p><p>AbstractProcessor中的init方法中的参数ProcessingEnvironment</p><pre><code>public interface ProcessingEnvironment &#123;    Map&lt;String, String&gt; getOptions();    Messager getMessager();    Filer getFiler();    Elements getElementUtils();    Types getTypeUtils();    SourceVersion getSourceVersion();    Locale getLocale();&#125;</code></pre><p>ProcessingEnvironment提供了一些工具类，Filer用于创建文件，Elements获取所有源文件元素，Types获取源代码类型信息。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>唯一使用反射的地方：</p><p>不在class中写入</p><pre><code>Class_ViewBinding viewBinding = new Class_ViewBinding(this);</code></pre><p>而是通过</p><pre><code>ButterKnife.bind(this)//中对Class_ViewBinding进行有参构造反射</code></pre><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>生成的类在/build/generated/source/apt/base/包名/ClassName_ViewBinding类。</p><p>代码</p><pre><code>https://github.com/AdamRight/TeaTool/tree/master/app/src/main/java/com/tea/teatool/teabutterknifehttps://github.com/AdamRight/TeaTool</code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>handler源码分析及手写handler</title>
    <link href="/2019/06/11/24.handler%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E6%89%8B%E5%86%99handler/"/>
    <url>/2019/06/11/24.handler%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E6%89%8B%E5%86%99handler/</url>
    
    <content type="html"><![CDATA[<h2 id="小实例"><a href="#小实例" class="headerlink" title="小实例"></a>小实例</h2><pre><code>private Handler mHandler = new Handler()&#123;    @Override    public void handleMessage(Message msg) &#123;        super.handleMessage(msg);        System.out.println(msg.what);    &#125;&#125;;@Overridepublic void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) &#123;    super.onCreate(savedInstanceState, persistentState);    setContentView(R.layout.activity_main);    new Thread(new Runnable() &#123;        @Override        public void run() &#123;            //进行耗时操作后            Message message = Message.obtain();            message.what = 1;            mHandler.sendMessage(message);        &#125;    &#125;).start();&#125;</code></pre><p>在子线程中，进行耗时操作，执行完操作后，发送消息，通知主线程更新UI。</p><h2 id="子线程中创建handler"><a href="#子线程中创建handler" class="headerlink" title="子线程中创建handler"></a>子线程中创建handler</h2><p>如果在子线程中创建handler：</p><pre><code>new Thread()&#123;    @Override    public void run() &#123;        Handler handler = new Handler();    &#125;&#125;.start();</code></pre><p>代码运行报错：</p><pre><code>java.lang.RuntimeException: Can&apos;t create handler inside thread that has not called Looper.prepare()</code></pre><p>可以修改为：</p><pre><code>new Thread()&#123;    @Override    public void run() &#123;        Looper.prepare();        Handler handler = new Handler();        Looper.loop();    &#125;&#125;.start();</code></pre><p>在主线程中不需要，究其原因，在ActivityThread的<code>main()</code>方法中：</p><pre><code>...    Looper.prepareMainLooper();//准备循环...Looper.loop();//循环....</code></pre><p>其中<code>prepareMainLooper()</code>方法会调用<code>prepare(false)</code>方法。</p><h2 id="源码流程分析"><a href="#源码流程分析" class="headerlink" title="源码流程分析"></a>源码流程分析</h2><p>分析源码的思路,就是小实例中,从子线程调用<code>mHandler.sendMessage(message);</code>到主线程更新数据执行<code>handleMessage(Message msg)</code>方法的流程。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>sendMessage到MessageQueue:<code>Handler.sendMessage</code> → <code>Handler.sendMessageDelayed</code> → <code>Handler.sendMessageAtTime</code> → <code>MessageQueue.enqueueMessage</code>。</p><p>Handler中<code>sendMessageAtTime()</code>方法</p><pre><code>public boolean sendMessageAtTime(Message msg, long uptimeMillis) &#123;    //其中mQueue是消息队列，从Looper中获取的    MessageQueue queue = mQueue;    if (queue == null) &#123;        RuntimeException e = new RuntimeException(                this + &quot; sendMessageAtTime() called with no mQueue&quot;);        Log.w(&quot;Looper&quot;, e.getMessage(), e);        return false;    &#125;    //调用enqueueMessage方法    return enqueueMessage(queue, msg, uptimeMillis);&#125;private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123;    //注意此处的msg.target就是当前的Handler，Looper中的loop会使用。    msg.target = this;    if (mAsynchronous) &#123;        msg.setAsynchronous(true);    &#125;    //调用MessageQueue的enqueueMessage方法    return queue.enqueueMessage(msg, uptimeMillis);&#125;</code></pre><p>可以看到<code>sendMessageAtTime()</code>方法的作用很简单，就是调用MessageQueue的<code>enqueueMessage()</code>方法，往消息队列中添加一个消息。</p><p>知识扩展：在子线程中通过Handler的post()方式或send()方式发送消息，最终都是调用了<code>sendMessageAtTime()</code>方法。子线程中调用Activity中的<code>runOnUiThread()</code>中更新UI，其实也是发送消息通知主线程更新UI，最终也会调用<code>sendMessageAtTime()</code>方法。</p><p>MessageQueue中<code>enqueueMessage()</code>方法</p><pre><code>boolean enqueueMessage(Message msg, long when) &#123;    // 每一个Message必须有一个target    if (msg.target == null) &#123;        throw new IllegalArgumentException(&quot;Message must have a target.&quot;);    &#125;    if (msg.isInUse()) &#123;        throw new IllegalStateException(msg + &quot; This message is already in use.&quot;);    &#125;    synchronized (this) &#123;        //正在退出时，回收msg，加入到消息池        if (mQuitting) &#123;            IllegalStateException e = new IllegalStateException(                    msg.target + &quot; sending message to a Handler on a dead thread&quot;);            Log.w(TAG, e.getMessage(), e);            msg.recycle();            return false;        &#125;        msg.markInUse();        msg.when = when;        Message p = mMessages;        boolean needWake;        if (p == null || when == 0 || when &lt; p.when) &#123;            //p为null(代表MessageQueue没有消息） 或者msg的触发时间是队列中最早的（即第一个msg）,则进入该该分支.            msg.next = p;            mMessages = msg;            needWake = mBlocked;        &#125; else &#123;            //将消息按时间顺序插入到MessageQueue。            needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();            Message prev;            for (;;) &#123;                prev = p;                p = p.next;                if (p == null || when &lt; p.when) &#123;                    break;                &#125;                if (needWake &amp;&amp; p.isAsynchronous()) &#123;                    needWake = false;                &#125;            &#125;            msg.next = p; // invariant: p == prev.next            prev.next = msg;        &#125;        if (needWake) &#123;            nativeWake(mPtr);        &#125;    &#125;    return true;&#125;</code></pre><p>MessageQueue是按照Message触发时间(when)的先后顺序排列的，队头的消息是最早触发的消息。当有消息需要加入消息队列时，会从队列头开始遍历，直到找到消息应该插入的合适位置，以保证所有消息的时间顺序。<strong>MessageQueue消息队列采用链表存储Message,因为链表是增加删除快，数组是查询快</strong></p><p>第一步总结：Handler.sendMessage是把Message加入了消息队列(MessageQueue)中，消息队列采用的是链表存储方式，按照when也就是时间排序。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>我们知道主线程中，已经创建了Looper，在Loop方法中消息循环调用了Handler.handleMessage。</p><h4 id="初始化Looper"><a href="#初始化Looper" class="headerlink" title="初始化Looper"></a>初始化Looper</h4><p>无参情况下，默认调用<code>prepare(true);</code>表示的是这个Looper可以退出，而对于false的情况则表示当前Looper不可以退出。</p><p>Looper中</p><pre><code>public static void prepare() &#123;        prepare(true);&#125;private static void prepare(boolean quitAllowed) &#123;    if (sThreadLocal.get() != null) &#123;        throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);    &#125;    sThreadLocal.set(new Looper(quitAllowed));&#125;</code></pre><p>调用<code>sThreadLocal.set</code>，在ThreadLocal中</p><pre><code>public void set(T value) &#123;    Thread t = Thread.currentThread();    //从线程中获取ThreadLocalMap ，一个线程中只有一个ThreadLocalMap    ThreadLocalMap map = getMap(t);    if (map != null)        map.set(this, value);    else        createMap(t, value);&#125;</code></pre><p>一个线程中只有一个ThreadLocalMap，<strong>一个线程中只能创建一个Looper</strong>，ThreadLocalMap中把ThreadLocal为key，Looper为value，存储起来。其中ThreadLocal是线程本地存储区（Thread Local Storage，简称为TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。</p><h4 id="开启Looper"><a href="#开启Looper" class="headerlink" title="开启Looper"></a>开启Looper</h4><pre><code>public static void loop() &#123;    //获取线程中TLS存储的Looper对象     final Looper me = myLooper();    if (me == null) &#123;        throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;);    &#125;    //获取Looper对象中的消息队列    final MessageQueue queue = me.mQueue;    Binder.clearCallingIdentity();    final long ident = Binder.clearCallingIdentity();    //进入loop的主循环方法，死循环    for (;;) &#123;        Message msg = queue.next(); //可能会阻塞,因为next()方法可能会无限循环        if (msg == null) &#123; //消息为空，则退出循环            // No message indicates that the message queue is quitting.            return;        &#125;        try &#123;            //重点地方,获取msg的目标Handler，然后通过handler去执行Message这个时候就调用了handleMessage方法            msg.target.dispatchMessage(msg);            end = (slowDispatchThresholdMs == 0) ? 0 : SystemClock.uptimeMillis();        &#125; finally &#123;            if (traceTag != 0) &#123;                Trace.traceEnd(traceTag);            &#125;        &#125;        // 回收消息        msg.recycleUnchecked();    &#125;&#125;</code></pre><p>loop()进入循环模式，直到消息为空时退出循环:读取MessageQueue的下一条Message；把Message分发给相应的target。</p><p><strong>当next()取出下一条消息时，队列中已经没有消息时，next()会无限循环，产生阻塞。等待MessageQueue中加入消息，然后重新唤醒。</strong></p><h4 id="Handler创建"><a href="#Handler创建" class="headerlink" title="Handler创建"></a>Handler创建</h4><p>创建Handler</p><pre><code>public Handler() &#123;    this(null, false);&#125;public Handler(Callback callback, boolean async) &#123;    //必须先执行Looper.prepare()，才能获取Looper对象，否则为null.    mLooper = Looper.myLooper();  //从当前线程的TLS中获取Looper对象    if (mLooper == null) &#123;        throw new RuntimeException(&quot;&quot;);    &#125;    mQueue = mLooper.mQueue; //消息队列，来自Looper对象    mCallback = callback;  //回调方法    mAsynchronous = async; //设置消息是否为异步处理方式&#125;</code></pre><p>对于Handler的无参构造方法，默认采用当前线程TLS中的Looper对象，并且callback回调方法为null，且消息为同步处理方式。只要执行了<code>Looper.prepare()</code>方法，那么便可以获取有效的Looper对象。</p><h4 id="Handler分发消息"><a href="#Handler分发消息" class="headerlink" title="Handler分发消息"></a>Handler分发消息</h4><p>在<code>Looper.loop()</code>方法中，获取到下一条消息后，执行<code>msg.target.dispatchMessage(msg)</code>，来分发消息到目标Handler对象。   </p><pre><code>public void dispatchMessage(Message msg) &#123;    if (msg.callback != null) &#123;        //当Message存在回调方法，回调msg.callback.run()方法；        handleCallback(msg);    &#125; else &#123;        if (mCallback != null) &#123;            //当Handler存在Callback成员变量时，回调方法handleMessage()；            if (mCallback.handleMessage(msg)) &#123;                return;            &#125;        &#125;        //Handler自身的回调方法handleMessage()        handleMessage(msg);    &#125;&#125;private static void handleCallback(Message message) &#123;        message.callback.run();&#125;public void handleMessage(Message msg) &#123;&#125;</code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>获取消息：当发送了消息后，在MessageQueue维护了消息队列，然后在Looper中通过<code>loop()</code>方法，不断地获取消息。上面对<code>loop()</code>方法进行了介绍，其中最重要的是调用了<code>queue.next()</code>方法,通过该方法来提取下一条信息。下面我们来看一下<code>next()</code>方法的具体流程。  </p><p>MessageQueue中</p><pre><code>Message next() &#123;    final long ptr = mPtr;    if (ptr == 0) &#123; //当消息循环已经退出，则直接返回        return null;    &#125;    int pendingIdleHandlerCount = -1; // 循环迭代的首次为-1    int nextPollTimeoutMillis = 0;    for (;;) &#123;        if (nextPollTimeoutMillis != 0) &#123;            Binder.flushPendingCommands();        &#125;        //阻塞操作，当等待nextPollTimeoutMillis时长，或者消息队列被唤醒，都会返回        nativePollOnce(ptr, nextPollTimeoutMillis);        synchronized (this) &#123;            final long now = SystemClock.uptimeMillis();            Message prevMsg = null;            Message msg = mMessages;            if (msg != null &amp;&amp; msg.target == null) &#123;                //当消息Handler为空时，查询MessageQueue中的下一条异步消息msg，为空则退出循环。                do &#123;                    prevMsg = msg;                    msg = msg.next;                &#125; while (msg != null &amp;&amp; !msg.isAsynchronous());            &#125;            if (msg != null) &#123;                if (now &lt; msg.when) &#123;                    //当异步消息触发时间大于当前时间，则设置下一次轮询的超时时长                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);                &#125; else &#123;                    // 获取一条消息，并返回                    mBlocked = false;                    if (prevMsg != null) &#123;                        prevMsg.next = msg.next;                    &#125; else &#123;                        mMessages = msg.next;                    &#125;                    msg.next = null;                    //设置消息的使用状态，即flags |= FLAG_IN_USE                    msg.markInUse();                    return msg;   //成功地获取MessageQueue中的下一条即将要执行的消息                &#125;            &#125; else &#123;                //没有消息                nextPollTimeoutMillis = -1;            &#125;         //消息正在退出，返回null            if (mQuitting) &#123;                dispose();                return null;            &#125;            ...............................    &#125;&#125;</code></pre><p>nativePollOnce是阻塞操作，其中nextPollTimeoutMillis代表下一个消息到来前，还需要等待的时长；当nextPollTimeoutMillis = -1时，表示消息队列中无消息，会一直等待下去。可以看出<code>next()</code>方法根据消息的触发时间，获取下一条需要执行的消息,队列中消息为空时，则会进行阻塞操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>消息机制主要包含部分：</p><p><code>Message</code>：需要传递的消息，可以传递数据；</p><p><code>MessageQueue</code>：消息队列，但是它的内部实现并不是用的队列，实际上是通过一个单链表的数据结构来维护消息列表，因为单链表在插入和删除上比较有优势。主要功能向消息池投递消息(MessageQueue.enqueueMessage)和取走消息池的消息(MessageQueue.next)；</p><p><code>Handler</code>：主要功能向消息池发送各种消息事件(Handler.sendMessage)和处理相应消息事件(Handler.handleMessage)；</p><p><code>Looper</code>：不断循环执行(Looper.loop)，从MessageQueue中读取消息，按分发机制将消息分发给目标处理者。</p><p>在主线程中,默认已经调用了<code>Looper.preper()</code>方法,调用该方法的目的是在Looper中创建MessageQueue成员变量并把Looper对象绑定到当前线程中。当调用Handler的<code>sendMessage()</code>方法的时候就将Message对象添加到了Looper创建的MessageQueue队列中，同时给Message指定了target对象，其实这个target对象就是Handler对象。主线程默认执行了<code>Looper.looper()</code>方法,该方法从Looper的成员变量MessageQueue中取出Message，然后调用Message的target对象的handleMessage()方法。这样就完成了整个消息机制。</p><p><strong>每个线程中只能存在一个Looper，Looper是保存在ThreadLocal中的。</strong>主线程（UI线程）已经创建了一个Looper，所以在主线程中不需要再创建Looper，但是在其他线程中需要创建Looper。<strong>每个线程中可以有多个Handler，即一个Looper可以处理来自多个Handler的消息。</strong> Looper中维护一个MessageQueue，来维护消息队列。MessageQueue有一组待处理的Message,消息队列中的Message可以来自不同的Handler。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="在Activity中使用Handler的时候如何去除警告信息"><a href="#在Activity中使用Handler的时候如何去除警告信息" class="headerlink" title="在Activity中使用Handler的时候如何去除警告信息"></a>在Activity中使用Handler的时候如何去除警告信息</h3><p>将Handler类声明为static，同时在Handler类中使用弱引用去引用Context对象。</p><pre><code>static class MyHandler extends Handler &#123;    private SoftReference&lt;Context&gt; srf;    public MyHandler(Context context) &#123;        srf = new SoftReference&lt;Context&gt;(context);    &#125;    @Override    public void handleMessage(Message msg) &#123;        Toast.makeText(srf.get(), msg.toString(), Toast.LENGTH_SHORT).show();    &#125;&#125;</code></pre><h3 id="Android中为什么主线程不会因为Looper-loop-里的死循环卡死"><a href="#Android中为什么主线程不会因为Looper-loop-里的死循环卡死" class="headerlink" title="Android中为什么主线程不会因为Looper.loop()里的死循环卡死"></a>Android中为什么主线程不会因为Looper.loop()里的死循环卡死</h3><p>主线程，我们是绝不希望会被运行一段时间，自己就退出，那么如何保证能一直存活呢？简单做法就是可执行代码是能一直执行下去的，死循环便能保证不会被退出，例如，binder线程也是采用死循环的方法，通过循环方式不同与Binder驱动进行读写操作，当然并非简单地死循环，无消息时会休眠。但这里可能又引发了另一个问题，既然是死循环又如何去处理其他事务呢？通过创建新线程的方式。</p><p><strong>真正会卡死主线程的操作是在回调方法onCreate/onStart/onResume等操作时间过长，会导致掉帧，甚至发生ANR，looper.loop本身不会导致应用卡死。</strong></p><p>ActivityThread实际上并非线程，ActivityThread并没有真正继承Thread类，只是往往运行在主线程，该人以线程的感觉，其实承载ActivityThread的主线程就是由Zygote fork而创建的进程。</p><p>主线程的死循环一直运行是不是特别消耗CPU资源呢？其实不然，这里就涉及到Linux pipe/epoll机制，简单说就是在主线程的MessageQueue没有消息时，便阻塞在loop的queue.next()中的nativePollOnce()方法里，此时主线程会释放CPU资源进入休眠状态，直到下个消息到达或者有事务发生，通过往pipe管道写端写入数据来唤醒主线程工作。主线程大多数时候都是处于休眠状态，并不会消耗大量CPU资源。</p><p>Activity的生命周期都是依靠主线程的Looper.loop，当收到不同Message时则采用相应措施：</p><p>在H.handleMessage(msg)方法中，根据接收到不同的msg，执行相应的生命周期。</p><p>比如收到msg=H.LAUNCH_ACTIVITY，则调用ActivityThread.handleLaunchActivity()方法，最终会通过反射机制，创建Activity实例，然后再执行Activity.onCreate()等方法。</p><h3 id="手写handler实现"><a href="#手写handler实现" class="headerlink" title="手写handler实现"></a>手写handler实现</h3><p><a href="https://github.com/AdamRight/TeaTool/tree/master/app/src/main/java/com/tea/teatool/teahandler">实现代码github</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义View</title>
    <link href="/2019/05/15/22.%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    <url>/2019/05/15/22.%E8%87%AA%E5%AE%9A%E4%B9%89View/</url>
    
    <content type="html"><![CDATA[<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>一个参数<code>(Context context)</code>的构造函数会在代码里面new的时候调用，</p><p>两个参数<code>(Context context, AttributeSet attrs)</code>的构造函数在布局layout中使用(调用)，</p><p>三个参数<code>(Context context, AttributeSet attrs, int defStyleAttr)</code>的构造函数在布局layout中使用(调用)，但是会有style。</p><pre><code>public MyView(Context context) &#123;    this(context, null);&#125;public MyView(Context context, AttributeSet attrs) &#123;    this(context, attrs, 0);&#125;public MyView(Context context, AttributeSet attrs, int defStyleAttr) &#123;    super(context, attrs, defStyleAttr);&#125;</code></pre><p><strong>xml布局通过LayoutInflate，解析的时候，实例化View是通过反射，显示加载到我们Activity。</strong></p><h2 id="measure"><a href="#measure" class="headerlink" title="measure"></a>measure</h2><p>布局的宽高都是由这个方法指定，需要测量，获取宽高的模式。</p><pre><code>@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;    super.onMeasure(widthMeasureSpec, heightMeasureSpec);    //获取宽高的模式    int widthMode = MeasureSpec.getMode(widthMeasureSpec);    int heightMode = MeasureSpec.getMode(heightMeasureSpec);    //获取宽高的值    int widthSize = MeasureSpec.getSize(widthMeasureSpec);// 获取后面30位    int heightSize = MeasureSpec.getSize(heightMeasureSpec);&#125;</code></pre><p>MeasureSpec：32位的二进制数字，前两位代表mode(测量模式)，后面30位才是他们的实际宽高的数值（size）。</p><p>三种模式：</p><blockquote><ul><li>MeasureSpec.UNSPECIFIED：二进制00，默认值，父控件没有给子view任何限制，子View可以设置为任意大小。 </li></ul></blockquote><blockquote><ul><li>MeasureSpec.EXACTLY：二进制01，表示父控件已经确切的指定了子View的大小。比如100dp、match_parent、fill_parent。</li></ul></blockquote><blockquote><ul><li>MeasureSpec.AT_MOST：二进制10，表示子View具体大小没有尺寸限制，但是存在上限，上限一般为父View大小。wrap_content。</li></ul></blockquote><p>一般情况，wrap_content，即MeasureSpec.AT_MOST才需要重新计算。<strong>onMeasure方法最终调用setMeasuredDimension确定宽高值。</strong></p><h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><h2 id="draw"><a href="#draw" class="headerlink" title="draw"></a>draw</h2><p>用于绘制</p><pre><code>@Overrideprotected void onDraw(Canvas canvas) &#123;    super.onDraw(canvas);    //canvas可以画文本、画弧、画圆等等&#125;</code></pre><h3 id="ViewGroup不会触发onDraw方法"><a href="#ViewGroup不会触发onDraw方法" class="headerlink" title="ViewGroup不会触发onDraw方法"></a>ViewGroup不会触发onDraw方法</h3><p>解决办法：</p><blockquote><p>方式一：把onDraw方法替换为dispatchDraw；方式二：设置透明的背景<code>setBackgroundColor(Color.TRANSPARENT);</code>;方式三：设置<code>setWillNotDraw(false);</code></p></blockquote><h3 id="主要三个方法"><a href="#主要三个方法" class="headerlink" title="主要三个方法"></a>主要三个方法</h3><p>onDraw绘制自己；dispatchDraw绘制孩子；绘制背景</p><pre><code>// Step 3, draw the contentif (!dirtyOpaque) onDraw(canvas);// Step 4, draw the childrendispatchDraw(canvas);// Step 6, draw decorations (foreground, scrollbars)onDrawForeground(canvas);</code></pre><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><pre><code>void moveTo (float x1, float y1):直线的开始点；即将直线路径的绘制点定在（x1,y1）的位置；void lineTo (float x2, float y2)：直线的结束点，又是下一次绘制直线路径的开始点；lineTo（）可以一直用；void close ():如果连续画了几条直线，但没有形成闭环，调用Close()会将路径首尾点连接起来，形成闭环；</code></pre><h2 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a>Paint</h2><h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><pre><code>setAntiAlias(true);//抗锯齿功能setColor(Color.RED);//设置画笔颜色//Style.FILL:填充内部;Style.FILL_AND_STROKE填充内部和描边;Style.STROKE仅描边setStyle(Style.FILL);//设置填充样式setStrokeWidth(30);//设置画笔宽度//参数：radius:阴影的倾斜度;dx:水平位移;dy:垂直位移setShadowLayer(float radius, float dx, float dy, int color)//添加阴影//设置线冒样式，Cap.ROUND(圆形线冒)、Cap.SQUARE(方形线冒)、Paint.Cap.BUTT(无线冒) setStrokeCap(Paint.Cap cap) setAlpha(int a) //设置画笔透明度 reset() //重置画笔</code></pre><h3 id="和文字相关"><a href="#和文字相关" class="headerlink" title="和文字相关"></a>和文字相关</h3><pre><code>//相对位置paint.setTextAlign(Paint.Align.LEFT);//Paint.Align.LEFT、Paint.Align.CENTER、Paint.Align.RIGHTsetTextSize(float textSize) //设置文字大小 setFakeBoldText(boolean fakeBoldText) //设置是否为粗体文字 setStrikeThruText(boolean strikeThruText) //设置带有删除线效果 setUnderlineText(boolean underlineText) //设置下划线 setTextSkewX(float skewX) //设置字体水平倾斜度，普通斜体字是-0.25，可见往右斜</code></pre><h2 id="draw图形"><a href="#draw图形" class="headerlink" title="draw图形"></a>draw图形</h2><h3 id="画点"><a href="#画点" class="headerlink" title="画点"></a>画点</h3><pre><code>//参数：float X：点的X坐标； float Y：点的Y坐标drawPoint (float x, float y, Paint paint)</code></pre><h3 id="多个点"><a href="#多个点" class="headerlink" title="多个点"></a>多个点</h3><pre><code>//参数：pts:点的合集｛x1,y1,x2,y2,x3,y3,……｝;  offset:集合中跳过的数值个数，//注意不是点的个数,一个点是两个数值; count:参与绘制的数值的个数。drawPoints (float[] pts, Paint paint)drawPoints (float[] pts, int offset, int count, Paint paint)</code></pre><h3 id="画直线"><a href="#画直线" class="headerlink" title="画直线"></a>画直线</h3><pre><code>//参数：startX:开始点X坐标;  startY:开始点Y坐标;  stopX:结束点X坐标;  stopY:结束点Y坐标drawLine (float startX, float startY, float stopX, float stopY, Paint paint)</code></pre><h3 id="多条直线"><a href="#多条直线" class="headerlink" title="多条直线"></a>多条直线</h3><pre><code>//参数：pts是点的集合，每两个点形成一条直线，pts的组织方式为｛x1,y1,x2,y2,x3,y3,……｝drawLines (float[] pts, Paint paint)drawLines (float[] pts, int offset, int count, Paint paint)</code></pre><h3 id="矩形工具类RectF和Rect"><a href="#矩形工具类RectF和Rect" class="headerlink" title="矩形工具类RectF和Rect"></a>矩形工具类RectF和Rect</h3><pre><code>//根据四个点构造出一个矩形；RectF(float left, float top, float right, float bottom)Rect(int left, int top, int right, int bottom)</code></pre><h3 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h3><pre><code>drawRect (float left, float top, float right, float bottom, Paint paint)drawRect (RectF rect, Paint paint)drawRect (Rect r, Paint paint)</code></pre><h3 id="画圆角矩形"><a href="#画圆角矩形" class="headerlink" title="画圆角矩形"></a>画圆角矩形</h3><pre><code>//参数：rx:生成圆角的椭圆的X轴半径； ry:生成圆角的椭圆的Y轴半径drawRoundRect (RectF rect, float rx, float ry, Paint paint)</code></pre><h3 id="画圆形"><a href="#画圆形" class="headerlink" title="画圆形"></a>画圆形</h3><pre><code>//参数：cx：圆心点X轴坐标 ; cy：圆心点Y轴坐标; radius：圆的半径drawCircle (float cx, float cy, float radius, Paint paint)</code></pre><h3 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h3><pre><code>//椭圆是根据矩形生成的，以矩形的长为椭圆的X轴，矩形的宽为椭圆的Y轴，建立的椭圆图形drawOval (RectF oval, Paint paint)</code></pre><h3 id="画弧"><a href="#画弧" class="headerlink" title="画弧"></a>画弧</h3><p>弧当然也是根据矩形来生成的</p><pre><code>//参数：oval:生成椭圆的矩形;  startAngle：弧开始的角度，X轴正方向为0度,顺时针为正;//sweepAngle：弧持续的角度,顺时针; useCenter:是否有弧的两边，True，有两边，False，只有一条弧。drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</code></pre><h3 id="画三角"><a href="#画三角" class="headerlink" title="画三角"></a>画三角</h3><pre><code>if (mPath == null) &#123;    // 画路径    mPath = new Path();    mPath.moveTo(getWidth() / 2, 0);    mPath.lineTo(0, (float) ((getWidth()/2)*Math.sqrt(3)));    mPath.lineTo(getWidth(), (float) ((getWidth()/2)*Math.sqrt(3)));    mPath.close();// 把路径闭合&#125;canvas.drawPath(mPath, mPaint);</code></pre><h3 id="画图片"><a href="#画图片" class="headerlink" title="画图片"></a>画图片</h3><pre><code>canvas.drawBitmap(bitmap, x, y, paint);</code></pre><h3 id="drawText画文字"><a href="#drawText画文字" class="headerlink" title="drawText画文字"></a>drawText画文字</h3><pre><code>//text:要绘制的文字; x：绘制原点x坐标; y：基线y坐标; paint:用来做画的画笔drawText(String text, float x, float y, Paint paint)</code></pre><p>从上往下依次为：top、ascent、baseLine、descent、bottom。</p><pre><code>Paint paint = new Paint();Paint.FontMetrics fm = paint.getFontMetrics();Paint.FontMetricsInt fmInt = paint.getFontMetricsInt();</code></pre><p>FontMetricsInt和FontMetrics完全相同，只是得到的值的类型不一样而已，FontMetricsInt中的四个成员变量的值都是Int类型，而FontMetrics得到的四个成员变量的值则都是float类型的。</p><p>获取基线</p><pre><code>Paint.FontMetricsInt fontMetrics = paint.getFontMetricsInt();int dy = (fontMetrics.bottom - fontMetrics.top) / 2 - fontMetrics.bottom;int baseLine = getHeight() / 2 + dy;</code></pre><p>获取文字宽度</p><pre><code>int width = paint.measureText(String text);</code></pre><h2 id="onTouch"><a href="#onTouch" class="headerlink" title="onTouch"></a>onTouch</h2><p>处理跟用户交互，手指触摸，事件分发事件拦截等等。</p><pre><code>@Overridepublic boolean onTouchEvent(MotionEvent event) &#123;    switch (event.getAction()) &#123;        case MotionEvent.ACTION_DOWN:            // 手指按下            break;        case MotionEvent.ACTION_MOVE:            // 手指移动            break;        case MotionEvent.ACTION_UP:            // 手指抬起            break;    &#125;    return super.onTouchEvent(event);&#125;</code></pre><p>可以通过<code>event.getX()</code>获取相对于当前控件的位置,<code>event.getRawX()</code>获取距离屏幕的x位置。</p><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>在res/values下面新建attrs.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;!--name 自定义View的名字MyView--&gt;    &lt;declare-styleable name=&quot;MyView&quot;&gt;        &lt;!-- name属性名称        format格式: string 文字、color 颜色、dimension 宽高 字体大小、                     integer 数字、reference 资源（drawable）--&gt;        &lt;attr name=&quot;myText&quot; format=&quot;string&quot;/&gt;        &lt;attr name=&quot;myTextColor&quot; format=&quot;color&quot;/&gt;        &lt;attr name=&quot;myTextSize&quot; format=&quot;dimension&quot;/&gt;        &lt;attr name=&quot;myMaxLength&quot; format=&quot;integer&quot;/&gt;        &lt;attr name=&quot;myBackground&quot; format=&quot;reference|color&quot;/&gt;        &lt;!-- 枚举 --&gt;        &lt;attr name=&quot;myInputType&quot;&gt;            &lt;enum name=&quot;number&quot; value=&quot;1&quot;/&gt;            &lt;enum name=&quot;text&quot; value=&quot;2&quot;/&gt;            &lt;enum name=&quot;password&quot; value=&quot;3&quot;/&gt;        &lt;/attr&gt;    &lt;/declare-styleable&gt;&lt;/resources&gt;</code></pre><p>在布局中使用，声明命名空间，然后在自己的自定义View中使用</p><pre><code>xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&lt;com.view.MyView            app:myText=&quot;jt&quot;            app:myTextColor=&quot;@color/colorAccent&quot;            android:layout_width=&quot;wrap_content&quot;            android:layout_height=&quot;wrap_content&quot; /&gt;</code></pre><p>在自定义View中获取属性</p><pre><code>//获取自定义属性TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.MyView);mText = array.getString(R.styleable.MyView_myText);mTextColor = array.getColor(R.styleable.MyView_myTextColor, mTextColor);mTextSize = array.getDimensionPixelSize(R.styleable.MyView_myTextSize, mTextSize);//回收array.recycle();</code></pre><p>系统有的自定义属性，我们是不能重新定义。</p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h3 id="onFinishInflate"><a href="#onFinishInflate" class="headerlink" title="onFinishInflate"></a>onFinishInflate</h3><p>setContentView布局解析完毕之后会执行这个方法。而View的绘制流程是在Activity的onResume()之后才调用的。</p><h3 id="requestDisallowInterceptTouchEvent"><a href="#requestDisallowInterceptTouchEvent" class="headerlink" title="requestDisallowInterceptTouchEvent"></a>requestDisallowInterceptTouchEvent</h3><p>改变的其实就是mGroupFlags的值</p><pre><code>//事件分发//dispatchTouchEvent-&gt;onInterceptTouchEvent-&gt;onTouchEvent@Overridepublic boolean dispatchTouchEvent(MotionEvent ev) &#123;    //请求所有父控件及祖宗控件不要拦截事件    getParent().requestDisallowInterceptTouchEvent(true);    return super.dispatchTouchEvent(ev);&#125;</code></pre><h3 id="canChildScrollUp"><a href="#canChildScrollUp" class="headerlink" title="canChildScrollUp"></a>canChildScrollUp</h3><p>SwipeRefreshLayout中方法，判断是否滚动到了最顶部。</p><pre><code>public boolean canChildScrollUp() &#123;    if (mChildScrollUpCallback != null) &#123;        return mChildScrollUpCallback.canChildScrollUp(this, mTarget);    &#125;    if (android.os.Build.VERSION.SDK_INT &lt; 14) &#123;        if (mTarget instanceof AbsListView) &#123;            final AbsListView absListView = (AbsListView) mTarget;            return absListView.getChildCount() &gt; 0                    &amp;&amp; (absListView.getFirstVisiblePosition() &gt; 0 || absListView.getChildAt(0)                            .getTop() &lt; absListView.getPaddingTop());        &#125; else &#123;            return ViewCompat.canScrollVertically(mTarget, -1) || mTarget.getScrollY() &gt; 0;        &#125;    &#125; else &#123;        return ViewCompat.canScrollVertically(mTarget, -1);    &#125;&#125;</code></pre><h3 id="GestureDetector"><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h3><p>快速滑动，手势处理。</p><h2 id="在ScrollView中嵌入ListView"><a href="#在ScrollView中嵌入ListView" class="headerlink" title="在ScrollView中嵌入ListView"></a>在ScrollView中嵌入ListView</h2><p>在ScrollView添加一个ListView会导致listview控件显示不全，通常只会显示一条，这是因为两个控件的滚动事件冲突导致。</p><p>ListView,ScrollView在测量子布局的时候会用UNSPECIFIED,需要重写listview中的onMeasure。</p><pre><code>@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;    // 解决显示不全的问题    heightMeasureSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE&gt;&gt; 2,MeasureSpec.AT_MOST);    //heightMeasureSpec：32位的值，30位 是 Integer.MAX_VALUE，2位是MeasureSpec.AT_MOST    super.onMeasure(widthMeasureSpec, heightMeasureSpec);&#125;</code></pre><h2 id="invalidate源码分析"><a href="#invalidate源码分析" class="headerlink" title="invalidate源码分析"></a>invalidate源码分析</h2><p><code>invlidate()</code>一路向上，不断调用<code>invalidateChild(this, damage)</code>，调到最外层<code>ViewRootImpl</code>。最外层调用<code>draw()</code>、<code>dispatchDraw()</code>,一路往下画,最终画到当前调用invaldate的View的<code>onDraw()</code>方法。invlidate() 牵连着整个layout布局中的View。</p><p>ViewRootImpl中的重要方法</p><pre><code>performTraversals()、performMeasure()、performLayout()、performDraw()</code></pre><h3 id="为什么不能在子线程中更新UI"><a href="#为什么不能在子线程中更新UI" class="headerlink" title="为什么不能在子线程中更新UI"></a>为什么不能在子线程中更新UI</h3><p>ViewRootImpl中checkThread()方法用来检测线程。</p><pre><code>if (mThread != Thread.currentThread()) &#123;                throw new CalledFromWrongThreadException(                        &quot;Only the original thread that created a view hierarchy can touch its views.&quot;);&#125;</code></pre><p>mThread在构造函数中初始化的主线程mainThread</p><h2 id="View的绘制流程"><a href="#View的绘制流程" class="headerlink" title="View的绘制流程"></a>View的绘制流程</h2><p>setContentView创建DecorView，把我们的布局加载到了DecorView。</p><p>Activity的启动流程 </p><pre><code>performLaunchActivity -&gt; Activity.onCreate()handleResumeActivity() -&gt; performResumeActivity() -&gt; Activity的onResume()方法   -&gt; wm.addView(decor, l);  才开始把我们的 DecorView 加载到 WindowManager, -&gt; View的绘制流程在这个时候才开始 measure() layout() draw()</code></pre><p>addView</p><pre><code>wm.addView(decor, l); -&gt;  WindowManangerImpl.addView()-&gt; root.setView(view, wparams, panelParentView);  -&gt; requestLayout() -&gt; scheduleTraversals()-&gt; doTraversal() -&gt; performTraversals() </code></pre><p>onmeasure:测量是从外往里递归</p><pre><code>performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);-&gt; mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);-&gt; onMeasure(widthMeasureSpec, heightMeasureSpec); 测量开始 -&gt; measureVertical(int widthMeasureSpec, int heightMeasureSpec)-&gt; measureChildWithMargins</code></pre><p>childWidthMeasureSpec,childHeightMeasureSpec测量模式是通过getChildMeasureSpec计算。调用setMeasuredDimension()这个时候我们布局才真正指定宽度和高度，mMeasuredWidth和mMeasuredHeight才开始有值。</p><p>layout:摆放子布局for循环所有子View, 前提不是GONE，调用child.layout()</p><pre><code>performLayout ：View -&gt; layout() -&gt; onLayout()</code></pre><p>draw</p><pre><code>performDraw() : View -&gt; draw() -&gt; drawBackground();//画背景 onDraw(canvas);// 画自己 ViewGroup 默认情况下不会调用dispatchDraw(canvas);// 画子View 不断的循环调用子View的 draw()</code></pre><p>流程小结：</p><blockquote><p>第一步performMeasure()：用于指定和测量layout中所有控件的宽高，对于ViewGroup,先去测量里面的子孩子，根据子孩子的宽高再来计算和指定自己的宽高，对于View,它的宽高是由自己和父布局决定的。</p></blockquote><blockquote><p>第二步performLayout(): 用于摆放子布局,for循环所有子View,用child.layout()摆放ChildView。</p></blockquote><blockquote><p>第三步performDraw(): 用于绘制自己还有子View,对于ViewGroup首先绘制自己的背景,for循环绘制子View调用子View的draw()方法, 对于View绘制自己的背景，绘制自己显示的内容（TextView）。</p></blockquote><p>细节:</p><blockquote><p>View的绘制流程是在onResume() 之后才开始，如果要获取View的高度，前提肯定需要调用测量方法，测量完毕之后才能获取宽高。</p></blockquote><blockquote><p>addView、setVisibility、等，会调用requestLayout()重新走一遍View的绘制流程。</p></blockquote><h2 id="View的Touch事件分发"><a href="#View的Touch事件分发" class="headerlink" title="View的Touch事件分发"></a>View的Touch事件分发</h2><p>自定义view</p><pre><code>@Overridepublic boolean onTouchEvent(MotionEvent event) &#123;    Log.e(&quot;TAG&quot;,&quot;onTouchEvent -&gt; &quot;+event.getAction());    return super.onTouchEvent(event);&#125;</code></pre><p>添加listener</p><pre><code>view.setOnTouchListener(new View.OnTouchListener() &#123;    @Override    public boolean onTouch(View v, MotionEvent event) &#123;        Log.e(&quot;TAG&quot;, &quot;onTouch -&gt; &quot; + event.getAction());        return false;    &#125;&#125;);view.setOnClickListener(new View.OnClickListener() &#123;    @Override    public void onClick(View v) &#123;        Log.e(&quot;TAG&quot;, &quot;onClick&quot;);    &#125;&#125;);</code></pre><p>现象：</p><p>OnTouchListener返回false时：</p><pre><code>OnTouchListener.DOWN -&gt; onTouchEvent.DOWN -&gt; OnTouchListener.MOVE -&gt; onTouchEvent.MOVE -&gt; OnTouchListener.UP-&gt;onTouchEvent.UP-&gt; OnClickListener</code></pre><p>OnTouchListener返回true时：</p><pre><code>OnTouchListener.DOWN -&gt; OnTouchListener.MOVE -&gt; OnTouchListener.UP</code></pre><p>OnTouchListener没有，onTouchEvent返回true时：</p><pre><code>onTouchEvent.DOWN -&gt; onTouchEvent.MOVE -&gt; onTouchEvent.UP</code></pre><p>自定义view中添加dispatchTouchEvent时候，如果不写super，就什么都不走了：</p><pre><code>@Overridepublic boolean dispatchTouchEvent(MotionEvent event) &#123;    //super.dispatchTouchEvent(event);    return true;&#125;</code></pre><h3 id="dispatchTouchEvent事件分发"><a href="#dispatchTouchEvent事件分发" class="headerlink" title="dispatchTouchEvent事件分发"></a>dispatchTouchEvent事件分发</h3><pre><code>ListenerInfo li = mListenerInfo;  </code></pre><p>ListenerInfo: 存放了关于View的所有Listener信息，如：OnTouchListener、OnClickListener。</p><pre><code>boolean result = false;if (li != null &amp;&amp; li.mOnTouchListener != null     &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED     //是否是enable    &amp;&amp; li.mOnTouchListener.onTouch(this, event)) &#123;//如果onTouch是false，result=false；如果是true，result=true        result = true;&#125;if (!result &amp;&amp; onTouchEvent(event)) &#123;//如果result=false就会执行onTouchEvent，如果result=true就不会执行onTouchEvent        result = true;&#125;return result;</code></pre><p>在View的onTouchEvent中的<code>case MotionEvent.ACTION_UP</code>:里面调用了<code>performClick()</code>添加了点击事件<code>li.mOnClickListener.onClick(this)</code>。</p><h3 id="onTouchEvent方法"><a href="#onTouchEvent方法" class="headerlink" title="onTouchEvent方法"></a>onTouchEvent方法</h3><h2 id="ViewGroup的事件分发"><a href="#ViewGroup的事件分发" class="headerlink" title="ViewGroup的事件分发"></a>ViewGroup的事件分发</h2><p>自定义View和上面view一样，自定义ViewGroup：</p><pre><code>@Overridepublic boolean dispatchTouchEvent(MotionEvent ev) &#123;    Log.e(&quot;TAG&quot;, &quot;ViewGroup dispatchTouchEvent -&gt; &quot; + ev.getAction());    return super.dispatchTouchEvent(ev);&#125;@Overridepublic boolean onInterceptTouchEvent(MotionEvent ev) &#123;    Log.e(&quot;TAG&quot;, &quot;ViewGroup onInterceptTouchEvent -&gt; &quot; + ev.getAction());    return super.onInterceptTouchEvent(ev);&#125;@Overridepublic boolean onTouchEvent(MotionEvent event) &#123;    Log.e(&quot;TAG&quot;, &quot;ViewGroup onTouchEvent -&gt; &quot; + event.getAction());    return super.onTouchEvent(event);&#125;</code></pre><p>自定义ViewGroup包裹自定义View，点击View时候：</p><pre><code>DOWN -&gt; ViewGroup.dispatchTouchEvent -&gt; ViewGroup.onInterceptTouchEvent -&gt; View.dispatchTouchEvent -&gt; View.onTouch -&gt; View.onTouchEvent -&gt;MOVE -&gt; ViewGroup.dispatchTouchEvent -&gt; ViewGroup onInterceptTouchEvent -&gt; View.dispatchTouchEvent -&gt; View.onTouch -&gt; View.onTouchEvent -&gt;Up  -&gt; ViewGroup.dispatchTouchEvent -&gt; ViewGroup onInterceptTouchEvent -&gt; View.dispatchTouchEvent -&gt; View.onTouch -&gt; View.onTouchEvent -&gt; View.onclick</code></pre><p>去掉自定义View的onClick：</p><pre><code>ViewGroup.dispatchTouchEvent -&gt; ViewGroup.onInterceptTouchEvent -&gt; View.dispatchTouchEvent -&gt; View.onTouch -&gt; View onTouchEvent -&gt; ViewGroup.onTouchEvent</code></pre><p>自定义View的onTouchEvent()方法里面返回true时：</p><pre><code>DOWN -&gt; ViewGroup.dispatchTouchEvent -&gt; ViewGroup.onInterceptTouchEvent -&gt; View.dispatchTouchEvent -&gt; View.onTouch -&gt; View.onTouchEvent -&gt;MOVE -&gt; ViewGroup.dispatchTouchEvent -&gt; ViewGroup onInterceptTouchEvent -&gt; View.dispatchTouchEvent -&gt; View.onTouch -&gt; View.onTouchEvent -&gt;Up  -&gt; ViewGroup.dispatchTouchEvent -&gt; ViewGroup onInterceptTouchEvent -&gt; View.dispatchTouchEvent -&gt; View.onTouch -&gt; View.onTouchEvent</code></pre><p>自定义ViewGroup的onInterceptTouchEvent()返回true时：</p><pre><code>ViewGroup.dispatchTouchEvent -&gt; ViewGroup.onInterceptTouchEvent -&gt; ViewGroup.onTouchEvent</code></pre><h3 id="dispatchTouchEvent"><a href="#dispatchTouchEvent" class="headerlink" title="dispatchTouchEvent"></a>dispatchTouchEvent</h3><h3 id="onInterceptTouchEvent"><a href="#onInterceptTouchEvent" class="headerlink" title="onInterceptTouchEvent"></a>onInterceptTouchEvent</h3><p>onInterceptTouchEvent()默认情况下返回false。</p><h3 id="onTouchEvent"><a href="#onTouchEvent" class="headerlink" title="onTouchEvent"></a>onTouchEvent</h3><p>如果子View没有一个地方返回true,只会进来一次只会响应DOWN事件,代表不需要消费该事件,如果你想响应MOVE,UP必须找个地方ture。</p><p>对于ViewGroup,如果想拦截子View的Touch事件,可以覆写onInterceptTouchEvent返回true,执行该ViewGroup的onTouchEvent方法;如果子View没有消费Touch事件,也会调用该ViewGroup的onTouchEvent方法。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>view</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程和线程池</title>
    <link href="/2019/05/13/21.%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2019/05/13/21.%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>两种方法：</p><blockquote><ul><li>继承Thread类</li><li>实现Runnable接口</li></ul></blockquote><p>共同点：都要用start()开启线程</p><h3 id="创建子线程方式1："><a href="#创建子线程方式1：" class="headerlink" title="创建子线程方式1："></a>创建子线程方式1：</h3><hr><pre><code>Thread thread = new Thread() &#123;    @Override    public void run() &#123;        //super.run();        System.out.println(&quot;Thread started!&quot;);    &#125;&#125;;thread.start();</code></pre><p>start调用了native方法。</p><p>或者</p><pre><code>class MyThread1 extends Thread&#123;    @Override    public void run() &#123;        super.run();        System.out.println(&quot;MyThread1:&quot;+Thread.currentThread().getName());    &#125;&#125;new MyThread1().start();//创建并启动线程</code></pre><hr><h3 id="创建子线程方式2："><a href="#创建子线程方式2：" class="headerlink" title="创建子线程方式2："></a>创建子线程方式2：</h3><hr><pre><code>Runnable runnable = new Runnable() &#123;    @Override    public void run() &#123;        System.out.println(&quot;Thread with Runnable started!&quot;);    &#125;&#125;;Thread thread = new Thread(runnable);thread.start();</code></pre><p>或者</p><pre><code>class MyThread2 implements Runnable&#123;    @Override    public void run() &#123;        System.out.println(&quot;MyThread2:&quot;+Thread.currentThread().getName());    &#125;&#125;new Thread(new MyThread2()).start();//创建并启动线程//或者new Thread(new Runnable() &#123;    @Override    public void run() &#123;        System.out.println(&quot;MyThread3:&quot;+Thread.currentThread().getName());    &#125;&#125;).start();</code></pre><hr><h3 id="ThreadFactory"><a href="#ThreadFactory" class="headerlink" title="ThreadFactory"></a>ThreadFactory</h3><hr><pre><code>ThreadFactory factory = new ThreadFactory() &#123;    AtomicInteger count = new AtomicInteger(0);    @Override    public Thread newThread(Runnable r) &#123;        return new Thread(r, &quot;Thread-&quot; + count.incrementAndGet());    &#125;&#125;;Runnable runnable = new Runnable() &#123;    @Override    public void run() &#123;        System.out.println(Thread.currentThread().getName() + &quot; started!&quot;);    &#125;&#125;;Thread thread = factory.newThread(runnable);thread.start();Thread thread1 = factory.newThread(runnable);thread1.start();</code></pre><hr><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><hr><pre><code>Runnable runnable = new Runnable() &#123;    @Override    public void run() &#123;        System.out.println(&quot;Thread with Runnable started!&quot;);    &#125;&#125;;Executor executor = Executors.newCachedThreadPool();executor.execute(runnable);executor.execute(runnable);executor.execute(runnable);</code></pre><p>除了newCachedThreadPool还有newSingleThreadExecutor单线程池、newFixedThreadPool指定固定线程数的线程池。</p><pre><code>ExecutorService executor = Executors.newFixedThreadPool(20);for (Bitmap bitmap : bitmaps) &#123;     executor.execute(bitmapProcessor(bitmap));&#125;executor.shutdown();</code></pre><hr><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><hr><p>synchronized 的本质:保证方法内部或代码块内部资源（数据）的互斥访问。<strong>即同一时间、由同一个Monitor监视的代码，最多只能有一个线程在访问</strong>。</p><blockquote><p>synchronized定义在方法上，Monitor默认指定的是这个类；方法中使用<code>synchronized(this)</code>,Monitor指定的也是这个类；如果想更换Monitor，就要把this换成其他对象。即多个线程，访问同一个类的多个方法，就要处理Monitor是不是同一个。</p></blockquote><p>如果线程1正在访问count方法，那么线程2无法访问到minus方法，因为两个方法是同一个Monitor：</p><pre><code>private synchronized void count(int newValue) &#123;    x = newValue;    y = newValue;&#125;private void minus(int delta) &#123;    synchronized (this) &#123;        x -= delta;        y -= delta;    &#125;&#125;</code></pre><p>如果线程1正在访问count方法，线程2可以访问到minus方法，因为两个方法不是同一个Monitor，是两个Monitor：</p><pre><code>private final Object monitor1 = new Object();private synchronized void count(int newValue) &#123;    x = newValue;    y = newValue;&#125;private void minus(int delta) &#123;    synchronized (monitor1) &#123;        x -= delta;        y -= delta;    &#125;&#125;</code></pre><p>保证线程之间对监视资源的数据同步。即，任何线程在获取到 Monitor 后的第一时间，会先将共享内存中的数据复制到自己的缓存中；任何线程在释放 Monitor 的第一时间，会先将缓存中的数据复制到共享内存中。</p><hr><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><hr><p>保证加了 volatile 关键字的字段的操作具有原子性和同步性，其中原子性相当于实现了针对单一字段的线程间互斥访问。因此 volatile 可以看做是简化版的 synchronized。</p><p>volatile 只对<strong>基本类型</strong> (byte、char、short、int、long、float、double、boolean) 的赋值操作和<strong>对象的引用</strong>赋值操作有效。</p><p>原子性是cup执行的最小单位。</p><hr><h3 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h3><hr><p>java.util.concurrent.atomic 包：</p><p>下面有 AtomicInteger AtomicBoolean 等类，作用和 volatile 基本一致，可以看做是通用版的 volatile。</p><pre><code>AtomicInteger atomicInteger = new AtomicInteger(0);...atomicInteger.getAndIncrement();</code></pre><hr><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><hr><p>同样是「加锁」机制。但使用方法更灵活，同时也更麻烦一些。</p><pre><code>Lock lock = new ReentrantLock();...lock.lock();try &#123;    x++;&#125; finally &#123;    lock.unlock();&#125;</code></pre><p>一般并不会只是使用Lock，而是会使用更复杂的锁ReentrantReadWriteLock：</p><pre><code>public class ReadWriteLockDemo &#123;    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    Lock readLock = lock.readLock();    Lock writeLock = lock.writeLock();    private int x = 0;    private void count() &#123;        writeLock.lock();        try &#123;            x++;        &#125; finally &#123;            writeLock.unlock();        &#125;    &#125;    private void print(int time) &#123;        readLock.lock();        try &#123;            for (int i = 0; i &lt; time; i++) &#123;                System.out.print(x + &quot; &quot;);            &#125;            System.out.println();        &#125; finally &#123;            readLock.unlock();        &#125;    &#125;    public void runTest() &#123;        new Thread() &#123;            @Override            public void run() &#123;                for (int i = 0; i &lt; 1_000_000; i++) &#123;                    count();                &#125;                System.out.println(&quot;final x from 1: &quot; + x);            &#125;        &#125;.start();        new Thread() &#123;            @Override            public void run() &#123;                print(1);            &#125;        &#125;.start();        new Thread() &#123;            @Override            public void run() &#123;                print(2);            &#125;        &#125;.start();        new Thread() &#123;            @Override            public void run() &#123;                print(3);            &#125;        &#125;.start();        new Thread() &#123;            @Override            public void run() &#123;                print(4);            &#125;        &#125;.start();        new Thread() &#123;            @Override            public void run() &#123;                print(5);            &#125;        &#125;.start();    &#125;&#125;</code></pre><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><p>在未达到目标时 wait();用 while 循环检查;设置完成后 notifyAll();wait() 和 notify() / notifyAll() 都需要放在同步代码块里。</p><pre><code>public class WaitDemo &#123;    private String sharedString;    private synchronized void initString() &#123;        sharedString = &quot;kkk&quot;;        notifyAll();    &#125;    private synchronized void printString() &#123;        while (sharedString == null) &#123;            try &#123;                wait();            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        System.out.println(&quot;String: &quot; + sharedString);    &#125;    public void runTest() &#123;        final Thread thread1 = new Thread() &#123;            @Override            public void run() &#123;                try &#123;                    Thread.sleep(500);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125;                printString();            &#125;        &#125;;        thread1.start();        Thread thread2 = new Thread() &#123;            @Override            public void run() &#123;                Thread.yield();                try &#123;                    Thread.sleep(1000);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125;                initString();            &#125;        &#125;;        thread2.start();    &#125;&#125;</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Service：后台任务的活动空间。适用场景：音乐播放器等。IntentService：执行单个任务后自动关闭的 Service。</p><p>如果在界面组件里创建 Executor 或者 HandlerThread，记得要在关闭的时候（例如Activity.onDestroy() ）关闭 Executor 和 HandlerThread。</p><pre><code>@Overrideprotected void onDestroy() &#123; super.onDestroy(); executor.shutdown();&#125;@Overrideprotected void onDestroy() &#123; super.onDestroy(); handlerThread.quit(); // 这个其实就是停⽌ Looper 的循环&#125;</code></pre><hr><h2 id="线程池ThreadPoolExecutor"><a href="#线程池ThreadPoolExecutor" class="headerlink" title="线程池ThreadPoolExecutor"></a>线程池ThreadPoolExecutor</h2><p>构造方法参数</p><pre><code>public ThreadPoolExecutor(int corePoolSize,                          int maximumPoolSize,                          long keepAliveTime,                          TimeUnit unit,                          BlockingQueue&lt;Runnable&gt; workQueue,                          ThreadFactory threadFactory,                          RejectedExecutionHandler handler)</code></pre><blockquote><ul><li>corePoolSize：线程基本大小</li><li>maximumPoolSize：线程池最大所能容纳线程大小</li><li>keepAliveTime：线程活动保持时间</li><li>workQueue：阻塞队列</li><li>threadFactory创建线程的工厂</li><li>handler：饱和策略</li></ul></blockquote><h2 id="手动创建线程池"><a href="#手动创建线程池" class="headerlink" title="手动创建线程池"></a>手动创建线程池</h2><p>仿照AsyncTask源码，写个线程池。缓存队列Runnable，加入到线程队列中去执行。</p><pre><code>public class ThreadPoolDemo &#123;    static ThreadPoolExecutor threadPoolExecutor;    private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new LinkedBlockingQueue&lt;&gt;(128);    static &#123;        threadPoolExecutor = new ThreadPoolExecutor(                4,// 核心线程数，就是线程池里面的核心线程数量                10, // 最大线程数，线程池中的最大线程数                60,// 线程存活的时间，没事干的时候的空闲存活时间，超过这个时间线程就会被销毁                TimeUnit.SECONDS,// 线程存活时间的单位                sPoolWorkQueue,// 线程队列                new ThreadFactory() &#123;//线程创建工厂，如果线程池需要创建线程就会调用newThread 来创建                    @Override                    public Thread newThread(@NonNull Runnable r) &#123;//                        Thread thread = new Thread(r,&quot;自己线程的名字&quot;);//                        thread.setDaemon(false); // 不是守护线程                        return new Thread(r);                    &#125;                &#125;);    &#125;    public static void main(String[] args) &#123;        for (int i = 0; i &lt; 20; i++) &#123;            Runnable runnable = new Runnable() &#123;                @Override                public void run() &#123;                    try &#123;                        Thread.sleep(2000);                    &#125; catch (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                    System.out.println(&quot;下载图片显示完毕&quot;+Thread.currentThread().getName());                &#125;            &#125;;            // 加入线程队列，寻找合适的时机去执行            threadPoolExecutor.execute(runnable);        &#125;    &#125;&#125;</code></pre><p>输出结果：</p><p><img src="/2019/05/13/21.%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/21.线程和线程池/1.gif" alt></p><blockquote><p>Runnable缓存队列大于WorkQueue线程队列就可能会报错。</p></blockquote><h3 id="workQueue的参数"><a href="#workQueue的参数" class="headerlink" title="workQueue的参数"></a>workQueue的参数</h3><pre><code>BlockingQueue: 先进先出的一个队列 FIFO（rxjava，AsyncTask）SynchronousQueue: 线程安全的队列，它里面是没有固定的缓存的（OKHttp所使用的）PriorityBlockingQueue: 无序的可以根据优先级进行排序，指定的对象要实现Comparable作比较</code></pre><p>有限队列<code>SynchronousQueue</code>和<code>ArrayBlockingQueue</code>；无限队列<code>LinkedBloackingQueue</code>。</p><p>PriorityBlockingQueue示例</p><pre><code>public class Request implements Runnable,Comparable&lt;Request&gt;&#123;    @Override    public void run() &#123;        System.out.println(&quot;run&quot;);    &#125;    @Override    public int compareTo(@NonNull Request o) &#123;        return 0;    &#125;&#125;public class ThreadPoolTest &#123;    static ThreadPoolExecutor threadPoolExecutor;    private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new PriorityBlockingQueue&lt;Runnable&gt;(4);    static &#123;        threadPoolExecutor = new ThreadPoolExecutor(                4,// 核心线程数，就是线程池里面的核心线程数量                10, // 最大线程数，线程池中的最大线程数                60,// 线程存活的时间，没事干的时候的空闲存活时间，超过这个时间线程就会被销毁                TimeUnit.SECONDS,// 线程存活时间的单位                sPoolWorkQueue,// 线程队列                new ThreadFactory() &#123;// 线程创建工厂，如果线程池需要创建线程就会调用 newThread 来创建                    @Override                    public Thread newThread(@NonNull Runnable r) &#123;                        return new Thread(r);                    &#125;                &#125;);    &#125;    public static void main(String[] args) &#123;        for (int i = 0; i &lt; 20; i++) &#123;            Request request = new Request();            // 加入线程队列，寻找合适的时机去执行            threadPoolExecutor.execute(request);        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Node</title>
    <link href="/2019/04/26/17.%E5%AD%A6%E4%B9%A0node/"/>
    <url>/2019/04/26/17.%E5%AD%A6%E4%B9%A0node/</url>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>官网：</p><pre><code>https://nodejs.org/en/</code></pre><p>检查安装版本</p><pre><code>node --version</code></pre><p>Node.js既不是语言，也不是框架，它是一个平台。Node.js 中的 JavaScript没有 BOM、DOM，提供了一些服务器级别的 API：文件操作的能力、http 服务的能力。</p><p>helloworld.js</p><pre><code>var f = &apos;hello nodejs&apos;console.log(f)</code></pre><p>然后执行</p><pre><code>node .../helloworld.js</code></pre><p><code>require</code> 是一个方法,它的作用就是用来加载模块的。在 Node 中，模块有三种：具名的核心模块，例如 fs、http；用户自己编写的文件模块；第三方模块。</p><h2 id="读和写文件"><a href="#读和写文件" class="headerlink" title="读和写文件"></a>读和写文件</h2><p>浏览器中的 JavaScript 是没有文件操作的能力的，但是 Node 中的JavaScript 具有文件操作的能力。fs 是 file-system 的简写，就是文件系统的意思，<code>fs.readFile</code> 就是用来读取文件的。</p><p>node执行下面的js文件：</p><pre><code>var fs = require(&apos;fs&apos;)//    第一个参数就是要读取的文件路径,第二个参数是一个回调函数fs.readFile(&apos;./data/hello.txt&apos;, function (error, data) &#123;  if (error) &#123;    console.log(&apos;读取文件失败了&apos;)  &#125; else &#123;    console.log(data.toString())  &#125;&#125;)</code></pre><p>写文件：</p><pre><code>var fs = require(&apos;fs&apos;)fs.writeFile(&apos;./data/你好.md&apos;, &apos;我是Node.js&apos;, function (error) &#123;  if (error) &#123;    console.log(&apos;写入失败&apos;)  &#125; else &#123;    console.log(&apos;写入成功了&apos;)  &#125;&#125;)</code></pre><h2 id="http服务"><a href="#http服务" class="headerlink" title="http服务"></a>http服务</h2><p>简单的http服务</p><pre><code>var http = require(&apos;http&apos;)//使用 http.createServer() 方法创建一个 Web 服务器var server = http.createServer()//当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数server.on(&apos;request&apos;, function () &#123;  console.log(&apos;收到客户端的请求了&apos;)&#125;)//绑定端口号，启动服务器server.listen(3000, function () &#123;  console.log(&apos;服务器启动成功了，可以通过 http://你的ip/ 来进行访问&apos;)&#125;)</code></pre><p>处理请求,request请求事件处理函数，需要接收两个参数：Request 请求对象,请求对象可以用来获取客户端的一些请求信息，例如请求路径;Response 响应对象,响应对象可以用来给客户端发送响应消息。</p><pre><code>var http = require(&apos;http&apos;)var server = http.createServer()server.on(&apos;request&apos;, function (request, response) &#123;  console.log(&apos;收到客户端的请求了，请求路径是：&apos; + request.url)  // response 对象有一个方法：write 可以用来给客户端发送响应数据,write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待  response.write(&apos;hello&apos;)  response.write(&apos; nodejs&apos;)  response.end()&#125;)server.listen(3000, function () &#123;  console.log(&apos;服务器启动成功了，可以通过 http://你的ip:3000/ 来进行访问&apos;)&#125;)</code></pre><p>根据不同请求路径返回不同数据：</p><pre><code>var http = require(&apos;http&apos;)var server = http.createServer()server.on(&apos;request&apos;, function (req, res) &#123;  console.log(&apos;收到请求了，请求路径是：&apos; + req.url)  console.log(&apos;请求我的客户端的地址是：&apos;, req.socket.remoteAddress, req.socket.remotePort)  var url = req.url  if (url === &apos;/&apos;) &#123;    res.end(&apos;index page&apos;)  &#125; else if (url === &apos;/login&apos;) &#123;    res.end(&apos;login page&apos;)  &#125; else if (url === &apos;/products&apos;) &#123;    var products = [&#123;        name: &apos;苹果 X&apos;,        price: 8888      &#125;,      &#123;        name: &apos;菠萝 X&apos;,        price: 5000      &#125;,      &#123;        name: &apos;小辣椒 X&apos;,        price: 1999      &#125;    ]    res.setHeader(&apos;Content-Type&apos;, &apos;text/plain; charset=utf-8&apos;)    // 响应内容只能是二进制数据或者字符串、 数字、 对象、数组、布尔值    res.end(JSON.stringify(products))  &#125; else &#123;    res.end(&apos;404 Not Found.&apos;)  &#125;&#125;)server.listen(3000, function () &#123;  console.log(&apos;服务器启动成功，可以访问了。。。&apos;)&#125;)</code></pre><p>在服务端默认发送的数据，其实是 utf8 编码的内容，中文操作系统默认是 gbk。在 http 协议中，Content-Type 就是用来告知对方我给你发送的数据内容是什么类型</p><pre><code>// text/plain 就是普通文本res.setHeader(&apos;Content-Type&apos;, &apos;text/plain; charset=utf-8&apos;)// 如果你发送的是 html 格式的字符串，则也要告诉浏览器我给你发送是 text/html 格式的内容res.setHeader(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;)// 图片就不需要指定编码了，因为我们常说的编码一般指的是：字符编码res.setHeader(&apos;Content-Type&apos;, &apos;image/jpeg&apos;)</code></pre><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>读取文件目录</p><pre><code>var fs = require(&apos;fs&apos;)fs.readdir(&apos;D:/Movie/www&apos;, function (err, files) &#123;  if (err) &#123;    return console.log(&apos;目录不存在&apos;)  &#125;  console.log(files)&#125;)</code></pre><p><code>art-template</code>不仅可以在浏览器使用，也可以在 node 中使用。</p><pre><code>https://github.com/aui/art-templatehttps://aui.github.io/art-template/</code></pre><p>安装：该命令在哪执行就会把包下载到哪里,下载到 node_modules 目录中。</p><pre><code>npm install art-template</code></pre><p>注意：在浏览器中需要引用 lib/template-web.js 文件</p><p>浏览器中使用art-template:</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;浏览器中使用art-template&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script src=&quot;node_modules/art-template/lib/template-web.js&quot;&gt;&lt;/script&gt;  &lt;script type=&quot;text/template&quot; id=&quot;tpl&quot;&gt;    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;title&gt;Document&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;      &lt;p&gt;大家好，我叫：&#123;&#123; name &#125;&#125;&lt;/p&gt;      &lt;p&gt;我今年 &#123;&#123; age &#125;&#125; 岁了&lt;/p&gt;      &lt;h1&gt;我来自 &#123;&#123; province &#125;&#125;&lt;/h1&gt;      &lt;p&gt;我喜欢：&#123;&#123;each hobbies&#125;&#125; &#123;&#123; $value &#125;&#125; &#123;&#123;/each&#125;&#125;&lt;/p&gt;    &lt;/body&gt;    &lt;/html&gt;  &lt;/script&gt;  &lt;script&gt;    var ret = template(&apos;tpl&apos;, &#123;      name: &apos;Jack&apos;,      age: 18,      province: &apos;北京市&apos;,      hobbies: [        &apos;写代码&apos;,        &apos;唱歌&apos;,        &apos;打游戏&apos;      ]    &#125;)    console.log(ret)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 在 Node 中使用 art-template 模板引擎。在需要使用的文件模块中加载 art-template，只需要使用 require 方法加载就可以了：<code>require(&#39;art-template&#39;)</code></p><p>node执行js</p><pre><code>var template = require(&apos;art-template&apos;)var fs = require(&apos;fs&apos;)fs.readFile(&apos;./tpl.html&apos;, function (err, data) &#123;  if (err) &#123;    return console.log(&apos;读取文件失败了&apos;)  &#125;  var ret = template.render(data.toString(), &#123;    name: &apos;Jack&apos;,    age: 18,    province: &apos;北京市&apos;,    hobbies: [      &apos;写代码&apos;,      &apos;唱歌&apos;,      &apos;打游戏&apos;    ],    title: &apos;个人信息&apos;  &#125;)  console.log(ret)&#125;)</code></pre><p>tpl.html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;&#123;&#123; title &#125;&#125;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;p&gt;大家好，我叫：&#123;&#123; name &#125;&#125;&lt;/p&gt;  &lt;p&gt;我今年 &#123;&#123; age &#125;&#125; 岁了&lt;/p&gt;  &lt;h1&gt;我来自 &#123;&#123; province &#125;&#125;&lt;/h1&gt;  &lt;p&gt;我喜欢：&#123;&#123;each hobbies&#125;&#125; &#123;&#123; $value &#125;&#125; &#123;&#123;/each&#125;&#125;&lt;/p&gt;  &lt;script&gt;    var foo = &apos;&#123;&#123; title &#125;&#125;&apos;  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>留言板小案例</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>官网</p><pre><code>https://www.npmjs.com/</code></pre><p>常用命令行工具</p><pre><code>//查看版本npm --version//升级npmnpm install --global npm//跳过向导，快速生成npm init -y//只下载npm install 包名//下载并且保存依赖项(package.json文件中的dependencies选项)npm install --save//只删除，如果有依赖项依然保存npm uninstall 包名//依赖也删除npm uninstall --save 包名//帮助npm help</code></pre><p>解决翻墙：</p><p>首先安装淘宝cnpm（可以再任意目录执行，–global表示安装到全局）</p><pre><code>npm install --global cnpm</code></pre><p>接下来用cnpm替换npm。</p><p>如果不想安装npm又想使用淘宝镜像：</p><pre><code>npm install jquery --registry=https://registry.npm.taobao.org</code></pre><p>加入配置文件中：</p><pre><code>npm config set registry https://registry.npm.taobao.org//查看配置成功npm config list</code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2019/04/24/16.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/04/24/16.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><hr><p>单例模式：保证整个程序只有一个实例。</p><p>套路：1、构造函数私有，防止在外部new对象；2、内部必须提供一个静态的方法，让外部调用。</p><hr><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><hr><pre><code>public class SingletonEHan &#123;    private SingletonEHan() &#123;    &#125;    private static SingletonEHan singletonEHan = new SingletonEHan();    public static SingletonEHan getInstance() &#123;        return singletonEHan;    &#125;//  SingletonEHan instance= SingletonEHan.getInstance();&#125;</code></pre><blockquote><ul><li>优点：比较简单，在类加载的时候就完成了实例化，避免了线程的同步问题。</li><li>缺点：由于在类加载的时候就实例化了，也就是说可能我没有用到这个实例，但是它也会加载，会造成内存的浪费(但是这个浪费可以忽略)。</li></ul></blockquote><hr><h3 id="懒汉模式，四种方式"><a href="#懒汉模式，四种方式" class="headerlink" title="懒汉模式，四种方式"></a>懒汉模式，四种方式</h3><hr><pre><code>public class SingletonLanHan &#123;    private SingletonLanHan() &#123;    &#125;    /**     * 单例模式的懒汉式[线程不安全，不可用]     */    private static SingletonLanHan singletonLanHan;    public static SingletonLanHan getInstance() &#123;        if (singletonLanHan == null) &#123; //多线程并发，这里线程是不安全的,可能得到两个不同的实例            singletonLanHan = new SingletonLanHan();        &#125;        return singletonLanHan;    &#125;    /**     * 懒汉式线程安全的:加锁，[线程安全，效率低不推荐使用]     * 缺点：效率太低，每个线程在想获得类的实例时候，执行getSingletonLanHanTwo()方法都要进行同步。     */    private static SingletonLanHan singletonLanHanTwo;    public static synchronized SingletonLanHan getSingletonLanHanTwo() &#123;        if (singletonLanHanTwo == null) &#123;            singletonLanHanTwo = new SingletonLanHan();        &#125;        return singletonLanHanTwo;    &#125;    /**     * 单例模式懒汉式[线程不安全，不可用]     * 虽然加了锁，new Singleton()跳出这个锁时，另一个已经进入if语句的线程同样会实例化另外一个Singleton对象。     *      */    private static SingletonLanHan singletonLanHanThree = null;    public static SingletonLanHan getSingletonLanHanThree() &#123;        if (singletonLanHanThree == null) &#123;            synchronized (SingletonLanHan.class) &#123;// 线程不安全                singletonLanHanThree = new SingletonLanHan();            &#125;        &#125;        return singletonLanHanThree;    &#125;    /**     * 懒汉式双重校验     * 缺点:不推荐用，下面解释     */    private static SingletonLanHan singletonLanHanFour;    public static SingletonLanHan getSingletonLanHanFour() &#123;        if (singletonLanHanFour == null) &#123;//只执行一次锁，所以效率高一些            synchronized (SingletonLanHan.class) &#123;                if (singletonLanHanFour == null) &#123;                    singletonLanHanFour = new SingletonLanHan();                &#125;            &#125;        &#125;        return singletonLanHanFour;    &#125;&#125;</code></pre><blockquote><p>1、开辟一块内存空间，2、初始化对象，3、给变量赋值，指向内存地址。在java中2和3的顺序不一定，也可能先3再2。用volatile保证123的顺序执行，防止重排序。</p></blockquote><hr><h3 id="volatile-同步锁DCL"><a href="#volatile-同步锁DCL" class="headerlink" title="volatile[同步锁DCL]"></a>volatile[同步锁DCL]</h3><hr><pre><code>public class SingletonLanHan &#123;    private SingletonLanHan() &#123;    &#125;    //volatile解决了gvm指令重排序优化    private static volatile SingletonLanHan singletonLanHanFour;    public static SingletonLanHan getSingletonLanHanFour() &#123;        if (singletonLanHanFour == null) &#123;            synchronized (SingletonLanHan.class) &#123;                if (singletonLanHanFour == null) &#123;                    singletonLanHanFour = new SingletonLanHan();                &#125;            &#125;        &#125;        return singletonLanHanFour;    &#125;&#125;</code></pre><blockquote><p>volatile关键字作用:防止重排序,线程可见性。</p></blockquote><p>线程可见性:某一个线程改了公用对象(变量)，短时间内另一个线程可能是不可见的，因为每一个线程都有自己的缓存区(线程工作区)。</p><p>举例：可以看加不加volatile的区别：</p><pre><code>public class VolatileTest &#123;    public static void main(String[] args) &#123;        ThreadDemo td = new ThreadDemo();        new Thread(td).start();        while(true)&#123;            if(td.isFlag())&#123;                System.out.println(&quot;主线程flag:&quot; + td.isFlag());                break;            &#125;        &#125;    &#125;&#125;class ThreadDemo implements Runnable &#123;    private volatile boolean flag = false;    @Override    public void run() &#123;        try &#123;            Thread.sleep(200);        &#125; catch (InterruptedException e) &#123;        &#125;        flag = true;        System.out.println(&quot;其他线程flag=&quot; + isFlag());    &#125;    public boolean isFlag() &#123;        return flag;    &#125;    public void setFlag(boolean flag) &#123;        this.flag = flag;    &#125;&#125;</code></pre><hr><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><hr><pre><code>/** * 内部类[推荐用] * 在饿汉式方式是只要Singleton类被装载就会实例化, * 内部类是在需要实例化时，调用getInstance方法，才会装载SingletonHolder类 * 优点：避免了线程不安全，延迟加载，效率高。 */public class SingletonIn &#123;    private SingletonIn() &#123;    &#125;    private static class SingletonInHodler &#123;        private static final SingletonIn singletonIn = new SingletonIn();    &#125;    public static SingletonIn getSingletonIn() &#123;        return SingletonInHodler.singletonIn;    &#125;&#125;</code></pre><hr><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><hr><pre><code>/** * 枚举[推荐使用] * SingletonEnum.instance * 这里的instance即为SingletonEnum类型的引用所以得到它就可以调用枚举中的方法了。 * 借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象 */public enum SingletonEnum &#123;    instance;    private SingletonEnum() &#123;    &#125;    public void whateverMethod() &#123;    &#125;    // SingletonEnum.instance.method();&#125;</code></pre><hr><h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><hr><p><code>SystemServiceRegistry.getSystemService</code>系统的服务就是用的这种</p><pre><code>public class Singleton &#123;    private static Map&lt;String,Object&gt; mSingleMap = new HashMap&lt;&gt;();    static &#123;        mSingleMap.put(&quot;activity_manager&quot;,new Singleton());    &#125;    private Singleton() &#123;    &#125;    public static Object getService(String serviceName)&#123;        return mSingleMap.get(serviceName);    &#125;&#125;</code></pre><hr><h3 id="补充复习static"><a href="#补充复习static" class="headerlink" title="补充复习static"></a>补充复习static</h3><hr><p>static关键字的特点：随着类的加载而加载，随着类的消失而消失；优先于对象存在；被类的所有对象共享。</p><p>静态变量存储于方法区的静态区；成员变量存储于堆内存。</p><p>静态代码块：在类中方法外出现，并加上static修饰；用于给类进行初始化(全局初始化)，在类加载的时候就执行，并且只执行一次。main主方法所在的类中的静态代码块优先于主方法执行。</p><pre><code>class Student &#123;    static &#123;        System.out.println(&quot;Student 静态代码块&quot;);    &#125;    &#123;        System.out.println(&quot;Student 构造代码块&quot;);    &#125;    public Student() &#123;        System.out.println(&quot;Student 构造方法&quot;);    &#125;&#125;class Demo2_Student &#123;    static &#123;        System.out.println(&quot;Demo2_Student静态代码块&quot;);    &#125;    public static void main(String[] args) &#123;        System.out.println(&quot;我是main方法&quot;);        Student s1 = new Student();        Student s2 = new Student();    &#125;&#125;</code></pre><p>输出结果：</p><pre><code>Demo2_Student静态代码块我是main方法Student 静态代码块Student 构造代码块Student 构造方法Student 构造代码块Student 构造方法</code></pre><hr><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><hr><p>简单工厂模式：提供专门的工厂类用于创建对象，将对象的创建和对象的使用分离开。客户端只知道传入工厂类的参数，不需要关心具体的实现。它不属于GoF23种设计模式，但在软件开发中应用也较为频繁。</p><p>实例</p><pre><code>Bitmap bitmap = BitmapFatory.deresources(res,id);</code></pre><hr><h3 id="简单工厂场景"><a href="#简单工厂场景" class="headerlink" title="简单工厂场景"></a>简单工厂场景</h3><hr><p>使用简单工厂模式设计一个可以创建圆形、方形和三角形的绘图工具。</p><pre><code>//抽象类 public interface IPain &#123;    void draw();&#125;//具体产品类class Triangle implements IPain &#123;    @Override    public void draw() &#123;        System.out.println(&quot;画出三角形&quot;);    &#125;&#125;class Square implements IPain &#123;    @Override    public void draw() &#123;        System.out.println(&quot;画出正方形&quot;);    &#125;&#125;class Circle implements IPain &#123;    @Override    public void draw() &#123;        System.out.println(&quot;画出圆形&quot;);    &#125;&#125;//工厂类public class PainFactory &#123;    //静态工厂方法    public static IPain create(int type)&#123;        switch (type) &#123;        case 1:            return new Triangle();        case 2:            return new Square();        case 3:            return new Circle();        default:            return new Circle();        &#125;    &#125;&#125;//客户端public class Client &#123;    public static void main(String[] args) &#123;        //通过静态工厂方法创建产品         IPain mPain = PainFactory.create(2);        mPain.draw();    &#125;&#125;</code></pre><hr><h3 id="在简单工厂模式包含如下几个角色："><a href="#在简单工厂模式包含如下几个角色：" class="headerlink" title="在简单工厂模式包含如下几个角色："></a>在简单工厂模式包含如下几个角色：</h3><hr><ol><li><p>工厂类，负责实现创建所有产品实例，在工厂类中提供了静态方法，可以被外界直接调用，返回抽象产品类Product。</p></li><li><p>Product抽象产品角色，它是工厂类所创建的所有对象的父类，封装了各种产品对象的公有方法，所有创建的具体产品对象都是其子类对象。</p></li><li><p>具体产品角色，都继承了抽象产品角色，需要实现在抽象产品中声明的抽象方法。</p></li></ol><p>在简单工厂模式中，客户端通过工厂类来创建一个产品类的实例，而无须直接使用new关键字来创建对象。</p><hr><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><hr><p>简单工厂Factory Method Pattern，模式最大的缺点是当有新产品要加入到系统中时，必须修改工厂类。</p><p>工厂方法模式中，不再提供一个统一的工厂类，而是针对不同的产品提供不同的工厂。提供一个抽象工厂接口来声明抽象工厂方法，其子类来具体实现工厂方法，创建具体的产品对象。即把对象的实现延迟到子类完成。</p><p>实例：</p><pre><code>//List:Factory抽象工厂，ArrayList:具体的工厂Factory//Iterator:抽象产品Product，ArrayListIterator:具体的产品List&lt;String&gt; list = new ArrayList&lt;String&gt;();list.iterator();</code></pre><hr><h3 id="工厂方法场景"><a href="#工厂方法场景" class="headerlink" title="工厂方法场景"></a>工厂方法场景</h3><hr><p>玩具工厂生产动物玩具，发出不同叫声。</p><pre><code>//抽象产品-玩具interface IToy &#123;    void makeNoise(String string);&#125;//具体产品class DogToy implements IToy &#123;    public void makeNoise(String string) &#123;        System.out.println(string + &quot;汪汪汪的叫。&quot; );    &#125;&#125;//具体产品class CatToy implements IToy &#123;    public void makeNoise(String string) &#123;        System.out.println(string + &quot;喵喵喵的叫。&quot;);    &#125;&#125;//抽象工厂abstract class IToyFactory &#123;    abstract IToy createToy();&#125;//具体工厂class DogFactory extends IToyFactory &#123;    public IToy createToy() &#123;        return new DogToy();    &#125;&#125;//具体工厂class CatFactory extends IToyFactory &#123;    public IToy createToy() &#123;        return new CatToy();    &#125;&#125;//客户端class Client &#123;    public static void main(String args[]) &#123;        IToyFactory factory = new CatFactory();        IToy toy = factory.createToy();        toy.makeNoise(&quot;我是cat。&quot;);        //factory.createToy().makeNoise(&quot;我是cat。&quot;);    &#125;&#125;</code></pre><hr><h3 id="工厂方法模式的几个角色："><a href="#工厂方法模式的几个角色：" class="headerlink" title="工厂方法模式的几个角色："></a>工厂方法模式的几个角色：</h3><hr><ol><li><p>Product抽象产品角色和具体产品角色，和简单工厂模式类似，不再累述。</p></li><li><p>Factory（抽象工厂）：是工厂方法模式的核心，在抽象工厂类中，声明了抽象工厂方法，<strong>用于返回一个产品</strong>。可以是接口，也可以是抽象类或者具体类。</p></li><li><p>ConcreteFactory（具体工厂）：它是抽象工厂类的子类，实现了抽象工厂中的工厂方法，并可由客户端调用，<strong>返回一个具体产品类的实例</strong>。</p></li></ol><p>在实际使用时，具体工厂类在实现工厂方法时除了创建具体产品对象之外，还可以负责产品对象的初始化工作以及一些资源和环境配置工作，例如连接数据库、创建文件等。</p><hr><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><hr><p>抽象工厂模式Abstract Factory Pattern</p><p>待更新</p><hr><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</p><p>建造者模式为客户端返回的不是一个简单的产品，而是一个由多个部件组成的复杂产品。</p><p>简单来说，复杂对象是指那些包含多个成员属性的对象，这些成员属性也称为部件或零件，如汽车包括方向盘、发动机、轮胎等部件，电子邮件包括发件人、收件人、主题、内容、附件等部件。</p><hr><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><hr><p>在建造者模式中包含如下几个角色：</p><ol><li><p>Builder（抽象建造者）：它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。</p></li><li><p>ConcreteBuilder（具体建造者）：它实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。</p></li><li><p>Product（产品角色）：它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程。</p></li><li><p>Director（指挥者）：负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造。</p></li></ol><p>客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。</p><p>建造者模式与抽象工厂模式有点相似，但是建造者模式返回一个完整的复杂产品，而抽象工厂模式返回一系列相关的产品。</p><hr><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><hr><p>实例：生产机器人，包含机器人服装，脸型，机器人功能</p><pre><code>//产品,包含很多组件class RobotProduct &#123;    private String type; //机器人功能    private String face; //脸型    private String costume; //服装    public void setType(String type) &#123;        this.type = type;    &#125;    public void setFace(String face) &#123;        this.face = face;    &#125;    public void setCostume(String costume) &#123;        this.costume = costume;    &#125;    public String getType() &#123;        return (this.type);    &#125;    public String getFace() &#123;        return (this.face);    &#125;    public String getCostume() &#123;        return (this.costume);    &#125;&#125;//抽象建造者abstract class RobotBuilder &#123;    protected RobotProduct robot = new RobotProduct();    public abstract void buildType();    public abstract void buildFace();    public abstract void buildCostume();    //工厂方法，返回一个完整机器人    public RobotProduct createRobot() &#123;        return robot;    &#125;&#125;//具体建造者class ManBuilder extends RobotBuilder &#123;    public void buildType() &#123;        robot.setType(&quot;男仆&quot;);    &#125;    public void buildFace() &#123;        robot.setFace(&quot;英俊&quot;);    &#125;    public void buildCostume() &#123;        robot.setCostume(&quot;西服&quot;);    &#125;&#125;//具体建造者class WomanBuilder extends RobotBuilder &#123;    public void buildType() &#123;        robot.setType(&quot;女仆&quot;);    &#125;    public void buildFace() &#123;        robot.setFace(&quot;漂亮&quot;);    &#125;    public void buildCostume() &#123;        robot.setCostume(&quot;短裙&quot;);    &#125;&#125;//指挥者类定义了construct()方法，该方法拥有一个抽象建造者类型的参数，在该方法内部实现了机器人的逐步构建class RobotController &#123;    //逐步构建复杂产品对象    public RobotProduct construct(RobotBuilder ab) &#123;        RobotProduct robot;        ab.buildType();        ab.buildFace();        ab.buildCostume();        robot = ab.createRobot();        return robot;    &#125;&#125;class Client &#123;    public static void main(String args[]) &#123;        RobotBuilder ab =  new WomanBuilder();        RobotController ac = new  RobotController();        RobotProduct robot = ac.construct(ab); //通过指挥者创建完整的建造者对象        System.out.println(robot.getType()  + &quot;的外观：&quot;);        System.out.println(&quot;面容：&quot; + robot.getFace());        System.out.println(&quot;服装：&quot; + robot.getCostume());    &#125;&#125;</code></pre><hr><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><hr><p>建造者模式的变形，也是在源码和开源项目中长用的，比如：AlertDialog</p><pre><code>//产品,包含很多组件class RobotProduct &#123;    private String type; //机器人功能    private String face; //脸型    private String costume; //服装    public void apply(RobotBuilder.RobotParmas parmas) &#123;        type = parmas.type;        face = parmas.face;        costume = parmas.costume;    &#125;    @Override    public String toString() &#123;        return type + &quot;的外观：&quot; + &quot;面容：&quot; + face + &quot;服装：&quot; + costume;    &#125;&#125;//具体建造者class RobotBuilder &#123;    private RobotBuilder.RobotParmas parmas;    public RobotBuilder() &#123;        this.parmas = new RobotBuilder.RobotParmas();    &#125;    public RobotBuilder makeType(String type) &#123;        parmas.type = type;        return this;    &#125;    public RobotBuilder makeFace(String face) &#123;        parmas.face = face;        return this;    &#125;    public RobotBuilder makeCostume(String costume) &#123;        parmas.costume = costume;        return this;    &#125;    //真正构建    public RobotProduct build() &#123;        RobotProduct produc = new RobotProduct();        produc.apply(parmas);        return produc;    &#125;    class RobotParmas &#123;        public String type; //机器人功能        public String face; //脸型        public String costume; //服装    &#125;&#125;class Client &#123;    public static void main(String args[]) &#123;         RobotProduct product = new RobotBuilder().makeType(&quot;女仆&quot;).makeFace(&quot;俊俏&quot;).makeCostume(&quot;护士装&quot;).build();         System.out.println(product.toString());    &#125;&#125;</code></pre><hr><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><hr><p>职责链模式(Chain of Responsibility Pattern，职责链模式)：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。职责链模式是一种对象行为型模式。职责链模式结构的核心在于引入了一个抽象处理者。</p><p>重点：上一个处理对象必须含有下一个处理对象的引用，形成一个单向链表。</p><hr><h3 id="角色-1"><a href="#角色-1" class="headerlink" title="角色"></a>角色</h3><hr><ul><li><p>Handler（抽象处理者）：定义一个处理请求的抽象类，由于不同的具体处理者处理请求的方式不同，因此在其中定义了抽象请求处理方法。因为每一个处理者的下家还是一个处理者，因此在抽象处理者中定义了一个抽象处理者类型的对象，作为其对下家的引用。通过该引用，处理者可以连成一条链。</p></li><li><p>ConcreteHandler（具体处理者）：它是抽象处理者的子类，可以处理用户请求，在处理请求之前需要进行判断，看是否有相应的处理权限，如果可以处理请求就处理它，否则将请求转发给后继者；在具体处理者中可以访问链中下一个对象，以便请求的转发。</p></li></ul><hr><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><hr><p>安卓实例，比如，事件分发机制。在View、ViewGroup、Activity中都有机会处理OnTouchEvent请求。</p><p>例子：主任、副董事长、董事长有不同的审批金额的权利，当超过自己额度审批范围，就像上级提交。</p><pre><code>class Client &#123;    public static void main(String[] args) &#123;        ApproverHander little, middle, high;        little = new Director(&quot;张三&quot;);        middle = new VicePresident(&quot;李四&quot;);        high = new President(&quot;王五&quot;);        //创建职责链        little.setSuccessor(middle);        middle.setSuccessor(high);        //创建采购单        PurchaseRequest pr1 = new PurchaseRequest(45000);        little.processRequest(pr1);        PurchaseRequest pr2 = new PurchaseRequest(60000);        little.processRequest(pr2);        PurchaseRequest pr3 = new PurchaseRequest(160000);        little.processRequest(pr3);    &#125;&#125;//采购单：请求类class PurchaseRequest &#123;    private double amount;  //采购金额    public PurchaseRequest(double amount) &#123;        this.amount = amount;    &#125;    public void setAmount(double amount) &#123;        this.amount = amount;    &#125;    public double getAmount() &#123;        return this.amount;    &#125;&#125;//审批者类：抽象处理者abstract class ApproverHander &#123;    protected ApproverHander hander; //定义后继对象    protected String name; //审批者姓名    public ApproverHander(String name) &#123;        this.name = name;    &#125;    //设置后继者    public void setSuccessor(ApproverHander hander) &#123;        this.hander = hander;    &#125;    //抽象请求处理方法    public abstract void processRequest(PurchaseRequest request);&#125;//主任类：具体处理者class Director extends ApproverHander &#123;    public Director(String name) &#123;        super(name);    &#125;    //具体请求处理方法    public void processRequest(PurchaseRequest request) &#123;        if (request.getAmount() &lt; 50000) &#123;            System.out.println(&quot;主任&quot; + this.name + &quot;审批金额：&quot; + request.getAmount());  //处理请求        &#125; else &#123;            this.hander.processRequest(request);  //转发请求        &#125;    &#125;&#125;//副董事长类：具体处理者class VicePresident extends ApproverHander &#123;    public VicePresident(String name) &#123;        super(name);    &#125;    //具体请求处理方法    public void processRequest(PurchaseRequest request) &#123;        if (request.getAmount() &lt; 100000) &#123;            System.out.println(&quot;副董事长&quot; + this.name + &quot;审批金额：&quot; + request.getAmount());  //处理请求        &#125; else &#123;            this.hander.processRequest(request);  //转发请求        &#125;    &#125;&#125;//董事长类：具体处理者class President extends ApproverHander &#123;    public President(String name) &#123;        super(name);    &#125;    //具体请求处理方法    public void processRequest(PurchaseRequest request) &#123;            System.out.println(&quot;董事长&quot; + this.name + &quot;审批金额：&quot; + request.getAmount());  //处理请求    &#125;&#125;    </code></pre><hr><h3 id="和观察者模式区别"><a href="#和观察者模式区别" class="headerlink" title="和观察者模式区别"></a>和观察者模式区别</h3><hr><p>受众数量不同。观察者广播链式可以 1:N 的方式广播，而责任链则要求是的 1:1 的传递，必然有一个且只有一个类完成请求的处理;</p><p>请求内容不同。观察者广播链中的信息可以在传播中改变，但是责任链中的请求是不可改变的;</p><p>处理逻辑不通。观察者广播链主要用于触发联动动作，而责任链则是对一个类型的请求按照既定的规 则进行处理。</p><hr><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><hr><p>装饰模式(Decorator Pattern)：动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。</p><p>装饰模式是一种用于替代继承的技术，它通过一种无须定义子类的方式来给对象动态增加职责，使用对象之间的关联关系取代类之间的继承关系。在装饰模式中引入了装饰类，在装饰类中既可以调用待装饰的原有类的方法，还可以增加新的方法，以扩充原有类的功能。</p><hr><h3 id="角色-2"><a href="#角色-2" class="headerlink" title="角色"></a>角色</h3><hr><blockquote><p>Component（抽象构件）：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理未被装饰的对象以及装饰之后的对象，实现客户端的透明操作。</p></blockquote><blockquote><p>ConcreteComponent（具体构件）：它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）。</p></blockquote><blockquote><p>Decorator（抽象装饰类）：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰的目的。</p></blockquote><blockquote><p>ConcreteDecorator（具体装饰类）：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。</p></blockquote><p><strong>装饰设计模式一般情况都是把类对象作为构造参数传递。</strong>在不使用的继承的方式下，采用装饰设计模式可以扩展一个对象的功能，可以使一个对象变得越来越强大。</p><hr><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><hr><p>例子：在铺了地板的毛坯房上进行装饰：</p><pre><code>public class Client &#123;    public static void main(String args[]) &#123;        Home home, homeTake; //使用抽象构件定义        home = new Floor(); //定义具体构件        homeTake = new TakeHomeDecorator(home); //定义装饰后的构件        homeTake.display();    &#125;&#125;//抽象界面构件类abstract class Home &#123;    public abstract void display();&#125;//具体构件类class Floor extends Home &#123;    public void display() &#123;        System.out.println(&quot;毛坯房铺了地板&quot;);    &#125;&#125;//抽象装饰类class HomeDecorator extends Home &#123;    private Home component;  //维持对抽象构件类型对象的引用    public HomeDecorator(Home component)&#123;//注入抽象构件类型的对象        this.component = component;    &#125;    public void display() &#123;        component.display();    &#125;&#125;//具体装饰类class TakeHomeDecorator extends HomeDecorator &#123;    public TakeHomeDecorator(Home component) &#123;        super(component);    &#125;    public void display() &#123;        super.display();        this.setFurniture();    &#125;    public void setFurniture() &#123;        System.out.println(&quot;搬进去很多家具&quot;);    &#125;&#125;</code></pre><hr><h3 id="安卓实例"><a href="#安卓实例" class="headerlink" title="安卓实例"></a>安卓实例</h3><hr><p>ListView中的HeaderViewListAdapter，添加头部和底部。</p><p>ContextWrapper。</p><hr><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><hr><p>模板方法模式(Template Method Pattern)：定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>其核心是抽象类和其中的模板方法的设计。<strong>父类一般都是流程和通用部分的封装，子类一般都是具体的功能和逻辑。</strong></p><p>钩子：用来控制父类的流程,比如:插件化开发hook启动流程。</p><hr><h3 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h3><hr><p>模版和钩子,比如吃饭:点餐、吃东西、充卡、买单,充卡可以自由选择</p><pre><code>public class Client &#123;    public static void main(String[] args) &#123;        PeopleEat h1 = new PeopleEat();        h1.setMoney(true);        h1.havaEat();    &#125;&#125;abstract class EatModel &#123;    //钩子方法，默认会充钱    protected boolean isAdd()&#123;        return true;    &#125;    protected abstract void orderFood();    protected abstract void eatMeal();    protected abstract void addMoney();    protected abstract void payBill();    final public void havaEat() &#123;        this.orderFood();        this.eatMeal();        if(this.isAdd())&#123;            this.addMoney();        &#125;        this.payBill();    &#125;&#125;class PeopleEat extends EatModel &#123;    private boolean addMoneyFlag = true;    @Override    protected void addMoney() &#123;        System.out.println(&quot;充值200元...&quot;);    &#125;    @Override    protected void payBill() &#123;        System.out.println(&quot;买单离开...&quot;);    &#125;    @Override    protected void orderFood() &#123;        System.out.println(&quot;点了烤肉...&quot;);    &#125;    @Override    protected void eatMeal() &#123;        System.out.println(&quot;开始烤肉啦...&quot;);    &#125;    @Override    protected boolean isAdd() &#123;        return this.addMoneyFlag;    &#125;    public void setMoney(boolean isAdd)&#123;        this.addMoneyFlag = isAdd;    &#125;&#125;</code></pre><hr><h3 id="安卓实例-1"><a href="#安卓实例-1" class="headerlink" title="安卓实例"></a>安卓实例</h3><hr><p>Activity的生命周期采用了模板方法模式：首先都是继承自Activity，而且所有要自己定义写的Activity的生命周期的流程都是一样的，每个Activity可以设置不同的界面，可以实现自己的具体交互逻辑。</p><p>AsyncTask</p><p>开发中BaseActivity</p><hr><h2 id="策略设计模式"><a href="#策略设计模式" class="headerlink" title="策略设计模式"></a>策略设计模式</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><hr><p>策略模式(Strategy Pattern)：定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换，策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。策略模式是一种对象行为型模式。</p><p>策略模式的主要目的是将算法的定义与使用分开，将算法的定义放在专门的策略类中，每一个策略类封装了一种实现算法。在出现新的算法时，只需要增加一个新的实现了抽象策略类的具体策略类即可。</p><hr><h3 id="角色-3"><a href="#角色-3" class="headerlink" title="角色"></a>角色</h3><hr><blockquote><p>Context（环境类）：环境类是使用算法的角色，它在解决某个问题（即实现某个方法）时可以采用多种策略。在环境类中维持一个对抽象策略类的引用实例，用于定义所采用的策略。</p></blockquote><blockquote><p>Strategy（抽象策略类）：它为所支持的算法声明了抽象方法，是所有策略类的父类，它可以是抽象类或具体类，也可以是接口。环境类通过抽象策略类中声明的方法在运行时调用具体策略类中实现的算法。</p></blockquote><blockquote><p>ConcreteStrategy（具体策略类）：它实现了在抽象策略类中声明的算法，在运行时，具体策略类将覆盖在环境类中定义的抽象策略类对象，使用一种具体的算法实现某个业务处理。</p></blockquote><hr><h3 id="场景-4"><a href="#场景-4" class="headerlink" title="场景"></a>场景</h3><hr><p>景区门票，原始票价，学生票价，老人票价</p><pre><code>public class Client &#123;    public static void main(String[] args)&#123;        ParkTicket pt = new ParkTicket();        double originalPrice = 100;        pt.setPrice(originalPrice);        System.out.println(&quot;原始价为：&quot; + originalPrice);        Discount discount = new StudentDiscount();        pt.setDiscount(discount); //注入折扣对象        System.out.println(&quot;折后价为：&quot; + pt.getPrice());    &#125;&#125;//环境类:公园票价class ParkTicket &#123;    private double price;    private Discount discount; //维持一个对抽象折扣类的引用    public void setPrice(double price) &#123;        this.price = price;    &#125;    //注入一个折扣类对象    public void setDiscount(Discount discount) &#123;        this.discount = discount;    &#125;    public double getPrice() &#123;        //调用折扣类的折扣价计算方法        return discount.calculate(this.price);    &#125;&#125;//抽象策略类：折扣类interface Discount &#123;    public double calculate(double price);&#125;//具体策略类：学生票折扣类class StudentDiscount implements Discount &#123;    public double calculate(double price) &#123;        System.out.println(&quot;学生票：&quot;);        return price * 0.8;    &#125;&#125;//具体策略类：老人票折扣类class OldManDiscount implements Discount &#123;    public double calculate(double price) &#123;        System.out.println(&quot;老人票：&quot;);        return price - 10;    &#125;&#125;</code></pre><p>策略模式定义了一系列算法，并将每一个算法封装起来，而且是他们之间可以相互切换。</p><hr><h3 id="安卓实例-2"><a href="#安卓实例-2" class="headerlink" title="安卓实例"></a>安卓实例</h3><hr><p>第三方的：Glide的缓存策略，ImageLoader的生成图片文件的命名策略，timber日志打印工具的策略，OKhttp部分</p><p>源码里面：属性动画setInterpolator差值器；RecyclerView:setLayoutManager可以是ListView样式或者是GirdView样式等等。</p><hr><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="场景-5"><a href="#场景-5" class="headerlink" title="场景"></a>场景</h3><hr><p>观察者是汽车，根据被观察者红路灯，作出反应。</p><pre><code>public class Client &#123;    public static void main(String[] args)&#123;        //观察者        Observer bigCar = new BigCar();        Observer smallCar = new SmallCar();        //被观察者        TrafficLight trafficLight = new TrafficLight();        //关联        trafficLight.addObserver(bigCar);        trafficLight.addObserver(smallCar);        //目标有变化，看看观察者怎么办        trafficLight.havaRed();        trafficLight.havaGreen();    &#125;&#125;//被观察者interface Observable &#123;    //增加一个观察者    void addObserver(Observer observer);    //删除一个观察者    void deleteObserver(Observer observer);    //通知观察者    void notifyObservers(String context);&#125;//观察者interface Observer &#123;    //一发现􏰀人有动静，自己也要行动起来    void update(String context);&#125;//被观察者class TrafficLight implements Observable &#123;    //存放所有的观察者    private ArrayList&lt;Observer&gt; observerList = new ArrayList&lt;&gt;();    //增加观察者    public void addObserver(Observer observer) &#123;        this.observerList.add(observer);    &#125;    //删除观察者    public void deleteObserver(Observer observer) &#123;        this.observerList.remove(observer);    &#125;    //通知所有的观察者    public void notifyObservers(String context) &#123;        for (Observer observer : observerList) &#123;            observer.update(context);        &#125;    &#125;    public void havaRed() &#123;        System.out.println(&quot;红灯...&quot;); //通知所有的观察者        this.notifyObservers(&quot;红灯停车啦&quot;);    &#125;    public void havaGreen() &#123;        System.out.println(&quot;绿灯...&quot;);        this.notifyObservers(&quot;绿灯开车啦&quot;);    &#125;&#125;//观察者class BigCar implements Observer &#123;    public void update(String str) &#123;        System.out.println(str);        this.makeCar(str);    &#125;    private void makeCar(String reportContext) &#123;        System.out.println(&quot;我是大汽车---&gt;&quot; + reportContext);    &#125;&#125;//观察者class SmallCar implements Observer &#123;    public void update(String str) &#123;        System.out.println(str);        this.makeCar(str);    &#125;    private void makeCar(String reportContext) &#123;        System.out.println(&quot;我是小汽车---&gt;&quot; + reportContext);    &#125;&#125;</code></pre><hr><h3 id="推拉模式"><a href="#推拉模式" class="headerlink" title="推拉模式"></a>推拉模式</h3><hr><p>推拉模式：上面是推模式，即被观察者变化的时候，推送给观察者。拉模式，即被观察者变化的时候，观察者主动查看下被观察者。可以分开使用，也可以结合使用。</p><hr><h3 id="原生API"><a href="#原生API" class="headerlink" title="原生API"></a>原生API</h3><hr><p>继承原生API实现</p><pre><code>import java.util.Observable;import java.util.Observer;public class Client &#123;    public static void main(String[] args)&#123;        //观察者        Observer bigCar = new BigCar();        Observer smallCar = new SmallCar();        //被观察者        TrafficLight trafficLight = new TrafficLight();        //关联        trafficLight.addObserver(bigCar);        trafficLight.addObserver(smallCar);        //目标有变化，看看观察者怎么办        trafficLight.havaRed();        trafficLight.havaGreen();    &#125;&#125;//被观察者class TrafficLight extends Observable &#123;    public void havaRed() &#123;        System.out.println(&quot;红灯...&quot;);        super.setChanged();        super.notifyObservers(&quot;红灯停车啦&quot;);    &#125;    public void havaGreen() &#123;        System.out.println(&quot;绿灯...&quot;);        super.setChanged();        super.notifyObservers(&quot;绿灯开车啦&quot;);    &#125;&#125;//观察者class BigCar implements Observer &#123;    private void makeCar(String reportContext) &#123;        System.out.println(&quot;我是大汽车---&gt;&quot; + reportContext);    &#125;    @Override    public void update(Observable o, Object arg) &#123;        System.out.println(arg.toString());        this.makeCar(arg.toString());    &#125;&#125;//观察者class SmallCar implements Observer &#123;    private void makeCar(String reportContext) &#123;        System.out.println(&quot;我是小汽车---&gt;&quot; + reportContext);    &#125;    @Override    public void update(Observable o, Object arg) &#123;        System.out.println(arg.toString());        this.makeCar(arg.toString());    &#125;&#125;</code></pre><hr><h3 id="安卓实例-3"><a href="#安卓实例-3" class="headerlink" title="安卓实例"></a>安卓实例</h3><hr><p>ListView的Adapter的setDataChange方法。给Adapter注册一个mDataSetObserver。</p><pre><code>mAdapter.registerDataSetObserver(mDataSetObserver); </code></pre><hr><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><hr><p>目标接口、代理对象、被代理的对象。</p><pre><code>/** * 银行办理业务 - 目标接口（业务） */public interface IBank &#123;    /*** 申请办卡*/    public void applyBank();    /*** 挂失*/    public void lostBank();&#125;/** * 银行办理业务 - 代理对象 - 银行的业务员 */public class BankWorker implements IBank&#123;    private IBank bank;    /**     * 持有被代理的对象     * @param bank     */    public BankWorker(IBank bank)&#123;        this.bank = bank;    &#125;    @Override    public void applyBank() &#123;        System.out.println(&quot;开始受理&quot;);        bank.applyBank();        System.out.println(&quot;操作完毕&quot;);    &#125;    @Override    public void lostBank() &#123;        System.out.println(&quot;开始受理&quot;);        bank.lostBank();        System.out.println(&quot;操作完毕&quot;);    &#125;&#125;/** * 银行办理业务 - 被代理的对象 - 我们 */public class Man implements IBank &#123;    private String name;    public Man(String name) &#123;        this.name = name;    &#125;    /**     * 自己的一些操作     */    @Override    public void applyBank() &#123;        System.out.println(name + &quot; 申请办卡&quot;);    &#125;    @Override    public void lostBank() &#123;        System.out.println(name + &quot; 申请挂失&quot;);    &#125;&#125;public class Client &#123;    public static void main(String[] args)&#123;        Man man = new Man(&quot;张三&quot;);        BankWorker bankWorker = new BankWorker(man);        bankWorker.applyBank();    &#125;&#125;</code></pre><hr><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><hr><p>形式</p><pre><code>Proxy.newProxyInstance(    IBank.class.getClassLoader(),//ClassLoader    new Class&lt;?&gt;[]&#123;IBank.class&#125;,//目标接口    null//InvocationHandler-关键);</code></pre><p>代码</p><pre><code>/** * 银行办理业务 - 动态代理 - InvocationHandler */public class BankInvocationHandler implements InvocationHandler&#123;    /**     * 被代理的对象     */    private Object mObject;    public BankInvocationHandler(Object object)&#123;        this.mObject = object;    &#125;    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;        // 执行方法 ，目标接口调用的方法都会来到这里面        // System.out.println(&quot;methodName = &quot;+method.getName());        System.out.println(&quot;开始受理&quot;);        // System.out.println(&quot;params = &quot;+args.toString());        // 调用被代理对象的方法,这里其实调用的就是  man 里面的 applyBank 方法        Object voidObject = method.invoke(mObject,args);        System.out.println(&quot;操作完毕&quot;);        return voidObject;    &#125;&#125;public class Client &#123;    public static void main(String[] args) &#123;        Man man = new Man(&quot;张三&quot;);        IBank bank =                // 返回的是 IBank 的一个实例对象，这个对象是由 Java 给我们创建的 ,调用的是 jni                (IBank) Proxy.newProxyInstance(                        IBank.class.getClassLoader(), // ClassLoader                        new Class&lt;?&gt;[]&#123;IBank.class&#125;, // 目标接口                        new BankInvocationHandler(man) // InvocationHandler (这个类是关键)                );        // 当调用这个方法的时候会来到 BankInvocationHandler 的 invoke 方法        bank.applyBank();        bank.lostBank();        bank.extraBank();    &#125;&#125;/** * 银行办理业务 - 目标接口（业务） */public interface IBank &#123;    /**     * 申请办卡     */    public void applyBank();    /**     * 挂失     */    public void lostBank();    /**     * 额外业务     */    public void extraBank();&#125;/** * 银行办理业务 - 被代理的对象 - 我们 */public class Man implements IBank &#123;    private String name;    public Man(String name)&#123;        this.name = name;    &#125;    /**     * 自己的一些操作     */    @Override    public void applyBank() &#123;        System.out.println(name + &quot; 申请办卡&quot;);    &#125;    @Override    public void lostBank() &#123;        System.out.println(name + &quot; 申请挂失&quot;);    &#125;    @Override    public void extraBank() &#123;        System.out.println(name + &quot; 额外业务&quot;);    &#125;&#125;</code></pre><hr><h3 id="开发用到的地方"><a href="#开发用到的地方" class="headerlink" title="开发用到的地方"></a>开发用到的地方</h3><hr><pre><code>Android 插件化架构之绕过 AndroidManifest 检测（动态代理）Android 数据库实现数据的懒加载（静态代理）Android MVP 架构设计（静态代理和动态代理）Android Xutils 实现 View 事件注入（动态代理）Android Retrofit 的 create 创建接口对象 （动态代理）Android Framework 层的 AMSAndroid Framework 层的 Binder 驱动</code></pre><p>Retrofit的create</p><pre><code>public &lt;T&gt; T create(final Class&lt;T&gt; service) &#123;    // 验证当前类是否是接口    Utils.validateServiceInterface(service);    //有需要的话做方法缓存？    if (validateEagerly) &#123;        eagerlyValidateMethods(service);    &#125;    // 动态代理设计模式    return (T) Proxy.newProxyInstance(service.getClassLoader(),            new Class&lt;?&gt;[] &#123; service &#125;, new InvocationHandler() &#123;                private final Platform platform = Platform.get();                @Override                public Object invoke(Object proxy, Method method,                        Object... args) throws Throwable &#123;                    //如果调用的方法是Object的                    if (method.getDeclaringClass() == Object.class) &#123;                        return method.invoke(this, args);                    &#125;                    // //默认进不来这个if ，平台判断 android java8 ios                    if (platform.isDefaultMethod(method)) &#123;                        return platform.invokeDefaultMethod(method,                                service, proxy, args);                    &#125;                    // 重点*具体执行细节                    // method:就是我们调用的具体的方法(例如：login方法) 去解析方法属性和参数属性吧？                    ServiceMethod serviceMethod = loadServiceMethod(method);                    // 解析完成之后，调用OKHttp框架执行请求                    OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);                    // 这个最终是 ExecutorCallAdapterFactory 里面的 CallAdapter 所以最终返回的是 ExecutorCallbackCall                    return serviceMethod.callAdapter.adapt(okHttpCall);                &#125;            &#125;);&#125;</code></pre><p>自己实现create的思路</p><pre><code>public &lt;T&gt; T create(Class&lt;T&gt; clazz)&#123;    // 动态代理    return (T) Proxy.newProxyInstance(clazz.getClassLoader(),            new Class&lt;?&gt;[]&#123;clazz&#125;, new InvocationHandler() &#123;                @Override                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;                    Log.e(&quot;TAG&quot;,method.getName());                    // 如果要实现 Retrofit 一样的代码应该怎么办？                    // 1. 解析方法的所有注解 比如 POST GET FormUrlEncoded 等等                    // 2. 解析参数的所有注解 比如 FieldMap Part PartMap 等等                    // 3. 封装成 Call 对象                    // 4.返回的 Call 对象                    return &quot;返回&quot;;                &#125;            &#125;);&#125;</code></pre><p>通过<code>Retrofit.create(class)</code>方法创建出Service interface的实例，从而使得Service中配置的方法变得可用，这是Retrofit代码结构的核心。</p><p><code>Retrofit.create(class)</code>方法内部，使用<code>Proxy.newProxyInstance()</code>方法创建Service实例。create方法会为参数中的interface创建一个对象，这个对象实现了interface中的每一个方法，并且每个方法的实现都是类似的：调用对象实例内部的一个<code>InvocationHandler</code>成员变量的<code>invoke()</code>方法，并把自己的方法信息传递进去。实质上就是动态代理：interface中的方法全部由一个另外设定的<code>InvocationHandler</code>对象来进行代理操作。并且，这些方法的具体实现是在运行时生成interface实例时才确定的，而不是在编译时。</p><p><code>invoke()</code>方法中创建interface实例，有三行关键代码：</p><p>1、ServiceMethod的创建：</p><pre><code>ServiceMethod&lt;Object, Object&gt; serviceMethod = （ServiceMethod&lt;Object, Object&gt;）loadServiceMethod(method);</code></pre><p>这行代码负责读取interface中原方法的信息，包括返回值、方法注解、参数类型、参数注解，并将这些信息做初步分支。</p><p>2、OkHttpCall的创建</p><pre><code>OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);</code></pre><p>OkHttpCall是<code>retrofit2.Call</code>的子类。这行代码负责将ServiceMethod封装进<code>retrofit2.Call</code>对象，这个对象可以在需要的时候，例如<code>enqueue()</code>方法被调用的时候，利用ServiceMethod中包含的信息来创建一个<code>okhttp3.Call</code>对象，并调用这个<code>okhttp3.Call</code>对象来进行网络请求的发起，然后对结果进行预处理，如类型转换。</p><p>3、<code>adapt()</code>方法</p><pre><code>return serviceMethod.callAdapter.adapt(okHttpCall);</code></pre><p>这个方法会使用ServiceMethod中的callAdapter对象来把okHttpCall对象进行转换,生成一个新的<code>retrofit2.Call</code>对象，在这个新的Call对象中，后台线程发起的请求，会在相应返回后，从主线程中调用回调方法，实现线程的自动切换。</p><p>另外这个方法不止可以生成新的<code>retrofit2.Call</code>对象，也可以生成别的类型对象，例如RaJava的Obervable，来让Retrofit可以和RaJava结合使用。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射、注解、泛型</title>
    <link href="/2019/04/17/15.%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E6%B3%9B%E5%9E%8B/"/>
    <url>/2019/04/17/15.%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><strong>.java文件，通过编译，生成.class文件，再通过类加载器，加载到jdk内存中并且生成字节码对象class。</strong></p><p>所有的反射功能都是基于我们字节码（class），一个类的class在内存中只有一份，而且class其实也是一个对象Class。</p><h3 id="获取class对象的三种方式"><a href="#获取class对象的三种方式" class="headerlink" title="获取class对象的三种方式"></a>获取class对象的三种方式</h3><p>方式一： 通过Object继承来的方法(getClass)获取对象对应的字节码文件对象</p><pre><code>Person p = new Person();//创建Peron对象Class clazz = p.getClass();//1</code></pre><p>方式二：每一个类型都具备一个class静态属性，通过该属性即可获取该类的字节码文件对象。</p><pre><code>Class clazz = Person.class;</code></pre><p>方式三：必须类全名,使用最多。</p><pre><code>Class clazz = Class.forName(&quot;cn.bean.Person&quot;);//必须类全名</code></pre><h3 id="通过构造函数，获取对象"><a href="#通过构造函数，获取对象" class="headerlink" title="通过构造函数，获取对象"></a>通过构造函数，获取对象</h3><p>默认构造函数</p><pre><code>public class Person &#123;    public Person() &#123;        System.out.println(&quot;无参构造---&quot;);    &#125;&#125;try&#123;    Class clazz = Person.class;    Person person = (Person)clazz.newInstance();&#125; catch (Exception e) &#123;    e.printStackTrace();&#125;</code></pre><p>有参公共构造函数</p><pre><code>public class Person &#123;    private String name;    public Person(String name) &#123;        this.name = name;        System.out.println(&quot;有参构造---&quot; + name);    &#125;&#125;try&#123;    Class clazz = Person.class;    Constructor constructor = clazz.getConstructor(String.class);    Person person = (Person)constructor.newInstance(&quot;张三&quot;);&#125; catch (Exception e) &#123;    e.printStackTrace();&#125;</code></pre><p>无参私有构造</p><pre><code>public class Person &#123;    private Person() &#123;        System.out.println(&quot;无参私有构造---&quot; );    &#125;&#125;try&#123;    Class clazz = Person.class;    Constructor constructor = clazz.getDeclaredConstructor();    constructor.setAccessible(true);    Person person = (Person)constructor.newInstance();&#125; catch (Exception e) &#123;    e.printStackTrace();&#125;</code></pre><p>有参私有构造</p><pre><code>public class Person &#123;    private String name;    private Person(String name) &#123;        this.name = name;        System.out.println(&quot;有参私有构造---&quot; + name);    &#125;&#125;try&#123;    Class clazz = Person.class;    Constructor constructor = clazz.getDeclaredConstructor(String.class);    constructor.setAccessible(true);    Person person = (Person)constructor.newInstance(&quot;张三&quot;);&#125; catch (Exception e) &#123;    e.printStackTrace();&#125;</code></pre><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><pre><code>public class Person &#123;    private String name = &quot;李四&quot;;    public int age = 18;&#125;try &#123;    Class clazz = Person.class;    Person person = (Person) clazz.newInstance();    Field field = clazz.getField(&quot;age&quot;);    int age = (int) field.get(person);    Field fieldDeclared = clazz.getDeclaredField(&quot;name&quot;);    fieldDeclared.setAccessible(true);    String name = (String) fieldDeclared.get(person);    System.out.println(name + &quot;----&quot; + age);&#125; catch (Exception e) &#123;    e.printStackTrace();&#125;</code></pre><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>获取，私有有参方法和公有无参方法</p><pre><code>public class Person &#123;    private String name = &quot;李四&quot;;    public String getName() &#123;        System.out.println(&quot;get:&quot; + name);        return name;    &#125;    private void setName(String name) &#123;        this.name = name;        System.out.println(&quot;set:&quot; + name);    &#125;&#125;try&#123;    Class clazz = Person.class;    Person person = (Person)clazz.newInstance();    Method methodDeclared = clazz.getDeclaredMethod(&quot;setName&quot;, String.class);    methodDeclared.setAccessible(true);    methodDeclared.invoke(person,&quot;张三&quot;);    Method method = clazz.getMethod(&quot;getName&quot;);    method.invoke(person);&#125; catch (Exception e) &#123;    e.printStackTrace();&#125;</code></pre><h3 id="实例：调用静态属性"><a href="#实例：调用静态属性" class="headerlink" title="实例：调用静态属性"></a>实例：调用静态属性</h3><pre><code>Class clazz = Class.forName(&quot;android.app.ActivityThread&quot;);Field sCurrentActivityThreadField =  clazz.getDeclaredField(&quot;sCurrentActivityThread&quot;);sCurrentActivityThreadField.setAccessible(true);//sCurrentActivityThread是静态的，可以传nullObject sCurrentActivityThread = sCurrentActivityThreadField.get(null);</code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解和反射没有什么必然联系。注解只是一个标识（标记），没有具体的功能逻辑代码。注解作用:给jvm看的，给机器看的。注解优点：开发效率高，成本低。注解缺点：耦合性大，并且不利于后期维护。</p><h3 id="jdk5提供的注解"><a href="#jdk5提供的注解" class="headerlink" title="jdk5提供的注解"></a>jdk5提供的注解</h3><pre><code>@Override：告知编译器此方法是覆盖父类的 @Deprecated：标注过时 @SuppressWarnings：压制警告</code></pre><h3 id="编写一个注解"><a href="#编写一个注解" class="headerlink" title="编写一个注解"></a>编写一个注解</h3><p>关键字：<code>@interface</code>。属性：<code>返回值 名称()</code> 。</p><blockquote><p>注意：如果属性的名字是value，并且注解的属性值有一个,那么在使用注解时可以省略value。</p></blockquote><p>注解属性类型只能是以下几种:基本类型、String、枚举类型、注解类型、Class类型、以上类型的一维数组类型。</p><p>元注解：代表修饰注解的注解。作用：限制定义的注解的特性。</p><pre><code>@Retention//代表注解什么时候起作用 SOURCE: 注解在源码级别可见，编程阶段CLASS：注解在字节码文件级别可见，编译时（打包的时候） RUNTIME：注解在整个运行阶段都可见 @Target //代表注解修饰的范围：类上使用，方法上使用，字段上使用 FIELD:字段上可用此注解 METHOD:方法上可以用此注解 TYPE:类/接口上可以使用此注解</code></pre><p>例如</p><pre><code>@Target(ElementType.FIELD)@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</code></pre><p>注解例子</p><pre><code>@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface Anno &#123;    int age() default 28;    String[] value();&#125;@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface Anno2 &#123;    String value();&#125;@Anno2(&quot;张三&quot;)public class Test&#123;    @Anno(value = &#123; &quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;&#125;,age = 18)    public void test()&#123;    &#125;&#125;</code></pre><p><code>default</code>作用是设置默认值,如果设置了<code>default</code>,注解时候可以不传。</p><p>butterknife 用了反射没有？ 一个地方用了Class.fromName().newInstance();（new 对象的时候）。</p><p>补充<code>@Target</code>注解的作用目标</p><pre><code>@Target(ElementType.TYPE)   //接口、类、枚举、注解@Target(ElementType.FIELD) //字段、枚举的常量@Target(ElementType.METHOD) //方法@Target(ElementType.PARAMETER) //方法参数@Target(ElementType.CONSTRUCTOR)  //构造函数@Target(ElementType.LOCAL_VARIABLE)//局部变量@Target(ElementType.ANNOTATION_TYPE)//注解@Target(ElementType.PACKAGE) ///包   </code></pre><h3 id="反射加注解实现"><a href="#反射加注解实现" class="headerlink" title="反射加注解实现"></a>反射加注解实现</h3><p><strong>要想解析使用了注解的类，那么该注解的Retention必须设置成Runtime。</strong>关于注解解析的实质：从注解中解析出属性值。字节码对象存在于获得注解相关的方法。</p><p>运行时注解，仿xutil获取Id（编译时注解-ButterKnife注解）:</p><pre><code>@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)public @interface ViewById &#123;    int value();&#125;public class ViewUtils &#123;    public static void inject(Activity activity) &#123;        // 1.获取所有的属性        Field[] fields = activity.getClass().getDeclaredFields();        // 2.过滤关于 ViewById 属性        for (Field field : fields) &#123;            ViewById viewById =  field.getAnnotation(ViewById.class);            if(viewById != null)&#123;                // 3.findViewById                View view = activity.findViewById(viewById.value());                // 4.反射注入                field.setAccessible(true);                try &#123;                    //activity 属性所在类，view 代表的是属性的值                    field.set(activity,view);                &#125; catch (IllegalAccessException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;@ViewById(R.id.tv)private TextView tv;@Overrideprotected void onCreate(Bundle savedInstanceState) &#123;    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    ViewUtils.inject(this);    tv.setText(&quot;ViewById&quot;);&#125;</code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型的好处：将运行时期的ClassCastException，转移到了编译时期变成了编译失败;避免了类型强转的麻烦。</p><p>缺点：泛型不能用于显性地引用运行时类型的操作之中，例如转型，instanceof和new操作。</p><p>多泛型</p><pre><code>class MorePoint&lt;T,U,A,B,C&gt;&#123;&#125;</code></pre><p>任意一个大写字母都可以。他们的意义是完全相同的，但为了提高可读性，大家还是用有意义的字母比较好，一般来讲，在不同的情境下使用的字母意义如下：</p><pre><code>E — Element，常用在java Collection里，如：List&lt;E&gt;,Iterator&lt;E&gt;,Set&lt;E&gt;K,V — Key，Value，代表Map的键值对N — Number，数字T — Type，类型，如String，Integer等等</code></pre><h3 id="类泛型"><a href="#类泛型" class="headerlink" title="类泛型"></a>类泛型</h3><p>在任何地方出现的，代表的是统一类型。<strong>创建对象时，确定泛型的类型</strong></p><pre><code>class ArrayList&lt;T&gt; &#123;    public boolean add(T e) &#123;        return false;    &#125;    public T get(int index) &#123;        return null;    &#125;&#125;</code></pre><h3 id="方法泛型"><a href="#方法泛型" class="headerlink" title="方法泛型"></a>方法泛型</h3><p>定义格式：<code>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数)&#123;泛型类型 变量名&#125;</code></p><p>例如，API中的ArrayList集合中的方法：</p><pre><code>//该方法，用来把集合元素存储到指定数据类型的数组中，返回已存储集合元素的数组public &lt;T&gt; T[] toArray(T[] a)&#123;  &#125;  //使用格式：调用方法时，确定泛型的类型ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();String[] arr = new String[100];String[] result = list.toArray(arr);</code></pre><blockquote><p>方法泛型最好与类的泛型一致,如果不一致,需要在方法上声明该泛型静态方法必须声明自己的泛型</p></blockquote><h3 id="泛型的接口"><a href="#泛型的接口" class="headerlink" title="泛型的接口"></a>泛型的接口</h3><pre><code>//带有泛型的接口public interface List &lt;E&gt;&#123;    abstract boolean add(E e);&#125;//一种实现类,先实现接口,不理会泛型public class ArrayList&lt;E&gt; implements List&lt;E&gt;&#123;&#125;  //另一种实现类,实现接口的同时,也指定了数据类型public class XXX implements List&lt;String&gt;&#123;&#125;</code></pre><h3 id="泛型的通配"><a href="#泛型的通配" class="headerlink" title="泛型的通配"></a>泛型的通配</h3><p>匹配所有的数据类型:<code>&lt;?&gt;</code>。</p><h3 id="泛型的上限和下限"><a href="#泛型的上限和下限" class="headerlink" title="泛型的上限和下限"></a>泛型的上限和下限</h3><pre><code>// 上限，限制的是父类,接收BaseActivity和它的子类public void startActivity(Class&lt;? extends BaseActivity&gt; clazz) &#123;    Intent intent = new Intent(this,clazz);    startActivity(intent);&#125;//下限，限制的是子类,接收BaseActivity和它的父类public void startActivity1(Class&lt;? super BaseActivity&gt; clazz) &#123;    Intent intent = new Intent(this,clazz);    startActivity(intent);&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win下Fiddler和mac下charles抓包</title>
    <link href="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/"/>
    <url>/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h2><p>准备：win下的Fiddler，mac下的charles，安卓手机。</p><p>手机：打开手机WIFI高级设置，代理服务器类型改为”手动”，代理服务器地址填入PC的IP地址，填入代理服务器端口值，一般默认为8888。</p><p>ip：方式一：win通过ipconfig，mac通过ifconfig，快速查询电脑ip。</p><p>方式二：顶部菜单：Fiddler右上角;charles中Help → Local IP Address。</p><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/10.png" alt></p><h2 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h2><p>Fiddler官网</p><pre><code>https://www.telerik.com/fiddler</code></pre><h3 id="端口号设置"><a href="#端口号设置" class="headerlink" title="端口号设置"></a>端口号设置</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/1.png" alt></p><h3 id="过滤设置"><a href="#过滤设置" class="headerlink" title="过滤设置"></a>过滤设置</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/2.png" alt></p><h3 id="查看请求和返回数据"><a href="#查看请求和返回数据" class="headerlink" title="查看请求和返回数据"></a>查看请求和返回数据</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/3.png" alt></p><h3 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/4.png" alt></p><blockquote><p>注意4中为请求头，5中为请求体。</p></blockquote><h3 id="抓取https"><a href="#抓取https" class="headerlink" title="抓取https"></a>抓取https</h3><p>手机自带浏览器输入<code>ip:端口号</code>下载证书</p><h3 id="修改请求或返回参数"><a href="#修改请求或返回参数" class="headerlink" title="修改请求或返回参数"></a>修改请求或返回参数</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/5.png" alt></p><blockquote><p>步骤：1设置修改返回数据，2去掉勾勾，3修改返回数据，4打上勾勾，5输入<code>go</code>回车。</p></blockquote><h2 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h2><p>charles官网，30天试用</p><pre><code>https://www.charlesproxy.com/</code></pre><h3 id="端口号设置-1"><a href="#端口号设置-1" class="headerlink" title="端口号设置"></a>端口号设置</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/6.png" alt></p><p>通过菜单栏：proxy → Proxy Settings，进行查看当前或者修改当前代理端口，并且保证Enable transparent HTTP proxying被勾选。</p><h3 id="过滤设置-1"><a href="#过滤设置-1" class="headerlink" title="过滤设置"></a>过滤设置</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/7.png" alt></p><p>菜单栏选择 “Proxy”-&gt;”Recording Settings”，然后选择Include栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。</p><h3 id="查看请求和返回数据-1"><a href="#查看请求和返回数据-1" class="headerlink" title="查看请求和返回数据"></a>查看请求和返回数据</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/8.png" alt></p><p>Structure视图模式下，所有的请求是以域名进行分类显示的;Sequence视图模式下，会将所有的网络请求都按照访问的时间从上到下进行排序。</p><h3 id="抓取https-1"><a href="#抓取https-1" class="headerlink" title="抓取https"></a>抓取https</h3><p>在Mac上安装CA证书:通过顶部菜单选择：Help → SSL Proxying → Install Charles Root Certificate，来安装CA证书。</p><p>安卓手机安装Charles证书:在Charles菜单栏里点击Help — SSL Proxying — Save Charles Root Certificate，生成后缀名是.cer的文件，然后传到手机安装。</p><p>最后:双击对应证书，打开简介全部信任。</p><p><strong>如果还是不行:设置匹配规则，菜单栏 - proxy - ssl proxy settings，重启</strong></p><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/9.png" alt></p><h3 id="模拟限流网络"><a href="#模拟限流网络" class="headerlink" title="模拟限流网络"></a>模拟限流网络</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/11.png" alt></p><p>Proxy → Throttle Setting，勾选Enable Throttling然后在1中选择我们需要网络环境。开启限速之后，2处的小乌龟图标也会高亮，点击小乌龟，就可以关闭限速模式。</p><h3 id="重发请求-模拟请求"><a href="#重发请求-模拟请求" class="headerlink" title="重发请求,模拟请求"></a>重发请求,模拟请求</h3><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/12.png" alt></p><p>在网络请求上，右键选择Repeat，即可对这个链接重新发送一遍。右键选择Compose，就可以对这个请求进行编辑。</p><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/13.png" alt></p><p>对网络请求的任意修改后,点击Execute即可将修改后的数据直接发送出去;点击Revert就恢复到最初的数据了。</p><h3 id="修改请求响应数据"><a href="#修改请求响应数据" class="headerlink" title="修改请求响应数据"></a>修改请求响应数据</h3><p>Map适合将所有的A请求，重定向到，B地址请求(Map Remote)或者本地文件(Map Local)。</p><p>设置Map Remote或者Map Local可以在，顶部菜单中选择Tools或者请求链接上右键。请求链接上，点击右键save，可以保存请求或者响应的数据文件。</p><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/14.png" alt></p><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/15.png" alt></p><p>Rewrite功能适合对所有网络请求做一些简单的正则匹配后，对匹配的内容进行替换。</p><p>顶部菜单栏中，选择Tools → Rewrite。图中将所有响应体中“查询新闻列表成功”替换成了“我成功啦”。1处可以添加url。</p><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/16.png" alt></p><p>Breakpoints类似于调试的断点。每次触发 Breakpoint 都会断住两次，一次是 request、一次是 response,可以分别对请求和响应的数据进行修改。点击2处execute继续执行。</p><p>请求链接上点击右键，然后选择Breakpoints:接下来的相同url会被断点。或者点击1处的六边形，有颜色就开始对接下来的请求依次断点，直至终止。</p><p><img src="/2019/04/12/14.win%E4%B8%8BFiddler%E5%92%8Cmac%E4%B8%8Bcharles%E6%8A%93%E5%8C%85/14.win下Fiddler和mac下charles抓包/17.png" alt></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fiddler</tag>
      
      <tag>charles</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="/2019/04/03/13.Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/04/03/13.Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><hr><p>Vue.js是一套构建用户界面的框架，只关注视图层。可以减少不必要的DOM操作，提高渲染效率。</p><p>打包工具：WebPack和Gulp。</p><p>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑。</p><p>框架：一套完整的技术解决方案，对项目侵入性较大；库（插件）：提供某一小功能，侵入性小。</p><hr><h3 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h3><hr><p><strong>MVVM是前端视图层的概念，主要关注于视图层分离，把前端的视图层分为三部分，Model(数据)、View(每个页面的HTML结构)、ViewModel(调度者，数据双向绑定，可以理解为View和Model的通信桥梁)。</strong></p><p>引入</p><pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;</code></pre><p>实例</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;      &lt;!-- Vue 实例所控制的这个元素区域，就是我们的V  --&gt;    &lt;div id=&quot;vue_det&quot;&gt;        &lt;h1&gt;url : &#123;&#123;url&#125;&#125;&lt;/h1&gt;        &lt;h1&gt;&#123;&#123;details()&#125;&#125;&lt;/h1&gt;    &lt;/div&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        // new 出来的这个 vm 对象，就是我们 MVVM中的 VM调度者        var vm = new Vue(&#123;            // 表示new 的这个 Vue 实例，要控制页面上的哪个区域            el: &apos;#vue_det&apos;,            // 这里的 data 就是 MVVM中的 M，专门用来保存 每个页面的数据的            data: &#123;                url: &quot;http://www.baidu.com&quot;            &#125;,            methods: &#123;                details: function() &#123;                    return  this.url + &quot; - 百度一下&quot;;                &#125;            &#125;        &#125;)        document.write(vm.url)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>文本插值使用双大括号:</p><pre><code>&#123;&#123;&#125;&#125;----------------------------------### Vue调试谷歌应用商店搜索`Vue.js devtools`----------------------------------### 教程https://cn.vuejs.org/v2/guide/https://github.com/pagekit/vue-resourcehttp://cubic-bezier.com/#.17,.67,.83,.67----------------------------------## 指令----------------------------------指令是带有 `v-` 前缀的特殊属性。指令用于在表达式的值改变时，将某些行为应用到 `DOM` 上。----------------------------------### v-cloak解决插值表达式闪烁问题，只替换占位符。### v-textv-text默认没有闪烁问题，替换内容时会把整个元素替换。### v-html用于输出html格式的，也会替换全部内容。### v-bind**绑定属性的指令**，用于监听DOM事件。`v-bind:`可以省略为`:`。变量加常量的效果可以实现。### v-on**事件绑定机制**。`v-on:`可以省略为`@`。代码：<!DOCTYPE html><html lang="en" xmlns:v-bind="http://www.w3.org/1999/xhtml"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>Document</title>    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>    <style>        [v-cloak] &#123;            display: none;        &#125;    </style></head><body><div id="app">    <!-- 使用 v-cloak 能够解决 插值表达式闪烁的问题 -->    <p v-cloak>++++++++ &#123;&#123; msg &#125;&#125; ----------&lt;/p&gt;    &lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;    &lt;!-- v-text会覆盖元素中原本的内容，但是 插值表达式  只会替换自己的这个占位符，不会把 整个元素的内容清空 --&gt;    &lt;h4 v-text=&quot;msg&quot;&gt;==================&lt;/h4&gt;    &lt;div&gt;&#123;&#123;msg2&#125;&#125;&lt;/div&gt;    &lt;div v-text=&quot;msg2&quot;&gt;&lt;/div&gt;    &lt;div v-html=&quot;msg2&quot;&gt;1212112&lt;/div&gt;    &lt;!-- v-bind: 是 Vue中，提供的用于绑定属性的指令 --&gt;    &lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle + &apos;123&apos;&quot;&gt;    &lt;!-- 注意： v-bind: 指令可以被简写为 :要绑定的属性 --&gt;    &lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;    &lt;!-- Vue 中提供了 v-on: 事件绑定机制 --&gt;    &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;show&quot;&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            msg: &apos;123&apos;,            msg2: &apos;&lt;h1&gt;哈哈，我是一个大大的H1， 我大，我骄傲&lt;/h1&gt;&apos;,            mytitle: &apos;这是一个自己定义的title&apos;        &#125;,        methods: &#123; // 这个 methods属性中定义了当前Vue实例所有可用的方法            show: function () &#123;                alert(&apos;Hello&apos;)            &#125;        &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</p></div></body></html></code></pre><hr><h3 id="示例之跑马灯"><a href="#示例之跑马灯" class="headerlink" title="示例之跑马灯"></a>示例之跑马灯</h3><hr><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;!-- 导入Vue包 --&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;浪起来&quot; @click=&quot;lang&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;低调&quot; @click=&quot;stop&quot;&gt;    &lt;h4&gt;&#123;&#123; msg &#125;&#125;&lt;/h4&gt;&lt;/div&gt;&lt;script&gt;    // 注意：在 VM实例中，如果想要获取 data 上的数据，或者 想要调用 methods 中的 方法，必须通过 this.数据属性名  或  this.方法名 来进行访问，这里的this，就表示 我们 new 出来的  VM 实例对象    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            msg: &apos;猥琐发育，别浪~~！&apos;,            intervalId: null // 在data上定义 定时器Id        &#125;,        methods: &#123;            lang() &#123;                if (this.intervalId != null) return;                this.intervalId = setInterval(() =&gt; &#123;                    var start = this.msg.substring(0, 1)                    // 获取到 后面的所有字符                    var end = this.msg.substring(1)                    // 重新拼接得到新的字符串，并赋值给 this.msg                    this.msg = end + start                &#125;, 400)            // 注意： VM实例，会监听自己身上 data 中所有数据的改变，只要数据一发生变化，就会自动把 最新的数据，从data 上同步到页面中去；【好处：程序员只需要关心数据，不需要考虑如何重新渲染DOM页面】        &#125;,        stop() &#123; // 停止定时器            clearInterval(this.intervalId)            // 每当清除了定时器之后，需要重新把 intervalId 置为 null            this.intervalId = null;        &#125;    &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a><code>v-model</code></h3><hr><p><strong>双向数据绑定，唯一的一个</strong>。<code>v-bind</code>只能实现数据的单向绑定，从M自动绑定到V，无法实现数据的双向绑定。 <code>v-model</code>可以实现表单元素和Model中数据双向绑定。</p><p>注意:只能用到在<code>input、select、text、checkbox、radio</code>等表单元素中。根据表单上的值，自动更新绑定的元素的值。</p><p><code>v-model</code>实现简单计算器</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:v-model=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;    &lt;script src=&quot;lib/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;text&quot; v-model=&quot;n1&quot;/&gt;    &lt;select v-model=&quot;opt&quot;&gt;        &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;        &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;        &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;        &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;    &lt;/select&gt;    &lt;input type=&quot;text&quot; v-model=&quot;n2&quot;/&gt;    &lt;input type=&quot;button&quot; value=&quot;=&quot; @click=&quot;calc&quot;/&gt;    &lt;input type=&quot;text&quot; v-model=&quot;result&quot;/&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            n1:0,            n2:0,            result:0,            opt:&quot;+&quot;        &#125;,        methods:&#123;            calc:function()&#123;                /*switch (this.opt)&#123;                    case &quot;+&quot;:                       this.result = parseInt(this.n1)+parseInt(this.n2)                        break;                    case &quot;-&quot;:                        this.result = parseInt(this.n1)-parseInt(this.n2)                        break;                    case &quot;*&quot;:                        this.result = parseInt(this.n1)*parseInt(this.n2)                        break;                    case &quot;/&quot;:                        this.result = parseInt(this.n1)/parseInt(this.n2)                        break;                &#125;*/                var codeStr =&quot;parseInt(this.n1)&quot;+ this.opt + &quot;parseInt(this.n2)&quot;                this.result = eval(codeStr)            &#125;        &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><code>v-for</code></h3><hr><p>v-for 指令需要以<code>site in sites</code>形式的特殊语法， sites是源数据数组并且site是数组元素迭代的别名。</p><p>循环普通数组；循环对象数组；循环对象，包含key，value，和索引；迭代数字，从1开始。</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;!--循环普通数组--&gt;    &lt;p v-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;    &lt;p v-for=&quot;(item,i) in list&quot;&gt;索引值是&#123;&#123;i&#125;&#125;，每一项是&#123;&#123;item&#125;&#125;&lt;/p&gt;    &lt;!--循环对象数组--&gt;    &lt;p v-for=&quot;item in list2&quot;&gt;&#123;&#123;item.id&#125;&#125;和&#123;&#123;item.name&#125;&#125;&lt;/p&gt;    &lt;p v-for=&quot;(item,i) in list2&quot;&gt;索引值是&#123;&#123;i&#125;&#125;&lt;/p&gt;    &lt;!--循环对象--&gt;    &lt;p v-for=&quot;val in user&quot;&gt;&#123;&#123;val&#125;&#125;&lt;/p&gt;    &lt;p v-for=&quot;(val,key) in user&quot;&gt;&#123;&#123;val&#125;&#125;---&#123;&#123;key&#125;&#125;&lt;/p&gt;    &lt;p v-for=&quot;(val,key,i) in user&quot;&gt;&#123;&#123;val&#125;&#125;---&#123;&#123;key&#125;&#125;----&#123;&#123;i&#125;&#125;&lt;/p&gt;    &lt;!--迭代数字--&gt;    &lt;p v-for=&quot;count in 10&quot;&gt;这是第&#123;&#123;count&#125;&#125;次&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            list:[1,2,3,4,5,6],            list2:[                &#123;id:1,name:&quot;a&quot;&#125;,                &#123;id:2,name:&quot;b&quot;&#125;,                &#123;id:3,name:&quot;c&quot;&#125;,                &#123;id:4,name:&quot;d&quot;&#125;            ],            user:&#123;                id:1,                name:&quot;张三&quot;,                sex:&quot;男&quot;            &#125;        &#125;    &#125;)&lt;/script&gt;</code></pre><p>注意：在2.2.0+的版本里，当在组件中使用<code>v-for</code>时，key是必须的。<strong>key属性只能使用number或者string，必须使用v-bind属性绑定的形式，指定key的值。</strong></p><pre><code>&lt;p v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&lt;/p&gt;</code></pre><hr><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a><code>v-if</code>和<code>v-show</code></h3><hr><p>根据表达式的值来决定是否插入元素。</p><p><code>v-if</code>每次都会重新删除或者创建元素，切换消耗性能；<code>v-show</code>只是切换了元素<code>display:none</code>样式，较高的初始渲染消耗。</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; @click=&quot;flag=!flag&quot; value=&quot;toggle&quot;/&gt;    &lt;h3 v-if=&quot;flag&quot;&gt;这是v-if控制&lt;/h3&gt;    &lt;h3 v-show=&quot;flag&quot;&gt;这是v-show控制&lt;/h3&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            flag:true        &#125;    &#125;)&lt;/script&gt;</code></pre><p><code>v-else-if</code>和<code>v-else</code>的使用</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;    &lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;      A    &lt;/div&gt;    &lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;      B    &lt;/div&gt;    &lt;div v-else&gt;      Not A/B    &lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;    new Vue(&#123;      el: &apos;#app&apos;,      data: &#123;        type: &apos;C&apos;      &#125;    &#125;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><hr><p>修饰符是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</p><h3 id="stop"><a href="#stop" class="headerlink" title=".stop"></a><code>.stop</code></h3><p>阻止事件冒泡</p><h3 id="prevent"><a href="#prevent" class="headerlink" title=".prevent"></a><code>.prevent</code></h3><p>阻止默认事件</p><h3 id="capture"><a href="#capture" class="headerlink" title=".capture"></a><code>.capture</code></h3><p>捕获事件</p><h3 id="self"><a href="#self" class="headerlink" title=".self"></a><code>.self</code></h3><p>只当事件在该元素本身触发时，触发回调。只会阻止自己身上冒泡行为的触发，并不会真正阻止冒泡行为。</p><h3 id="once"><a href="#once" class="headerlink" title=".once"></a><code>.once</code></h3><p>事件只触发一次</p><p>代码</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;    &lt;script src=&quot;lib/vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        .inner&#123;            height: 150px;            background-color: darkcyan;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;div class=&quot;inner&quot; @click=&quot;div1&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click.stop=&quot;btn&quot;/&gt;        &lt;/div&gt;        &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;linkClick&quot;&gt;百度&lt;/a&gt;        &lt;div class=&quot;inner&quot; @click.capture=&quot;div1&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click=&quot;btn&quot;/&gt;        &lt;/div&gt;        &lt;div class=&quot;inner&quot; @click.self=&quot;div1&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click=&quot;btn&quot;/&gt;        &lt;/div&gt;        &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.once=&quot;linkClick&quot;&gt;百度&lt;/a&gt;    &lt;/div&gt;    &lt;script&gt;        var vm = new Vue(&#123;            el: &quot;#app&quot;,            data: &#123;                div1:function()&#123;                    console.log(&quot;div1click&quot;)                &#125;,                btn:function()&#123;                    console.log(&quot;btnclick&quot;)                &#125;,                linkClick:function()&#123;                    console.log(&quot;btnclick&quot;)                &#125;            &#125;        &#125;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="class样式"><a href="#class样式" class="headerlink" title="class样式"></a>class样式</h3><hr><p>格式：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;!--直接绑定--&gt;    &lt;h1 v-bind:class=&quot;[&apos;类名1&apos;,&apos;类名2&apos;,&apos;类名3&apos;]&quot;&gt;&lt;/h1&gt;    &lt;!--直接绑定，简写--&gt;    &lt;h1 :class=&quot;[&apos;类名1&apos;,&apos;类名2&apos;,&apos;类名3&apos;]&quot;&gt;&lt;/h1&gt;    &lt;!--三元运算--&gt;    &lt;h1 :class=&quot;[&apos;类名1&apos;,&apos;类名2&apos;,flag?&apos;类名3&apos;:&apos;&apos;]&quot;&gt;&lt;/h1&gt;    &lt;!--嵌套对象--&gt;    &lt;h1 :class=&quot;[&apos;类名1&apos;,&apos;类名2&apos;,&#123;&apos;类名3&apos;:flag&#125;]&quot;&gt;&lt;/h1&gt;    &lt;!--使用对象--&gt;    &lt;h1 :class=&quot;&#123;类名1:true,类名2:true,类名3:true&#125;&quot;&gt;&lt;/h1&gt;    &lt;!--抽取对象--&gt;    &lt;h1 :class=&quot;classObj&quot;&gt;&lt;/h1&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            flag: true,            classObj:&#123;类名1:true,类名2:true,类名3:true&#125;        &#125;    &#125;)&lt;/script&gt;</code></pre><p>代码：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;  &lt;script src=&quot;./lib/vue-2.4.0.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;    .red &#123;      color: red;    &#125;    .thin &#123;      font-weight: 200;    &#125;    .italic &#123;      font-style: italic;    &#125;    .active &#123;      letter-spacing: 0.5em;    &#125;  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;!-- &lt;h1 class=&quot;red thin&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;    &lt;!-- 第一种使用方式，直接传递一个数组，注意： 这里的 class 需要使用  v-bind 做数据绑定 --&gt;    &lt;!-- &lt;h1 :class=&quot;[&apos;thin&apos;, &apos;italic&apos;]&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;    &lt;!-- 在数组中使用三元表达式 --&gt;    &lt;!-- &lt;h1 :class=&quot;[&apos;thin&apos;, &apos;italic&apos;, flag?&apos;active&apos;:&apos;&apos;]&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;    &lt;!-- 在数组中使用 对象来代替三元表达式，提高代码的可读性 --&gt;    &lt;!-- &lt;h1 :class=&quot;[&apos;thin&apos;, &apos;italic&apos;, &#123;&apos;active&apos;:flag&#125; ]&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;    &lt;!-- 在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符 --&gt;    &lt;h1 :class=&quot;classObj&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt;  &lt;/div&gt;  &lt;script&gt;    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue(&#123;      el: &apos;#app&apos;,      data: &#123;        flag: true,        classObj: &#123; red: true, thin: true, italic: false, active: false &#125;      &#125;,      methods: &#123;&#125;    &#125;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><hr><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;!--直接绑定--&gt;    &lt;h1 :style=&quot;&#123;color:&apos;red&apos;,&apos;font-weight&apos;:200&#125;&quot;&gt;哈哈哈&lt;/h1&gt;    &lt;!--data--&gt;    &lt;h1 :style=&quot;styleObj1&quot;&gt;哈哈哈&lt;/h1&gt;    &lt;!--多个data--&gt;    &lt;h1 :style=&quot;[styleObj1,styleObj2]&quot;&gt;哈哈哈&lt;/h1&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &quot;#app&quot;,        data: &#123;            styleObj1 : &#123;color:&apos;red&apos;,&apos;font-weight&apos;:200&#125;,            styleObj2 : &#123;&apos;font-style&apos;:&apos;italic&apos;&#125;,        &#125;    &#125;)&lt;/script&gt;</code></pre><hr><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><hr><p>Vue允许你自定义过滤器，被用作一些常见的文本格式化。过滤器可以用在两个地方：双括号插值和<code>v-bind</code>表达式，过滤器应该被添加在js表达式的尾部，由管道符(<code>|</code>)提示。</p><p>过滤器中function第一个参数已经被规定死了：永远是管道符前面传递过来的数据。</p><p>全局过滤器和私有过滤器：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;&#123;&#123; message | data1 &#125;&#125;&lt;/p&gt;    &lt;p&gt;&#123;&#123; message | data2("嘻嘻")&#125;&#125;&lt;/p&gt;    &lt;p&gt;&#123;&#123; message | data1 | data3&#125;&#125;&lt;/p&gt;    &lt;p&gt;&#123;&#123; message | data4 &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    //方式一：全局过滤器    Vue.filter(&apos;data1&apos;,function(value)&#123;        return value+&quot;嘻嘻&quot;    &#125;)    //方式二：可以多个参数    Vue.filter(&apos;data2&apos;,function(value,arg1)&#123;        return value+arg1    &#125;)    //方式三：可以多次调用    Vue.filter(&apos;data3&apos;,function(value)&#123;        return value+&quot;哈哈&quot;    &#125;)    new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            message: &apos;哈哈哈&apos;        &#125;,        //方式四：私有过滤器        filters: &#123;            data4: function (value) &#123;                return value+&quot;嘻嘻&quot;            &#125;        &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>注意：使用<code>ES6</code>中的字符串新方法 <code>String.prototype.padStart(maxLength, fillString=&#39;&#39;)</code> 或 <code>String.prototype.padEnd(maxLength, fillString=&#39;&#39;)</code>来填充字符串。</p><hr><h2 id="自定义键盘修饰符"><a href="#自定义键盘修饰符" class="headerlink" title="自定义键盘修饰符"></a>自定义键盘修饰符</h2><hr><pre><code>Vue.config.keyCodes.f2 = 113</code></pre><hr><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><hr><p>和js相关的最好在<code>inserted</code>中执行；和样式相关的，一般在<code>bind</code>中执行。</p><p><code>Vue.directive</code>:</p><pre><code>Vue.directive(&apos;focus&apos;, &#123;  bind: function (el) &#123; // 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次  &#125;,  inserted: function (el) &#123;  // inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】  &#125;,  updated: function (el) &#123;  // 当VNode更新的时候，会执行 updated， 可能会触发多次  &#125;&#125;)</code></pre><p>全局指令和私有指令。自定义指令下的钩子函数。</p><pre><code>https://cn.vuejs.org/v2/guide/custom-directive.html</code></pre><p>私有指令：</p><pre><code>var vm2 = new Vue(&#123;  el: &apos;#app&apos;,  data: &#123;  &#125;,  methods: &#123;&#125;,  filters: &#123; // 定义私有过滤器    过滤器有两个 条件  【过滤器名称 和 处理函数】  &#125;,  directives: &#123; // 自定义私有指令  &#125;&#125;)</code></pre><p>简写方式：</p><pre><code>directives: &#123; // 自定义私有指令    &apos;fontsize&apos;: function (el, binding) &#123; // 注意：这个 function 等同于 把 代码写到了 bind 和 update 中去      el.style.fontSize = parseInt(binding.value) + &apos;px&apos;    &#125;  &#125;</code></pre><hr><h2 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a>vue实例的生命周期</h2><hr><p>生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期。生命周期钩子 = 生命周期函数 = 生命周期事件。</p><p>主要的生命周期函数分类：</p><ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好data和methods属性。</li><li>created：实例已经在内存中创建好，此时data和methods已经创建好，此时还没有开始编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：当data改变时候才会执行<ul><li>beforeUpdate：状态更新之前执行此函数， 此时data中的状态值是最新的，但是界面上显示的数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue实例销毁后调用。调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul><p>代码：</p><pre><code>// 创建 Vue 实例，得到 ViewModelvar vm = new Vue(&#123;  el: &apos;#app&apos;,  data: &#123;    msg: &apos;ok&apos;  &#125;,  methods: &#123;    show() &#123;      console.log(&apos;执行了show方法&apos;)    &#125;  &#125;,  beforeCreate() &#123; // 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它    // 注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化  &#125;,  created() &#123; // 这是遇到的第二个生命周期函数    //  在 created 中，data 和 methods 都已经被初始化好了！    // 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作  &#125;,  beforeMount() &#123; // 这是遇到的第3个生命周期函数，表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中    // console.log(document.getElementById(&apos;h3&apos;).innerText)//&#123;&#123;msg&#125;&#125;    // 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串  &#125;,  mounted() &#123; // 这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了    // console.log(document.getElementById(&apos;h3&apos;).innerText)    // 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动  &#125;,  // 接下来的是运行中的两个事件  beforeUpdate() &#123; // 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】    /* console.log(&apos;界面上元素的内容：&apos; + document.getElementById(&apos;h3&apos;).innerText)    console.log(&apos;data 中的 msg 数据是：&apos; + this.msg) */    // 得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步  &#125;,  updated() &#123;    console.log(&apos;界面上元素的内容：&apos; + document.getElementById(&apos;h3&apos;).innerText)    console.log(&apos;data 中的 msg 数据是：&apos; + this.msg)    // updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的  &#125;&#125;);</code></pre><p><strong>页面初始化可以在created中请求网络。</strong></p><hr><h2 id="vue-resource实现网络请求"><a href="#vue-resource实现网络请求" class="headerlink" title="vue-resource实现网络请求"></a>vue-resource实现网络请求</h2><hr><pre><code>https://github.com/pagekit/vue-resource</code></pre><p>直接在页面中，通过script标签，引入vue-resource的脚本文件,注意：引用的先后顺序是：先引用Vue的脚本文件，再引用vue-resource的脚本文件；</p><pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-resource@1.5.1&quot;&gt;&lt;/script&gt;</code></pre><p>发送get请求：</p><pre><code>getInfo() &#123; // get 方式获取数据  this.$http.get(&apos;url&apos;).then(res =&gt; &#123;    console.log(res.body);  &#125;)&#125;</code></pre><p>发送post请求：</p><pre><code>postInfo() &#123;  // post 方法接收三个参数：  // 参数1： 要请求的URL地址  // 参数2： 要发送的数据对象  // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded  this.$http.post(url, &#123; name: &apos;zs&apos; &#125;, &#123; emulateJSON: true &#125;).then(res =&gt; &#123;    console.log(res.body);  &#125;);&#125;</code></pre><p>发送JSONP请求获取数据：</p><pre><code>jsonpInfo() &#123; // JSONP形式从服务器获取数据  this.$http.jsonp(url).then(res =&gt; &#123;    console.log(res.body);  &#125;);&#125;</code></pre><p>JSONP的实现原理</p><ul><li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的数据接口，浏览器认为这种访问不安全；</li><li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li><li>具体实现过程：<pre><code>- 先在客户端定义一个回调方法，预定义对数据的操作；</code></pre><ul><li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li><li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li><li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li></ul></li></ul><p>除了vue-resource之外，axios也可以实现数据请求。</p><p>全局配置</p><pre><code>// 如果我们通过全局配置了，请求的数据接口 根域名，则 ，在每次单独发起 http 请求的时候，请求的 url 路径，应该以相对路径开头，前面不能带 /  ，否则 不会启用根路径做拼接；Vue.http.options.root = &apos;http://vue.studyit.io/&apos;;// 全局启用 emulateJSON 选项Vue.http.options.emulateJSON = true;</code></pre><hr><h2 id="练习-品牌案例"><a href="#练习-品牌案例" class="headerlink" title="练习-品牌案例"></a>练习-品牌案例</h2><hr><p>需要bootstra样式</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;./lib/bootstrap-3.3.7.css&quot;&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;div class=&quot;panel panel-primary&quot;&gt;      &lt;div class=&quot;panel-heading&quot;&gt;        &lt;h3 class=&quot;panel-title&quot;&gt;添加品牌&lt;/h3&gt;      &lt;/div&gt;      &lt;div class=&quot;panel-body form-inline&quot;&gt;        &lt;label&gt;          Id:          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;id&quot;&gt;        &lt;/label&gt;        &lt;label&gt;          Name:          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;name&quot; @keyup.f2=&quot;add&quot;&gt;        &lt;/label&gt;        &lt;!-- 在Vue中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了 --&gt;        &lt;input type=&quot;button&quot; value=&quot;添加&quot; class=&quot;btn btn-primary&quot; @click=&quot;add()&quot;&gt;        &lt;label&gt;          搜索名称关键字：          &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;keywords&quot; id=&quot;search&quot; v-focus v-color=&quot;&apos;green&apos;&quot;&gt;        &lt;/label&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;table class=&quot;table table-bordered table-hover table-striped&quot;&gt;      &lt;thead&gt;        &lt;tr&gt;          &lt;th&gt;Id&lt;/th&gt;          &lt;th&gt;Name&lt;/th&gt;          &lt;th&gt;Ctime&lt;/th&gt;          &lt;th&gt;Operation&lt;/th&gt;        &lt;/tr&gt;      &lt;/thead&gt;      &lt;tbody&gt;        &lt;tr v-for=&quot;item in search(keywords)&quot; :key=&quot;item.id&quot;&gt;          &lt;td&gt;&#123;&#123; item.id &#125;&#125;&lt;/td&gt;          &lt;td v-text=&quot;item.name&quot;&gt;&lt;/td&gt;          &lt;td&gt;&#123;&#123; item.ctime | dateFormat() &#125;&#125;&lt;/td&gt;          &lt;td&gt;            &lt;a href=&quot;&quot; @click.prevent=&quot;del(item.id)&quot;&gt;删除&lt;/a&gt;          &lt;/td&gt;        &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;  &lt;/div&gt;  &lt;script&gt;    Vue.filter(&apos;dateFormat&apos;, function (dateStr, pattern = &quot;&quot;) &#123;      // 根据给定的时间字符串，得到特定的时间      var dt = new Date(dateStr)      //   yyyy-mm-dd      var y = dt.getFullYear()      var m = dt.getMonth() + 1      var d = dt.getDate()      if (pattern.toLowerCase() === &apos;yyyy-mm-dd&apos;) &#123;        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`      &#125; else &#123;        var hh = dt.getHours()        var mm = dt.getMinutes()        var ss = dt.getSeconds()        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`      &#125;    &#125;)    // 自定义全局按键修饰符    Vue.config.keyCodes.f2 = 113    // 使用  Vue.directive() 定义全局的指令  v-focus    // 其中：参数1 ： 指令的名称，注意，在定义的时候，指令的名称前面，不需要加 v- 前缀,     // 但是： 在调用的时候，必须 在指令名称前 加上 v- 前缀来进行调用    //  参数2： 是一个对象，这个对象身上，有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作    Vue.directive(&apos;focus&apos;, &#123;      bind: function (el) &#123; // 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次        // 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象        // 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用        //  因为，一个元素，只有插入DOM之后，才能获取焦点        // el.focus()      &#125;,      inserted: function (el) &#123;  // inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】        el.focus()        // 和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效      &#125;,      updated: function (el) &#123;  // 当VNode更新的时候，会执行 updated， 可能会触发多次      &#125;    &#125;)    // 自定义一个 设置字体颜色的 指令    Vue.directive(&apos;color&apos;, &#123;      // 样式，只要通过指令绑定给了元素，不管这个元素有没有被插入到页面中去，这个元素肯定有了一个内联的样式      // 将来元素肯定会显示到页面中，这时候，浏览器的渲染引擎必然会解析样式，应用给这个元素      bind: function (el, binding) &#123;        // el.style.color = &apos;red&apos;        // console.log(binding.name)        // 和样式相关的操作，一般都可以在 bind 执行        // console.log(binding.value)        // console.log(binding.expression)        el.style.color = binding.value      &#125;    &#125;)    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue(&#123;      el: &apos;#app&apos;,      data: &#123;        id: &apos;&apos;,        name: &apos;&apos;,        keywords: &apos;&apos;, // 搜索的关键字        list: [          &#123; id: 1, name: &apos;奔驰&apos;, ctime: new Date() &#125;,          &#123; id: 2, name: &apos;宝马&apos;, ctime: new Date() &#125;        ]      &#125;,      methods: &#123;        add() &#123; // 添加的方法          var car = &#123; id: this.id, name: this.name, ctime: new Date() &#125;          this.list.push(car)          this.id = this.name = &apos;&apos;        &#125;,        del(id) &#123; // 根据Id删除数据          var index = this.list.findIndex(item =&gt; &#123;            if (item.id == id) &#123;              return true;            &#125;          &#125;)          this.list.splice(index, 1)        &#125;,        search(keywords) &#123; // 根据关键字，进行数据的搜索          /* var newList = []          this.list.forEach(item =&gt; &#123;            if (item.name.indexOf(keywords) != -1) &#123;              newList.push(item)            &#125;          &#125;)          return newList */          // 注意：  forEach   some   filter   findIndex   这些都属于数组的新方法，          //  都会对数组中的每一项，进行遍历，执行相关的操作；          return this.list.filter(item =&gt; &#123;            // if(item.name.indexOf(keywords) != -1)            // 注意 ： ES6中，为字符串提供了一个新方法，叫做  String.prototype.includes(&apos;要包含的字符串&apos;)            //  如果包含，则返回 true ，否则返回 false            //  contain            if (item.name.includes(keywords)) &#123;              return item            &#125;          &#125;)          // return newList        &#125;      &#125;    &#125;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h2 id="Vue中的动画"><a href="#Vue中的动画" class="headerlink" title="Vue中的动画"></a>Vue中的动画</h2><hr><pre><code>https://cn.vuejs.org/v2/guide/transitions.html</code></pre><p>使用Vue官方提供的transition元素，把需要被动画控制的元素，包裹起来。v-enter和v-leave-to：是一个时间点，是进入之前，元素的起始状态，此时还没有开始进入。v-enter-active：入场动画的时间段。v-leave-active：离场动画的时间段。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        .v-enter,        .v-leave-to&#123;            opacity: 0;            transform: translateX(150px);        &#125;        .v-enter-active,        .v-leave-active&#123;            transition: all 0.8s ease;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;/&gt;    &lt;transition&gt;        &lt;h3 v-if=&quot;flag&quot;&gt;我是h3&lt;/h3&gt;    &lt;/transition&gt;&lt;/div&gt;&lt;script&gt;    new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            flag:false        &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="自定义v-前缀"><a href="#自定义v-前缀" class="headerlink" title="自定义v-前缀"></a>自定义v-前缀</h3><hr><p>给transition加个name属性</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        .my-enter,        .my-leave-to&#123;            opacity: 0;            transform: translateX(150px);        &#125;        .my-enter-active,        .my-leave-active&#123;            transition: all 0.8s ease;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;/&gt;    &lt;transition name=&quot;my&quot;&gt;        &lt;h3 v-if=&quot;flag&quot;&gt;我是h3&lt;/h3&gt;    &lt;/transition&gt;&lt;/div&gt;&lt;script&gt;    new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            flag:false        &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="使用第三方animate-css类库实现动画"><a href="#使用第三方animate-css类库实现动画" class="headerlink" title="使用第三方animate.css类库实现动画"></a>使用第三方animate.css类库实现动画</h3><p>官网</p><pre><code>https://daneden.github.io/animate.css/</code></pre><p>举个栗子</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/animate.css@3.5.2/animate.min.css&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;/&gt;    &lt;transition enter-active-class=&quot;bounceIn&quot; leave-active-class=&quot;bounceOut&quot;            :duration=&quot;&#123; enter: 200, leave: 400&#125;&quot;&gt;        &lt;h3 v-if=&quot;flag&quot; class=&quot;animated&quot;&gt;我是h3&lt;/h3&gt;    &lt;/transition&gt;&lt;/div&gt;&lt;script&gt;    new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            flag:false        &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="动画钩子"><a href="#动画钩子" class="headerlink" title="动画钩子"></a>动画钩子</h3><pre><code>https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90</code></pre><p>动画钩子函数的第一个参数：el，表示要执行动画的那个DOM元素，是个原生的JS DOM对象。可以认为，el是通过document.getElementById(‘’) 方式获取到的原生JS DOM对象。</p><ul><li>beforeEnter 表示动画入场之前，此时，动画尚未开始，可以在beforeEnter中，设置元素开始动画之前的起始样式</li><li>enter表示动画开始之后的样式，这里可以设置小球完成动画之后的，结束状态<ul><li>el.offsetWidth没有实际的作用，但是，如果不写，出不来动画效果</li><li>done，起始就是afterEnter这个函数，也就是说：done是afterEnter函数的引用</li></ul></li><li>动画完成之后，会调用afterEnter</li></ul><p>举个例子</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        .ball &#123;            width: 15px;            height: 15px;            border-radius: 50%;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;购物车&quot; @click=&quot;flag=!flag&quot;&gt;    &lt;!-- 1. 使用 transition 元素把 小球包裹起来 --&gt;    &lt;transition            @before-enter=&quot;beforeEnter&quot;            @enter=&quot;enter&quot;            @after-enter=&quot;afterEnter&quot;&gt;        &lt;div class=&quot;ball&quot; v-show=&quot;flag&quot;&gt;&lt;/div&gt;    &lt;/transition&gt;&lt;/div&gt;&lt;script&gt;    new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            flag:false        &#125;,        methods: &#123;            beforeEnter: function (el) &#123;                el.style.transform = &quot;translate(0, 0)&quot;            &#125;,            enter: function (el, done) &#123;                el.offsetWidth                el.style.transform = &quot;translate(150px, 450px)&quot;                el.style.transition = &apos;all 1s ease&apos;                done()            &#125;,            afterEnter: function (el) &#123;                this.flag = !this.flag            &#125;        &#125;    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="v-for的列表过渡"><a href="#v-for的列表过渡" class="headerlink" title="v-for的列表过渡"></a>v-for的列表过渡</h3><p>在实现列表过渡的时候，如果需要过渡的元素，是通过v-for循环渲染出来的，不能使用transition包裹，需要使用transitionGroup。如果要为 v-for循环创建的元素设置动画，必须为每一个元素设置 :key 属性。给transition-group添加appear属性，实现页面刚展示出来时候，入场时候的效果。通过为transition-group元素，设置tag属性，指定transition-group渲染为指定的元素，如果不指定tag属性，默认渲染为span标签。</p><p><code>&lt;transition-group&gt;</code>组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的<code>v-move</code>特性，<strong>它会在元素的改变定位的过程中应用</strong>。<code>v-move</code>和<code>v-leave-active</code>结合使用，能够让列表的过渡更加平缓柔和。</p><p>举个例子</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        li &#123;            border: 1px dashed #999;            margin: 5px;            line-height: 35px;            padding-left: 5px;            font-size: 12px;            width: 100%;        &#125;        li:hover &#123;            background-color: hotpink;            transition: all 0.8s ease;        &#125;        .v-enter,        .v-leave-to &#123;            opacity: 0;            transform: translateY(80px);        &#125;        .v-enter-active,        .v-leave-active &#123;            transition: all 0.6s ease;        &#125;        .v-move &#123;            transition: all 0.6s ease;        &#125;        .v-leave-active &#123;            position: absolute;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;div&gt;        &lt;label&gt;            Id:            &lt;input type=&quot;text&quot; v-model=&quot;id&quot;&gt;        &lt;/label&gt;        &lt;label&gt;            Name:            &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;        &lt;/label&gt;        &lt;input type=&quot;button&quot; value=&quot;添加&quot; @click=&quot;add&quot;&gt;    &lt;/div&gt;    &lt;transition-group appear tag=&quot;ul&quot;&gt;        &lt;li v-for=&quot;(item, i) in list&quot; :key=&quot;item.id&quot; @click=&quot;del(i)&quot;&gt;            &#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;        &lt;/li&gt;    &lt;/transition-group&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            id: &apos;&apos;,            name: &apos;&apos;,            list: [                &#123;id: 1, name: &apos;Tom&apos;&#125;,                &#123;id: 2, name: &apos;Jim&apos;&#125;,                &#123;id: 3, name: &apos;Lucy&apos;&#125;            ]        &#125;,        methods: &#123;            add: function () &#123;                this.list.push(&#123;id: this.id, name: this.name&#125;)                this.id = this.name = &apos;&apos;            &#125;,            del: function (i) &#123;                this.list.splice(i, 1)            &#125;        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><hr><p>组件：以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可。</p><p>组件化：是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；</p><p>模块化：是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一。</p><hr><h3 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h3><hr><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;my-com1&gt;&lt;/my-com1&gt;    &lt;mycom1&gt;&lt;/mycom1&gt;    &lt;mycom2&gt;&lt;/mycom2&gt;    &lt;mycom3&gt;&lt;/mycom3&gt;    &lt;mycom4&gt;&lt;/mycom4&gt;&lt;/div&gt;&lt;!-- 在被控制的 #app 外面,使用template元素,定义组件的HTML模板结构  --&gt;&lt;template id=&quot;tmpl&quot;&gt;    &lt;div&gt;        &lt;h1&gt;这是通过 template 元素,在外部定义的组件结构,这个方式,有代码的只能提示和高亮&lt;/h1&gt;        &lt;h4&gt;好用,不错!&lt;/h4&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    //方式一：     //1.1 使用 Vue.extend 来创建全局的Vue组件     var com1 = Vue.extend(&#123;       template: &apos;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;/h3&gt;&apos; // 通过 template 属性，指定了组件要展示的HTML结构     &#125;)     // 1.2 使用 Vue.component(&apos;组件的名称&apos;, 创建出来的组件模板对象)      Vue.component(&apos;myCom1&apos;, com1)     // 如果使用 Vue.component 定义全局组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把大写的驼峰改为小写的字母，同时，两个单词之前，使用 - 链接；     // 如果不使用驼峰,则直接拿名称来使用即可;      Vue.component(&apos;mycom1&apos;, com1)     // Vue.component 第一个参数:组件的名称,将来在引用组件的时候,就是一个 标签形式 来引入 它的；第二个参数: Vue.extend 创建的组件     Vue.component(&apos;mycom2&apos;, Vue.extend(&#123;         template: &apos;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;/h3&gt;&apos;     &#125;))    //方式二：     // 注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素     Vue.component(&apos;mycom3&apos;, &#123;         template: &apos;&lt;div&gt;&lt;h3&gt;这是直接使用 Vue.component 创建出来的组件&lt;/h3&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;&apos;     &#125;)    // 方式三：     Vue.component(&apos;mycom4&apos;, &#123;         template: &apos;#tmpl&apos;     &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>注意:不论是哪种方式创建出来的组件,组件的template属性指向的模板内容,必须有且只能有唯一的一个根元素。</p></blockquote><hr><h3 id="私有组件定义"><a href="#私有组件定义" class="headerlink" title="私有组件定义"></a>私有组件定义</h3><hr><p>通过<code>components</code>定义私有组件：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;login&gt;&lt;/login&gt;&lt;/div&gt;&lt;template id=&quot;tmpl2&quot;&gt;    &lt;h3&gt;这是私有组件&lt;/h3&gt;&lt;/template&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        components: &#123; // 定义实例内部私有组件的            login: &#123;                //方式一：//                template: &apos;&lt;h3&gt;这是私有组件&lt;/h3&gt;&apos;,                //方式二：                template: &apos;#tmpl2&apos;            &#125;        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="组件中的data和methods"><a href="#组件中的data和methods" class="headerlink" title="组件中的data和methods"></a>组件中的data和methods</h3><hr><p>组件可以有自己的data数据，实例中的data可以为一个对象,但是组件中的data必须是一个方法，这个方法内部,还必须返回一个对象才行。组件中 的data数据,使用方式,和实例中的data使用方式完全一样。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;counter&gt;&lt;/counter&gt;    &lt;hr&gt;    &lt;counter&gt;&lt;/counter&gt;&lt;/div&gt;&lt;template id=&quot;tmpl&quot;&gt;    &lt;div&gt;        &lt;input type=&quot;button&quot; value=&quot;+1&quot; @click=&quot;increment&quot;&gt;        &lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    // 这是一个计数器的组件, 身上有个按钮,每当点击按钮,让 data 中的 count 值 +1    Vue.component(&apos;counter&apos;, &#123;        template: &apos;#tmpl&apos;,        data: function () &#123;            // return dataObj            return &#123; count: 0 &#125;        &#125;,        methods: &#123;            increment() &#123;                this.count++            &#125;        &#125;    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h3><hr><p>v-if方式切换：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;flag=true&quot;&gt;登录&lt;/a&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;flag=false&quot;&gt;注册&lt;/a&gt;    &lt;login v-if=&quot;flag&quot;&gt;&lt;/login&gt;    &lt;register v-else=&quot;flag&quot;&gt;&lt;/register&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&apos;login&apos;, &#123;        template: &apos;&lt;h3&gt;登录组件&lt;/h3&gt;&apos;    &#125;)    Vue.component(&apos;register&apos;, &#123;        template: &apos;&lt;h3&gt;注册组件&lt;/h3&gt;&apos;    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            flag: false        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>使用component元素实现：component是一个占位符,<code>:is</code>属性可以用来指定要展示的组件的名称</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;comName=&apos;login&apos;&quot;&gt;登录&lt;/a&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;comName=&apos;register&apos;&quot;&gt;注册&lt;/a&gt;    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;&lt;/div&gt;&lt;script&gt;    // 组件名称是 字符串    Vue.component(&apos;login&apos;, &#123;        template: &apos;&lt;h3&gt;登录组件&lt;/h3&gt;&apos;    &#125;)    Vue.component(&apos;register&apos;, &#123;        template: &apos;&lt;h3&gt;注册组件&lt;/h3&gt;&apos;    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            comName: &apos;login&apos; // 当前 component 中的 :is 绑定的组件的名称        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>组件切换动画</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/animate.css@3.5.2/animate.min.css&quot;/&gt;    &lt;style&gt;        .v-enter,        .v-leave-to &#123;            opacity: 0;            transform: translateX(150px);        &#125;        .v-enter-active,        .v-leave-active &#123;            transition: all 0.5s ease;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;comName=&apos;login&apos;&quot;&gt;登录&lt;/a&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;comName=&apos;register&apos;&quot;&gt;注册&lt;/a&gt;    &lt;!-- 通过 mode 属性,设置组件切换时候的模式 --&gt;    &lt;transition mode=&quot;out-in&quot;&gt;        &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;    &lt;/transition&gt;&lt;/div&gt;&lt;script&gt;    // 组件名称是 字符串    Vue.component(&apos;login&apos;, &#123;        template: &apos;&lt;h3&gt;登录组件&lt;/h3&gt;&apos;    &#125;)    Vue.component(&apos;register&apos;, &#123;        template: &apos;&lt;h3&gt;注册组件&lt;/h3&gt;&apos;    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            comName: &apos;login&apos; // 当前 component 中的 :is 绑定的组件的名称        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><hr><p>组件中，默认无法访问到父组件中的data上的数据和methods中的方法。父组件可以在引用子组件的时候，通过属性绑定<code>v-bind:</code>的形式, 把需要传递给子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用。组件中的所有props中的数据，都是通过父组件传递给子组件的。</p><blockquote><p>注意：props中的数据，都是只读的，无法重新赋值。</p></blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;com1 v-bind:parentmsg=&quot;msg&quot;&gt;&lt;/com1&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            msg: &apos;这是父组件中的数据&apos;        &#125;,        components: &#123;            com1: &#123;                template: &apos;&lt;h1 @click=&quot;change&quot;&gt;这是子组件 --- &#123;&#123; parentmsg &#125;&#125;&lt;/h1&gt;&apos;,                props: [&apos;parentmsg&apos;]// 把父组件传递过来的 parentmsg 属性，先在 props 数组中，定义一下，这样，才能使用这个数据            &#125;        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="父组件向子组件传方法"><a href="#父组件向子组件传方法" class="headerlink" title="父组件向子组件传方法"></a>父组件向子组件传方法</h3><p>父组件向子组件传递方法，使用的是事件绑定机制：v-on, 当我们自定义了一个事件属性之后，那么子组件就能够通过某些方式，来调用传递进去的 这个方法了。子组件通过<code>$emit</code>调用父组件方法。</p><p>子组件调用父组件的方法，并传值：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;com2 @func=&quot;show&quot;&gt;&lt;/com2&gt;&lt;/div&gt;&lt;template id=&quot;tmpl&quot;&gt;    &lt;div&gt;        &lt;h1&gt;这是子组件&lt;/h1&gt;        &lt;input type=&quot;button&quot; value=&quot;子组件按钮-触发父组件传递过来的方法&quot; @click=&quot;myclick&quot;&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    var com2 = &#123;        template: &apos;#tmpl&apos;,        data() &#123;            return &#123;                sonmsg: &#123; name: &apos;子组件data&apos;, age: 16 &#125;            &#125;         &#125;,        methods: &#123;            myclick() &#123;                this.$emit(&apos;func&apos;, this.sonmsg)            &#125;        &#125;    &#125;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            datamsgFormSon: null        &#125;,        methods: &#123;            show(data) &#123;                this.datamsgFormSon = data                console.log(this.datamsgFormSon)            &#125;        &#125;,        components: &#123;            com2        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="组件案例-评论功能实现"><a href="#组件案例-评论功能实现" class="headerlink" title="组件案例-评论功能实现"></a>组件案例-评论功能实现</h3><p>存放在<code>localStorage</code>中。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;cmt-box @func=&quot;loadComments&quot;&gt;&lt;/cmt-box&gt;    &lt;ul class=&quot;list-group&quot;&gt;        &lt;li class=&quot;list-group-item&quot; v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;            &lt;span class=&quot;badge&quot;&gt;评论人： &#123;&#123; item.user &#125;&#125;&lt;/span&gt;            &#123;&#123; item.content &#125;&#125;        &lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;&lt;template id=&quot;tmpl&quot;&gt;    &lt;div&gt;        &lt;div class=&quot;form-group&quot;&gt;            &lt;label&gt;评论人：&lt;/label&gt;            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;user&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;form-group&quot;&gt;            &lt;label&gt;评论内容：&lt;/label&gt;            &lt;textarea class=&quot;form-control&quot; v-model=&quot;content&quot;&gt;&lt;/textarea&gt;        &lt;/div&gt;        &lt;div class=&quot;form-group&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;发表评论&quot; class=&quot;btn btn-primary&quot; @click=&quot;postComment&quot;&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    var commentBox = &#123;        data() &#123;            return &#123;                user: &apos;&apos;,                content: &apos;&apos;            &#125;        &#125;,        template: &apos;#tmpl&apos;,        methods: &#123;            postComment() &#123;                var comment = &#123; id: Date.now(), user: this.user, content: this.content &#125;                // 从 localStorage 中获取所有的评论                var list = JSON.parse(localStorage.getItem(&apos;cmts&apos;) || &apos;[]&apos;)                list.unshift(comment)                // 重新保存最新的 评论数据                localStorage.setItem(&apos;cmts&apos;, JSON.stringify(list))                this.user = this.content = &apos;&apos;                this.$emit(&apos;func&apos;)            &#125;        &#125;    &#125;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            list: []        &#125;,        created()&#123;            this.loadComments()        &#125;,        methods: &#123;            loadComments() &#123; // 从本地的 localStorage 中，加载评论列表                var list = JSON.parse(localStorage.getItem(&apos;cmts&apos;) || &apos;[]&apos;)                this.list = list            &#125;        &#125;,        components: &#123;            &apos;cmt-box&apos;: commentBox        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="通过refs获取元素和组件"><a href="#通过refs获取元素和组件" class="headerlink" title="通过refs获取元素和组件"></a>通过refs获取元素和组件</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;获取元素&quot; @click=&quot;getElement&quot; ref=&quot;mybtn&quot;&gt;    &lt;h3 ref=&quot;myh3&quot;&gt;哈哈哈， 今天天气太好了！！！&lt;/h3&gt;    &lt;login ref=&quot;mylogin&quot;&gt;&lt;/login&gt;&lt;/div&gt;&lt;script&gt;    var login = &#123;        template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;,        data() &#123;            return &#123;                msg: &apos;son msg&apos;            &#125;        &#125;,        methods: &#123;            show() &#123;                console.log(&apos;调用了子组件的方法&apos;)            &#125;        &#125;    &#125;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;&#125;,        methods: &#123;            getElement() &#123;                console.log(this.$refs.myh3.innerText)                console.log(this.$refs.mylogin.msg)                this.$refs.mylogin.show()            &#125;        &#125;,        components: &#123;            login        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>后端路由：对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p><p>前端路由：对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由。</p><p>网站介绍</p><pre><code>https://router.vuejs.org/zh/</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>router-view是vue-router提供的元素，专门用来当作占位符的，匹配到的组件，就会展示到router-view中去。</p><p>routes:路由匹配规则，每个路由规则，都是一个对象，有两个必须的属性： 属性1是path，表示监听哪个路由链接地址；属性2是component，表示，如果路由是前面匹配到的path，则展示component属性对应的那个组件。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;./lib/vue-router-3.0.1.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;a href=&quot;#/login&quot;&gt;登录&lt;/a&gt;    &lt;a href=&quot;#/register&quot;&gt;注册&lt;/a&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var login = &#123;        template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;    &#125;    var register = &#123;        template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;    &#125;    var routerObj = new VueRouter(&#123;        routes: [            &#123;path: &apos;/login&apos;, component: login&#125;,            &#123;path: &apos;/register&apos;, component: register&#125;        ]    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;&#125;,        methods: &#123;&#125;,        router: routerObj // 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><pre><code>&lt;router-link to=&quot;/login&quot; tag=&quot;span&quot;&gt;登录&lt;/router-link&gt;&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre><code>routes: [ // 路由匹配规则     &#123; path: &apos;/&apos;, redirect: &apos;/login&apos; &#125;, // 这里的 redirect 和 Node 中的 redirect 完全是两码事    &#123; path: &apos;/login&apos;, component: login &#125;,    &#123; path: &apos;/register&apos;, component: register &#125;]</code></pre><h3 id="选中路由高亮"><a href="#选中路由高亮" class="headerlink" title="选中路由高亮"></a>选中路由高亮</h3><p>方式一：router-link标签中，默认情况</p><pre><code>&lt;style&gt;    .router-link-active&#123;        color: red;        font-weight: 800;        font-style: italic;        font-size: 18px;        text-decoration: underline;    &#125;&lt;/style&gt;</code></pre><p>方式二：修改router-link-active为myactive，然后再定义样式</p><pre><code>var routerObj = new VueRouter(&#123;      linkActiveClass: &apos;myactive&apos;&#125;)</code></pre><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>方式一：query方式传递参数</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;./lib/vue-router-3.0.1.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/login?id=10&amp;name=zs&quot;&gt;登录&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var login = &#123;        template: &apos;&lt;h1&gt;登录组件 --- &#123;&#123; $route.query.id &#125;&#125; --- &#123;&#123; $route.query.name &#125;&#125;&lt;/h1&gt;&apos;,        created()&#123; // 组件的生命周期钩子函数             console.log(this.$route.query.id)        &#125;    &#125;    var register = &#123;        template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;    &#125;    var routerObj = new VueRouter(&#123;        routes: [            &#123;path: &apos;/login&apos;, component: login&#125;        ]    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;&#125;,        methods: &#123;&#125;,        router: routerObj // 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>方式二：params方式传递参数</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;./lib/vue-router-3.0.1.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/login/10/zs&quot;&gt;登录&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var login = &#123;        template: &apos;&lt;h1&gt;登录组件 --- &#123;&#123; $route.params.id &#125;&#125; --- &#123;&#123; $route.params.name &#125;&#125;&lt;/h1&gt;&apos;,        created()&#123; // 组件的生命周期钩子函数             console.log(this.$route.params.id)        &#125;    &#125;    var register = &#123;        template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;    &#125;    var routerObj = new VueRouter(&#123;        routes: [            &#123;path: &apos;/login/:id/:name&apos;, component: login&#125;        ]    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;&#125;,        methods: &#123;&#125;,        router: routerObj // 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><p>使用children属性，实现子路由。同时，子路由的path前面，不要带<code>/</code>，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;./lib/vue-router-3.0.1.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;template id=&quot;tmpl&quot;&gt;    &lt;div&gt;        &lt;h1&gt;这是 Account 组件&lt;/h1&gt;        &lt;router-link to=&quot;/account/login&quot;&gt;登录&lt;/router-link&gt;        &lt;router-link to=&quot;/account/register&quot;&gt;注册&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    var account = &#123;        template: &apos;#tmpl&apos;    &#125;    var login = &#123;        template: &apos;&lt;h3&gt;登录&lt;/h3&gt;&apos;    &#125;    var register = &#123;        template: &apos;&lt;h3&gt;注册&lt;/h3&gt;&apos;    &#125;    var router = new VueRouter(&#123;        routes: [            &#123;                path: &apos;/account&apos;,                component: account,                children: [                    &#123; path: &apos;login&apos;, component: login &#125;,                    &#123; path: &apos;register&apos;, component: register &#125;                ]            &#125;        ]    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;&#125;,        methods: &#123;&#125;,        router    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;./lib/vue-router-3.0.1.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        html,        body &#123;            margin: 0;            padding: 0;        &#125;        .header &#123;            background-color: orange;            height: 80px;        &#125;        h1 &#123;            margin: 0;            padding: 0;            font-size: 16px;        &#125;        .container &#123;            display: flex;            height: 600px;        &#125;        .left &#123;            background-color: lightgreen;            flex: 2;        &#125;        .main &#123;            background-color: lightpink;            flex: 8;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;router-view&gt;&lt;/router-view&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;router-view name=&quot;left&quot;&gt;&lt;/router-view&gt;        &lt;router-view name=&quot;main&quot;&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    var header = &#123;        template: &apos;&lt;h1 class=&quot;header&quot;&gt;Header头部区域&lt;/h1&gt;&apos;    &#125;    var leftBox = &#123;        template: &apos;&lt;h1 class=&quot;left&quot;&gt;Left侧边栏区域&lt;/h1&gt;&apos;    &#125;    var mainBox = &#123;        template: &apos;&lt;h1 class=&quot;main&quot;&gt;mainBox主体区域&lt;/h1&gt;&apos;    &#125;    var router = new VueRouter(&#123;        routes: [            &#123;                path: &apos;/&apos;, components: &#123;                &apos;default&apos;: header,                &apos;left&apos;: leftBox,                &apos;main&apos;: mainBox                &#125;            &#125;        ]    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;&#125;,        methods: &#123;&#125;,        router    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;text&quot; v-model=&quot;firstname&quot;&gt; +    &lt;input type=&quot;text&quot; v-model=&quot;lastname&quot;&gt; =    &lt;input type=&quot;text&quot; v-model=&quot;fullname&quot;&gt;&lt;/div&gt;&lt;script&gt;    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            firstname: &apos;&apos;,            lastname: &apos;&apos;,            fullname: &apos;&apos;        &#125;,        methods: &#123;&#125;,        watch: &#123;            &apos;firstname&apos;: function (newVal, oldVal) &#123;                // this.fullname = this.firstname + &apos;-&apos; + this.lastname                this.fullname = newVal + &apos;-&apos; + this.lastname            &#125;,            &apos;lastname&apos;: function (newVal) &#123;                this.fullname = this.firstname + &apos;-&apos; + newVal            &#125;        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>watch监视路由地址的改变</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;./lib/vue-router-3.0.1.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var login = &#123;        template: &apos;&lt;h3&gt;这是登录子组件&lt;/h3&gt;&apos;    &#125;    var register = &#123;        template: &apos;&lt;h3&gt;这是注册子组件&lt;/h3&gt;&apos;    &#125;    var router = new VueRouter(&#123;        routes: [            &#123; path: &apos;/&apos;, redirect: &apos;/login&apos; &#125;,            &#123; path: &apos;/login&apos;, component: login &#125;,            &#123; path: &apos;/register&apos;, component: register &#125;        ]    &#125;)    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;&#125;,        methods: &#123;&#125;,        // router: router        router,        watch: &#123;            &apos;$route.path&apos;: function (newVal, oldVal) &#123;                // console.log(newVal + &apos; --- &apos; + oldVal)                if (newVal === &apos;/login&apos;) &#123;                    console.log(&apos;欢迎进入登录页面&apos;)                &#125; else if (newVal === &apos;/register&apos;) &#123;                    console.log(&apos;欢迎进入注册页面&apos;)                &#125;            &#125;        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h2><p>计算属性关键词:computed。computed是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用methods，在重新渲染的时候，函数总会重新调用执行。</p><p>在computed中，可以计算属性，本质是一个方法，只不过，我们在使用这些计算属性的时候，是把它们的名称，直接当作属性来使用的,并不会把计算属性，当作方法去调用。</p><p>可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;text&quot; v-model=&quot;firstname&quot;&gt; +    &lt;input type=&quot;text&quot; v-model=&quot;middlename&quot;&gt; +    &lt;input type=&quot;text&quot; v-model=&quot;lastname&quot;&gt; =    &lt;input type=&quot;text&quot; v-model=&quot;fullname&quot;&gt;    &lt;p&gt;&#123;&#123; fullname &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue(&#123;        el: &apos;#app&apos;,        data: &#123;            firstname: &apos;&apos;,            lastname: &apos;&apos;,            middlename: &apos;&apos;        &#125;,        methods: &#123;&#125;,        computed: &#123;            &apos;fullname&apos;: function () &#123;                console.log(&apos;ok&apos;)                return this.firstname + &apos;-&apos; + this.middlename + &apos;-&apos; + this.lastname            &#125;        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</p><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol></blockquote><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack可以解决各个包之间的复杂依赖关系。webpack是基于Node.js开发出来的一个前端项目自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</p><p>使用Gulp，是基于task任务的；使用Webpack，是基于整个项目进行构建的。</p><p>官网</p><pre><code>http://webpack.github.io/</code></pre><h3 id="webpack安装的两种方式"><a href="#webpack安装的两种方式" class="headerlink" title="webpack安装的两种方式"></a>webpack安装的两种方式</h3><p>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</p><p>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</p><h3 id="配置文件打包命令"><a href="#配置文件打包命令" class="headerlink" title="配置文件打包命令"></a>配置文件打包命令</h3><p>创建<code>webpack.config.js</code>文件：</p><pre><code>// 导入处理路径的模块var path = require(&apos;path&apos;);// 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理module.exports = &#123;    entry: path.join(__dirname, &apos;src/js/main.js&apos;), // 项目入口文件    output: &#123; // 配置输出选项        path: path.join(__dirname, &apos;dist&apos;), // 配置输出的路径        filename: &apos;bundle.js&apos; // 配置输出的文件名    &#125;&#125;</code></pre><p>最后控制台执行webpack。</p><h3 id="webpack-dev-server实时打包构建"><a href="#webpack-dev-server实时打包构建" class="headerlink" title="webpack-dev-server实时打包构建"></a>webpack-dev-server实时打包构建</h3><p>使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</p><p>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</p><p>在<code>package.json</code>文件中，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，然后执行<code>npm run dev</code>,发现可以进行实时打包。</p><p>但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中。把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快。</p><p>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></p><p>为了直接访问到index首页，可以指定启动的根目录：</p><pre><code>&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</code></pre><p>同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p><h3 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h3><p>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新，<code>--contentBase src</code>表示直接访问到index首页：</p><pre><code>&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open --contentBase src&quot;</code></pre><h3 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h3><p><code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：</p><pre><code>devServer:&#123;    hot:true,    open:true,    port:4321,    contentBase:&apos;src&apos;&#125;</code></pre><p>在头部引入<code>webpack</code>模块：</p><pre><code>var webpack = require(&apos;webpack&apos;);</code></pre><p>在<code>plugins</code>节点下新增：</p><pre><code>plugins:[    new webpack.HotModuleReplacementPlugin()]</code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发</title>
    <link href="/2019/02/17/9.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <url>/2019/02/17/9.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="调试器"><a href="#调试器" class="headerlink" title="调试器"></a>调试器</h2><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p><img src="/2019/02/17/9.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/9.微信小程序开发/1.png" alt></p><p>设置好断点，点击<code>编译</code>，会执行断点，查看<code>Watch</code>可以查看数据。</p><h3 id="Stroage"><a href="#Stroage" class="headerlink" title="Stroage"></a>Stroage</h3><p>缓存信息</p><h3 id="AppData"><a href="#AppData" class="headerlink" title="AppData"></a>AppData</h3><p>页面信息</p><h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><pre><code>console.log(&quot;我是log&quot;)</code></pre><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><code>.js</code>配置页面入口，<code>wxml</code>配置页面UI，<code>.json</code>页面的配置文件，<code>wxss</code>类似于css样式。内部的<code>.json</code>和<code>wxss</code>会覆盖外面的。</p><h3 id="app-json配置页面"><a href="#app-json配置页面" class="headerlink" title="app.json配置页面"></a><code>app.json</code>配置页面</h3><pre><code>&quot;pages&quot;:[    &quot;pages/index/index&quot;,    &quot;pages/logs/logs&quot;]</code></pre><h3 id="app-js定义了页面的入口"><a href="#app-js定义了页面的入口" class="headerlink" title="app.js定义了页面的入口"></a><code>app.js</code>定义了页面的入口</h3><pre><code>App(&#123;  /**   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）   */  onLaunch: function () &#123;  &#125;,  /**   * 当小程序启动，或从后台进入前台显示，会触发 onShow   */  onShow: function (options) &#123;   &#125;,  /**   * 当小程序从前台进入后台，会触发 onHide   */  onHide: function () &#123;  &#125;,  /**   * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息   */  onError: function (msg) &#123;  &#125;&#125;)</code></pre><h3 id="index-js自己页面的配置"><a href="#index-js自己页面的配置" class="headerlink" title="index.js自己页面的配置"></a><code>index.js</code>自己页面的配置</h3><pre><code>Page(&#123;  /**   * 页面的初始数据   */  data: &#123;  &#125;,  /**   * 生命周期函数--监听页面加载   */  onLoad: function (options) &#123;  &#125;,  /**   * 生命周期函数--监听页面初次渲染完成   */  onReady: function () &#123;  &#125;,  /**   * 生命周期函数--监听页面显示   */  onShow: function () &#123;  &#125;,  /**   * 生命周期函数--监听页面隐藏   */  onHide: function () &#123;  &#125;,  /**   * 生命周期函数--监听页面卸载   */  onUnload: function () &#123;  &#125;,  /**   * 页面相关事件处理函数--监听用户下拉动作   */  onPullDownRefresh: function () &#123;  &#125;,  /**   * 页面上拉触底事件的处理函数   */  onReachBottom: function () &#123;  &#125;,  /**   * 用户点击右上角分享   */  onShareAppMessage: function () &#123;  &#125;&#125;)</code></pre><h3 id="index-wxml页面的布局文件"><a href="#index-wxml页面的布局文件" class="headerlink" title="index.wxml页面的布局文件"></a><code>index.wxml</code>页面的布局文件</h3><h2 id="视图和渲染"><a href="#视图和渲染" class="headerlink" title="视图和渲染"></a>视图和渲染</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><pre><code>https://developers.weixin.qq.com/miniprogram/dev/component/</code></pre><p>在wxml中</p><pre><code>&lt;text&gt;这里是文本内容&lt;/text&gt;&lt;button type=&quot;default&quot; hover-class=&quot;other-button-hover&quot;&gt;  default&lt;/button&gt;&lt;button type=&quot;primary&quot;&gt;  primary&lt;/button&gt;</code></pre><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>在wxml中</p><pre><code>&lt;button type=&quot;primary&quot;&gt;  &#123;&#123;btnText&#125;&#125;&lt;/button&gt;&lt;text&gt;&#123;&#123;text&#125;&#125;&lt;/text&gt;</code></pre><p>在js中</p><pre><code>data: &#123;    text:&quot;这里是text内容&quot;,    btnText:&quot;这里是btn内容&quot;&#125;,</code></pre><h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><p>wxml中</p><pre><code>&lt;text&gt;&#123;&#123;text&#125;&#125;&lt;/text&gt;&lt;button type=&quot;primary&quot; bindtap=&quot;btnClick&quot;&gt;  点击&lt;/button&gt;</code></pre><p>js中，在page下</p><pre><code>btnClick : function()&#123;  this.setData(&#123;    text:&quot;这是新的内容&quot;  &#125;)&#125;</code></pre><h3 id="两种渲染标签"><a href="#两种渲染标签" class="headerlink" title="两种渲染标签"></a>两种渲染标签</h3><p><code>if</code>、<code>else</code></p><p>wxml中</p><pre><code>&lt;view wx:if=&quot;&#123;&#123;show&#125;&#125;&quot;&gt;  &#123;&#123;text&#125;&#125; 1&lt;/view&gt;&lt;view wx:else=&quot;&#123;&#123;show&#125;&#125;&quot;&gt;  &#123;&#123;text&#125;&#125; 2&lt;/view&gt;</code></pre><p>js中</p><pre><code>var isShow = this.data.show;  this.setData(&#123;    text: &quot;这是新的内容&quot;, show : !isShow&#125;)</code></pre><p><code>for</code></p><p>wxml中</p><pre><code>&lt;view wx:for=&quot;&#123;&#123;news&#125;&#125;&quot; wx:for-item=&quot;items&quot; wx:for-index=&quot;ix&quot; &gt;  &#123;&#123;ix&#125;&#125;-&#123;&#123;items&#125;&#125;&lt;/view&gt;</code></pre><p>js中</p><pre><code>var newsdata = this.data.news;newsdata.shift();this.setData(&#123;  text: &quot;这是新的内容&quot;, show: !isShow,news:newsdata&#125;)</code></pre><h3 id="模板使用"><a href="#模板使用" class="headerlink" title="模板使用"></a>模板使用</h3><p>wxml中引入公共的wxml</p><pre><code>&lt;include src=&quot;../templates/header&quot; /&gt;</code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>点击<code>tab</code>、长按<code>longtab</code>、触摸（<code>touchstart</code>,<code>touchend</code>,<code>touchmove</code>,<code>touchcancle</code>）等</p><p>事件冒泡：点击子<code>view</code>，它本身和他的所有父<code>view</code>都会相应，包括点击，长按，触摸事件。其他都是非冒泡事件。</p><p>事件的绑定：<code>bind</code>绑定和<code>catch</code>绑定。比如点击事件<code>bindtap</code>和<code>catchtab</code>，区别就是<code>bindtap</code>会事件冒泡，<code>catchtap</code>不会事件冒泡。</p><p>事件的对象：类型<code>type</code>，时间戳<code>timeStamp</code>，事件源组件<code>target</code>，当前组件<code>currentTarget</code>，触摸点数<code>touches</code>，<code>dataset</code>等，代码：</p><pre><code>btnClick : function(event)&#123;    console.log(event);&#125;)</code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>点击按钮查询，查询输入框中内容</p><p>遇到的问题</p><pre><code>https://www.cnblogs.com/wholeworld/p/8361577.html</code></pre><p>做好后的效果图</p><p><img src="/2019/02/17/9.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/9.微信小程序开发/2.png" alt></p><p>app.json中配置页面，app.js中设置网路，代码</p><pre><code>getNameInfo: function (name,cb)&#123;    wx.request(&#123;      url: &apos;https://shanghaicity.openservice.kankanews.com/citizen/repeat?name=&apos;+name, //接口地址      data: &#123;        x: &apos;&apos;,        y: &apos;&apos;      &#125;,      header: &#123;        &apos;content-type&apos;: &apos;application/json&apos; // 默认值      &#125;,      success(res) &#123;        //console.log(res.data)        cb(res.data)      &#125;    &#125;)&#125;</code></pre><p>页面wxml</p><pre><code>&lt;view class=&quot;container&quot;&gt;    &lt;input placeholder=&quot;请输入您的姓名&quot; bindinput=&quot;nameInput&quot;&gt;&lt;/input&gt;    &lt;button type=&quot;primary&quot; bindtap=&quot;btnSearch&quot;&gt;查询&lt;/button&gt;    &lt;text wx:if=&quot;&#123;&#123;isShow&#125;&#125;&quot;&gt;查询到上海市姓名是&#123;&#123;resultInfo.name&#125;&#125;的人数为&#123;&#123;resultInfo.count&#125;&#125;人&lt;/text&gt;&lt;/view&gt;</code></pre><p>页面wxss</p><pre><code>input&#123;  border: 1px solid red;  width: 90%;  margin: 5%;  padding: 5px;&#125;text&#123;  margin-top: 20px;&#125;</code></pre><p>页面js</p><pre><code>var app = getApp()Page(&#123;  /*** 页面的初始数据 */  data: &#123;      myName:null,      resultInfo:null,      isShow:false  &#125;,  btnSearch : function()&#123;    var thispage = this;    //console.log(this.data.myName)    app.getNameInfo(this.data.myName, function (data) &#123;//结果：&#123;count: 0, name: &quot;萧何&quot;&#125;      //console.log(data)      thispage.setData(&#123;resultInfo : data&#125;)      thispage.setData(&#123; isShow: true &#125;);    &#125;);  &#125;,  nameInput : function(e)&#123;    this.setData(&#123;myName:e.detail.value&#125;)  &#125;&#125;)</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>页面配置，全局配置，tabBar配置，网络超时配置，debug开启配置</p><p>全局配置和页面配置</p><pre><code>https://developers.weixin.qq.com/miniprogram/dev/framework/config.html</code></pre><p>页面<code>json</code>中配置<code>window</code>可以覆盖全局<code>window</code>配置。</p><p>tabBar配置</p><pre><code>https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html</code></pre><p>比如</p><pre><code>&#123;  &quot;tabBar&quot;: &#123;    &quot;custom&quot;: true,    &quot;color&quot;: &quot;#000000&quot;,    &quot;selectedColor&quot;: &quot;#000000&quot;,    &quot;backgroundColor&quot;: &quot;#000000&quot;,    &quot;list&quot;: [      &#123;        &quot;pagePath&quot;: &quot;page/component/index&quot;,        &quot;text&quot;: &quot;组件&quot;,        &quot;iconPath&quot;:&quot;images/icon1.png&quot;,        &quot;selectedIconPath&quot;:&quot;images/icon2.png&quot;      &#125;,      &#123;        &quot;pagePath&quot;: &quot;page/API/index&quot;,        &quot;text&quot;: &quot;接口&quot;,        &quot;iconPath&quot;:&quot;images/icon3.png&quot;,        &quot;selectedIconPath&quot;:&quot;images/icon4.png&quot;      &#125;    ]  &#125;,  &quot;usingComponents&quot;: &#123;&#125;&#125;</code></pre><p>在<code>app.json</code>中配置debug </p><pre><code>&quot;debug&quot;:true</code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IconFont在Android中的使用介绍</title>
    <link href="/2019/01/25/8.IconFont%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <url>/2019/01/25/8.IconFont%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="iconfont介绍"><a href="#iconfont介绍" class="headerlink" title="iconfont介绍"></a>iconfont介绍</h2><p>常用iconfont字体库</p><pre><code>https://www.iconfont.cn/http://fontawesome.dashgame.com/https://ionicons.com/</code></pre><p>优点：</p><p>1.IconFont是矢量图标,可以随意设置大小。</p><p>2.体积小可以减小APK的体积。</p><p>3.一套图标资源可以在不同平台使用(android ,ios,web)</p><p>4.很容易实现图文混排，因为都是Icon也被看做为文字.</p><p>缺点：</p><p>1.添加图标是需要重新制作ttf文件</p><p>2.只能支持单色（不支持渐变色图标）</p><blockquote><p>ttf文件中每个图片对应的一个unicode码。TextView设置文字的时候，使用对应的unicode码就能显示出图片。</p></blockquote><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><p>下载<code>iconfont.ttf</code>文件，放在项目<code>main/assets/iconfont/</code>下</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>xml中</p><pre><code>&lt;TextView    android:id=&quot;@+id/tv1&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;@string/home&quot;    android:textColor=&quot;@android:color/holo_orange_light&quot;    android:textSize=&quot;50sp&quot; /&gt;</code></pre><p>strings中Unicode</p><pre><code>&lt;string name=&quot;home&quot;&gt;&amp;#xe664;&lt;/string&gt;</code></pre><p>最后直接设置</p><pre><code>Typeface iconfont1 = Typeface.createFromAsset(getAssets(), &quot;iconfont/iconfont.ttf&quot;);TextView textview1 = findViewById(R.id.tv1);textview1.setTypeface(iconfont1);</code></pre><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>自定义TextView</p><pre><code>public class IconFontView extends AppCompatTextView &#123;    private Context context;    private boolean isFirst = true;    private String text;    private int textColor;    private String clicked_text;    private int clicked_textColor;    public IconFontView(Context context) &#123;        this(context, null);    &#125;    public IconFontView(Context context, AttributeSet attrs) &#123;        this(context, attrs, 0);    &#125;    public IconFontView(Context context, AttributeSet attrs, int defStyle) &#123;        super(context, attrs, defStyle);        this.context = context;        init(attrs);    &#125;    /** 初始化 */    private void init(AttributeSet attrs)&#123;        // 设置字体类型        setTypeface(Typeface.createFromAsset(context.getAssets(), &quot;iconfont/iconfont.ttf&quot;));        // 获取配置信息（text &amp;&amp; textColor）        getAttrs(attrs);    &#125;    /** 获得配置信息 */    private void getAttrs(AttributeSet attrs) &#123;        TypedArray taCustom = context.obtainStyledAttributes(attrs, R.styleable.IconFontViewAttr);        clicked_text = taCustom.getString(R.styleable.IconFontViewAttr_clicked_text);        clicked_textColor = taCustom.getColor(R.styleable.IconFontViewAttr_clicked_textColor, 0);        taCustom.recycle();    &#125;    @Override    public boolean onTouchEvent(MotionEvent event) &#123;        if (event.getAction() == MotionEvent.ACTION_DOWN)&#123;            text = getText().toString();            textColor = getCurrentTextColor();        &#125;        return super.onTouchEvent(event);    &#125;    @Override    protected void dispatchSetPressed(boolean pressed) &#123;        super.dispatchSetPressed(pressed);        if (isDuplicateParentStateEnabled()) &#123;            if (pressed)&#123;                if(clicked_text != null)                    this.setText(clicked_text);                if(clicked_textColor != 0)                    this.setTextColor(clicked_textColor);            &#125;else &#123;                this.setText(text);                this.setTextColor(textColor);            &#125;        &#125;    &#125;&#125;</code></pre><p>在<code>res/values/attrs</code>中定义属性</p><pre><code>&lt;!-- IconFontView属性 --&gt;&lt;declare-styleable name=&quot;IconFontViewAttr&quot;&gt;    &lt;attr name=&quot;clicked_text&quot; format=&quot;string&quot; /&gt;    &lt;attr name=&quot;clicked_textColor&quot; format=&quot;color&quot; /&gt;&lt;/declare-styleable&gt;</code></pre><p>使用</p><pre><code>&lt;com.example.iconfont.IconFontView    android:id=&quot;@+id/tv2&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:text=&quot;@string/hot&quot;    android:textColor=&quot;@android:color/holo_red_dark&quot;    android:textSize=&quot;50sp&quot; /&gt;</code></pre><p>strings中Unicode</p><pre><code>&lt;string name=&quot;hot&quot;&gt;&amp;#xe614;&lt;/string&gt;</code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>可以图文混用</p><pre><code>&lt;string name=&quot;my&quot;&gt;我可以图文混用&amp;#xe624;啦！！&lt;/string&gt;</code></pre><p>使用阿里iconfont可以在<code>demo_index.html</code>文件中查找对应的Unicode</p><p>fontawesome查找Unicode对照表</p><pre><code>https://fontawesome.com/cheatsheet?from=io</code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IconFont</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速入门和详解kotlin</title>
    <link href="/2019/01/23/7.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8kotlin/"/>
    <url>/2019/01/23/7.%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8kotlin/</url>
    
    <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="1、资料"><a href="#1、资料" class="headerlink" title="1、资料"></a>1、资料</h3><p>官方文档</p><pre><code>https://kotlinlang.org/docs/reference/</code></pre><p>Kotlin源码</p><pre><code>https://github.com/JetBrains/kotlin</code></pre><p>Kotlin官博</p><pre><code>https://blog.jetbrains.com/kotlin/</code></pre><p>Kotlin微信公众号</p><pre><code>Kotlin</code></pre><h3 id="2、HelloWorld"><a href="#2、HelloWorld" class="headerlink" title="2、HelloWorld"></a>2、HelloWorld</h3><p>第一种写法</p><pre><code>fun main(args: Array&lt;String&gt;) &#123;    println(&quot;Hello World&quot;)&#125;</code></pre><p>第二种写法</p><pre><code>object HelloWorld &#123;    @JvmStatic    fun main(args: Array&lt;String&gt;) &#123;        println(&quot;Hello&quot;)    &#125;&#125;</code></pre><p>第三种写法</p><pre><code>class HelloWorld &#123;    companion object &#123;        @JvmStatic        fun main(args: Array&lt;String&gt;) &#123;            println(&quot;Hello&quot;)        &#125;    &#125;&#125;    </code></pre><h3 id="3、基本类型定义"><a href="#3、基本类型定义" class="headerlink" title="3、基本类型定义"></a>3、基本类型定义</h3><pre><code>var s : String = &quot;Hello&quot;var stringA = &quot;Hello&quot;var int = 5</code></pre><p>基本数据类型的定义可以加类型，也可以不加。</p><p><strong><code>lateinit</code>延迟初始化成员变量，先不赋值</strong></p><pre><code>private lateinit var string : String</code></pre><p><strong>val延迟初始化用lazy，使用的时候再赋值,值只在第一次访问的时候计算</strong></p><pre><code>val ss : String by lazy &#123;     &quot;赋值&quot;&#125;</code></pre><p>数据类型转换</p><pre><code>.toInt().toFloat()</code></pre><p>字符串比较</p><pre><code>==.equals()</code></pre><h3 id="4、定义final"><a href="#4、定义final" class="headerlink" title="4、定义final"></a>4、定义<code>final</code></h3><pre><code>const val stringB = &quot;Hello&quot;val stringC = &quot;Hello&quot;</code></pre><p><code>var</code>是一个可变变量,<code>val</code>是一个只读变量，可以省略类型。</p><p><code>const</code>只能用在顶级属性，以及object对象的属性中（伴随对象也是obejct）。</p><p><code>const val</code>就相当于Java中的<code>final</code>，<strong>编译期常量</strong>。</p><h3 id="5、占位符-quot-quot"><a href="#5、占位符-quot-quot" class="headerlink" title="5、占位符&quot;${}&quot;"></a>5、占位符<code>&quot;$&#123;&#125;&quot;</code></h3><pre><code>var stringG = &quot;IamG&quot;var stringF = &quot;$&#123;stringG&#125;&quot; + &quot;dd&quot;println(stringF)//IamGdd</code></pre><h3 id="6、数组和遍历"><a href="#6、数组和遍历" class="headerlink" title="6、数组和遍历"></a>6、数组和遍历</h3><pre><code>val names: Array&lt;String&gt; = arrayOf(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)val emptyStrings: Array&lt;String?&gt; = arrayOfNulls(10)</code></pre><p><strong><code>String?</code>表示可以为null的String类型</strong></p><p>基本数据类型定制版</p><pre><code>val ints = intArrayOf(1, 3, 5)</code></pre><p>基本操作</p><pre><code>names.isNotEmpty() //判断空names.length //数组的长度names[i] = &quot;Hello&quot; //给第i个成员赋值print array[i] //输出第i个成员</code></pre><p>for遍历(注意<code>..</code>和<code>until</code>)</p><pre><code>val ints = intArrayOf(1, 3, 5, 7, 9)for (int in ints) &#123;    println(int)&#125;for (i in ints.indices)&#123;    print(ints[i])&#125;for ((index,value) in ints.withIndex())&#123;    println(&quot;$index -&gt; $value&quot;)&#125;for (indexedValue in strArrays.withIndex())&#123;    println(&quot;$&#123;indexedValue.index&#125; -&gt; $&#123;indexedValue.value&#125;&quot;)&#125;for (i in IntRange(0, ints.size - 1)) &#123;    print(ints[i])&#125;for (i in 0..ints.size - 1) &#123;    print(ints[i])&#125;for (i in 0 until ints.size) &#123;    print(ints[i])&#125;//Lambda方式遍历ints.forEach&#123;    println(it)&#125;ints.forEach(::println)</code></pre><h3 id="7、list和map"><a href="#7、list和map" class="headerlink" title="7、list和map"></a>7、list和map</h3><pre><code>var lists = listOf &lt;String&gt;(&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;)for (list in lists) &#123;    println(list)&#125;for ((index, valu) in lists.withIndex()) &#123;//角标从零开始，角标和值    println(index.toString() + &quot;-----&quot; + valu)&#125;var map = TreeMap&lt;String, String&gt;()map[&quot;姓名&quot;] = &quot;张三&quot;map[&quot;性别&quot;] = &quot;男&quot;map[&quot;年龄&quot;] = &quot;18&quot;map[&quot;爱好&quot;] = &quot;游泳&quot;</code></pre><h3 id="8、静态变量、方法"><a href="#8、静态变量、方法" class="headerlink" title="8、静态变量、方法"></a>8、静态变量、方法</h3><pre><code>companion object &#123; &#125;</code></pre><h3 id="9、方法函数"><a href="#9、方法函数" class="headerlink" title="9、方法函数"></a>9、方法函数</h3><p>定义方法带参及返回类型</p><pre><code>fun stringD(string : String):Boolean&#123;    //...    return true&#125;</code></pre><p>参数个数不固定</p><pre><code>fun stringE(vararg names: String)&#123;&#125;stringE(*Ints)</code></pre><p>简化写法</p><pre><code>fun add(num1 : Int ,num2 : Int) : Int&#123;    return num1 + num2&#125;fun add(num1 : Int ,num2 : Int) = num1 + num2</code></pre><p>函数作为变量使用</p><pre><code>var d = add(1,2)val add = fun(num1: Int, num2: Int): Int &#123;    return num1 + num2&#125;</code></pre><h3 id="10、when表达式"><a href="#10、when表达式" class="headerlink" title="10、when表达式"></a>10、when表达式</h3><p>when用来代替switch</p><pre><code>fun checkScore(score: Int) : String &#123;    var str = when (score) &#123;        100 -&gt;&quot;满分&quot;        99 -&gt; &quot;继续加油&quot;        else -&gt;&quot;看好你哦&quot;    &#125;    return str&#125;</code></pre><h3 id="11、实例化类和class实例"><a href="#11、实例化类和class实例" class="headerlink" title="11、实例化类和class实例"></a>11、实例化类和<code>class</code>实例</h3><pre><code>var data = Date()</code></pre><p>不需要<code>new</code></p><p>获得<code>class</code>的实例的两种方式</p><pre><code>val clazz1 = DD::class.javaval dd = DD()val clazz2 = dd.javaClass</code></pre><h3 id="12、继承"><a href="#12、继承" class="headerlink" title="12、继承"></a>12、继承</h3><pre><code>class Son : Father()&#123;    override fun action()&#123;        //...    &#125;&#125;</code></pre><h3 id="13、AS转化"><a href="#13、AS转化" class="headerlink" title="13、AS转化"></a>13、AS转化</h3><p>as中直接转换：两次<code>shift</code>后输入<code>Convert Java File to Kotlin File</code>。</p><h3 id="14、Lambda"><a href="#14、Lambda" class="headerlink" title="14、Lambda"></a>14、Lambda</h3><pre><code>函数入参 -&gt; 返回值val add = fun(num1: Int, num2: Int): Int &#123;    return num1 + num2&#125;//可以写成val add = &#123; num1: Int, num2: Int -&gt; num1 + num2 &#125;</code></pre><p>过滤空后的输出结果</p><pre><code>var strArrays = arrayOf(&quot;1&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;3&quot;, &quot;4&quot;)strArrays.filter &#123; it.isNotEmpty() &#125;.forEach&#123; println(it)&#125;</code></pre><h3 id="15、空安全"><a href="#15、空安全" class="headerlink" title="15、空安全"></a>15、空安全</h3><p><strong><code>String?</code>表示可以为null的String类型</strong>。<code>!!</code>表示自己判断不会出现<code>null</code>，但如果出现了<code>null</code>会崩溃。<code>？</code>表示可能会返回<code>null</code>，不会崩溃。</p><pre><code>var string: String? = nullvar len1 = string?.lengthvar len2 = string!!.length//最终会崩溃</code></pre><h3 id="16、类"><a href="#16、类" class="headerlink" title="16、类"></a>16、类</h3><hr><p>类的创建</p><pre><code>class Person(val name:String,val age:Int)</code></pre><p>构造方法</p><pre><code>class Person(var name: String?, var age:Int) &#123;    constructor(name: String):this(name,0)        constructor():this(null,0)&#125;</code></pre><p>get和set</p><pre><code>var name: String? = null            private set// 私有掉set方法    var age: Int = 0            get() &#123; return if (field &lt; 0) 0 else field &#125;//field就是age</code></pre><p>类的继承</p><pre><code>class QQStepView : View &#123;        constructor(context:Context):this(context,null)        constructor(context:Context,attrs: AttributeSet?):this(context,attrs,0)        constructor(context:Context,attrs: AttributeSet?,defStyleAttr:Int):super(context,attrs,defStyleAttr&#123;                // 写内容 获取自定义属性的内容        &#125;&#125;</code></pre><p>或者</p><pre><code>class QQStepView(context: Context?, attrs: AttributeSet?) : View(context, attrs)</code></pre><p>匿名内部类</p><pre><code> //匿名内部类 object:xxx        httpUtils.get(object: HttpCallback()&#123;        override fun onError(e: IOException) &#123;  &#125;                    override fun onSuccess() &#123; Log.e(&quot;TAG&quot;,&quot;onSuccess&quot;)&#125; &#125;)</code></pre><hr><h3 id="17、运算符重载"><a href="#17、运算符重载" class="headerlink" title="17、运算符重载"></a>17、运算符重载</h3><hr><pre><code>class Counter(val dayIndex: Int)&#123;        // 操作符重载 +        operator fun plus(counter: Counter):Counter&#123;                return Counter(dayIndex+counter.dayIndex)        &#125;        // 操作符重载 -        operator fun minus(counter: Counter):Counter&#123;                return Counter(dayIndex-counter.dayIndex)        &#125;&#125;</code></pre><hr><h3 id="18、方法扩展"><a href="#18、方法扩展" class="headerlink" title="18、方法扩展"></a>18、方法扩展</h3><hr><pre><code> // 对类方法进行扩展        val str = &quot;abc&quot;       var strMulit = str.mulit(3)Log.e(&quot;TAG&quot;,&quot;strMulit = $strMulit&quot;)// 对一个类的方法进行扩展    operator fun  String.mulit(number: Int): String &#123;             val stringBuilder = StringBuilder()             for (num in 1..number)&#123;                 stringBuilder.append(this)             &#125;            return stringBuilder.toString()    &#125;</code></pre><hr><h2 id="详解kotlin"><a href="#详解kotlin" class="headerlink" title="详解kotlin"></a>详解kotlin</h2><h3 id="1、数据类型和函数"><a href="#1、数据类型和函数" class="headerlink" title="1、数据类型和函数"></a>1、数据类型和函数</h3><h4 id="和"><a href="#和" class="headerlink" title="==和==="></a><code>==</code>和<code>===</code></h4><p><code>==</code>表示比较内容，类似于java的equals；<code>===</code>表示比较对象是否相同。</p><h4 id="open继承"><a href="#open继承" class="headerlink" title="open继承"></a>open继承</h4><p>如果一个类允许被继承，那么需要使用open声明。方法想被重写也是要加open。</p><pre><code>open class People(name: String, sex: String) &#123;&#125;class Man(name: String, sex: String) : People(name, sex) &#123;&#125;</code></pre><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><p>init代码比构造函数先执行。</p><pre><code>open class People(name: String, sex: String) &#123;    init &#123;    &#125;&#125;</code></pre><h4 id="is"><a href="#is" class="headerlink" title="is"></a>is</h4><p><code>is</code>类似于java中的<code>instance of</code>。</p><h4 id="as父类向下转为子类"><a href="#as父类向下转为子类" class="headerlink" title="as父类向下转为子类"></a>as父类向下转为子类</h4><p><code>as</code>类型转换，失败则抛异常，<code>as?</code>如果转换失败，则返回<code>null</code>,不抛异常。</p><pre><code>val child : Child? = parent as? Child</code></pre><p>只能类型转化：父类对象直接引用子类的成员。</p><h4 id="Any父类和Unit返回值"><a href="#Any父类和Unit返回值" class="headerlink" title="Any父类和Unit返回值"></a>Any父类和Unit返回值</h4><p>Any是Kotlin中的父类，类似于java中的Object。</p><p>没有返回值时候，其实返回的是Unit，相当于java中的void。</p><h4 id="引用包名"><a href="#引用包名" class="headerlink" title="引用包名"></a>引用包名</h4><p>导包时候替换其他名字</p><pre><code>import 包名...类名1 as xxxval name : xxx = xxx() </code></pre><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>range表示范围，ClosedRange的子类</p><pre><code>0..100 表示 [0,100]0 until 100 表示 [0,100)i in 0..100 判断i是否在[0,100]中</code></pre><h4 id="类中的toString"><a href="#类中的toString" class="headerlink" title="类中的toString"></a>类中的toString</h4><pre><code>open class People(var name: String, var sex: String) &#123;    override fun toString(): String &#123;        return name + sex    &#125;&#125;</code></pre><h4 id="get和set方法"><a href="#get和set方法" class="headerlink" title="get和set方法"></a>get和set方法</h4><p>默认已经实现了get/set方法，如果要做处理</p><pre><code>class Woman&#123;    var nameA : String = &quot;翠花&quot;        get() &#123;            print(&quot;get方法&quot;)            return field        &#125;        set(value) &#123;            print(&quot;set方法&quot;)            field = value        &#125;&#125;</code></pre><h4 id="if可以作为表达式"><a href="#if可以作为表达式" class="headerlink" title="if可以作为表达式"></a>if可以作为表达式</h4><p>if可以直接作为表达式</p><pre><code>val nameB = if (true)&#123;    &quot;NameB&quot;&#125; else &#123;    &quot;NameBB&quot;&#125;</code></pre><p><code>try...catch</code>、<code>when</code>等也可以作为表达式。</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><pre><code>Outter@for ((index,value) in strArrays.withIndex())&#123;    println(&quot;$index -&gt; $value&quot;)    Inner@for (indexedValue in strArrays.withIndex())&#123;        if (...)&#123;            break@Outter        &#125;    &#125;&#125;</code></pre><h4 id="接口代理"><a href="#接口代理" class="headerlink" title="接口代理"></a>接口代理</h4><pre><code>interface Child &#123;    fun play()&#125;interface Parent &#123;    fun eat()&#125;class People : Child, Parent &#123;    override fun play() &#123;    &#125;    override fun eat() &#123;    &#125;&#125;class People1(child: Child,parent: Parent) : Child by child, Parent by parent</code></pre><h4 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h4><p>只有一个实例的类；不能自定义构造方法；可以实现接口，继承父类；本质上就是单例模式的最基本实现。</p><pre><code>object FF &#123;    val ffv : String = &quot;ff&quot;&#125;</code></pre><h4 id="静态方法和成员"><a href="#静态方法和成员" class="headerlink" title="静态方法和成员"></a>静态方法和成员</h4><p><code>companion object</code>包裹起来静态方法；<code>@JvmStatic</code>和<code>@JvmField</code>加上后，java去调用更方便。</p><pre><code>class HelloWorld &#123;    @JvmField    val TAG : String = &quot;TAG&quot;    companion object &#123;        @JvmStatic        fun main(args: Array&lt;String&gt;) &#123;            println(&quot;Hello&quot;)        &#125;    &#125;&#125;</code></pre><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><hr><p>方法重载可以用方法上的默认参数代替，想给java用可以加上<code>@JvmOverloads</code>。</p><pre><code>@JvmOverloadsfun sum(a: Int = 2, b: Int): Int &#123;    return a + b&#125;</code></pre><hr><h4 id="data-class类"><a href="#data-class类" class="headerlink" title="data class类"></a><code>data class</code>类</h4><hr><p>可以定义javabean，自动有了 <code>toString()</code>、<code>hashCode()</code>、<code>equals()</code>、<code>copy()</code>、<code>componentN()</code>这些方法。</p><hr><p>填坑：</p><pre><code>apply plugin: &apos;kotlin-noarg&apos;apply plugin: &apos;kotlin-allopen&apos;classpath &quot;org.jetbrains.kotlin:kotlin-gradle-noarg:$kotlin_version&quot;classpath &quot;org.jetbrains.kotlin:kotlin-gradle-allopen:$kotlin_version&quot;noArg&#123;    annotation(&quot;xxxx&quot;)&#125;</code></pre><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>java定义内部类，默认持有外部类的引用，除非定义为静态的内部类。</p><p><strong>Kotlin中内部类默认是静态内部类，inner定义的是非静态内部类</strong></p><pre><code>inner class Inner&#123;&#125;</code></pre><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>可以继承父类或者实现多个接口</p><pre><code>interface OnClickListener &#123;    fun onClick()&#125;class View &#123;    var onclick: OnClickListener? = null&#125;val view = View()view.onclick = object : OnClickListener&#123;    override fun onClick() &#123;    &#125;&#125;</code></pre><h3 id="2、高阶函数"><a href="#2、高阶函数" class="headerlink" title="2、高阶函数"></a>2、高阶函数</h3><p>对每个元素操作返回新的list</p><pre><code>val list = listOf(1, 3, 5, 7, 9, 11)val newList = list.map &#123;    it * 2 + 3&#125;</code></pre><p>还有</p><pre><code>forEach、map、flatMap、reduce、fold、filter、takeWhile、let、apply、with、use、joinToString</code></pre><p>尾递归</p><pre><code>tailrec</code></pre><h3 id="3、协程"><a href="#3、协程" class="headerlink" title="3、协程"></a>3、协程</h3><p>协作程序，解决异步问题。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>如果一个函数接收另一个函数作为参数，或者返回值的类型是另一个函数的话，那么该函数就称为高阶函数。</p><p>扩展函数-&gt;参考上文，18、方法扩展。</p><p>定义函数变量,<code>-&gt;</code>左边是参数类型，右边是返回值，Unit相当于void，无返回值：</p><pre><code>val a: (String, Int) -&gt; Unit</code></pre><p>定义函数</p><pre><code>fun num1Andnum2(num1: Int, num2: Int, operation: (Int, Int) -&gt; Int): Int &#123;    return operation(num1, num2)&#125;</code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>代码：<a href="https://github.com/AdamRight/Android2021Code/tree/master/app/src/main/java/com/android/code/kotlin">https://github.com/AdamRight/Android2021Code/tree/master/app/src/main/java/com/android/code/kotlin</a></p><h3 id="1、静态函数和属性"><a href="#1、静态函数和属性" class="headerlink" title="1、静态函数和属性"></a>1、静态函数和属性</h3><h4 id="1-1-顶层函数"><a href="#1-1-顶层函数" class="headerlink" title="1.1 顶层函数"></a>1.1 顶层函数</h4><hr><p>顶层函数直接在kotlin文件中定义函数和属性，会直接生成静态的。</p><p>在其他kotlin类中可以直接使用函数名，在Java中通过 <code>文件名Kt</code>来使用。</p><p>如果在kotlin文件中注解 <code>@file:JvmName(&quot;类名&quot;)</code>，那么在Java中可以通过 <code>类名.函数名</code> 来使用。</p><hr><h4 id="1-2-object类"><a href="#1-2-object类" class="headerlink" title="1.2 object类"></a>1.2 object类</h4><hr><p>object类直接生成单例例对象，然后通过单例对象访问函数和属性。</p><p>在其他kotlin类中可以通过 <code>类名.函数名</code> 使用；在Java中通过 <code>类名.INSTANCE.函数名</code>来使用。</p><hr><h4 id="1-3-companion-object"><a href="#1-3-companion-object" class="headerlink" title="1.3 companion object"></a>1.3 companion object</h4><hr><p>kotlin类中使用 <code>companion object</code> 生成单例例对象，然后通过单例对象访问函数和属性。</p><p>在其他kotlin类中可以通过 <code>类名.函数名</code> 使用；在Java中通过 <code>类名.Companion.函数名</code>来使用。</p><p>如果在 <code>companion object</code> 中的函数和属性通过 <code>@JvmStatic</code> 修饰，那么Java中可以用 <code>类名.函数名</code> 直接使用。</p><hr><h3 id="2、internal"><a href="#2、internal" class="headerlink" title="2、internal"></a>2、internal</h3><hr><p>有多个module模块情况下，可⻅性修饰符internal的作用是，只能被当前module模块访问的到。</p><hr><h3 id="3、主构造器"><a href="#3、主构造器" class="headerlink" title="3、主构造器"></a>3、主构造器</h3><hr><p>改造前</p><pre><code>class User1 &#123;    var userName: String? = null    var userPassWord: String? = null    constructor()&#123;    &#125;    constructor(name: String, password: String)&#123;        this.userName = name        this.userPassWord = password    &#125;&#125;</code></pre><p>改成主构造器：</p><pre><code>class User1 constructor(name: String?, password: String?) &#123;    var userName: String? = null    var userPassWord: String? = null    constructor() : this(null, null)&#123;    &#125;    init &#123;        this.userName = name        this.userPassWord = password    &#125;&#125;</code></pre><p>进一步修改：</p><pre><code>class User1 constructor(name: String?, password: String?) &#123;    var userName: String? = name    var userPassWord: String? = password     constructor(): this(null, null)&#125;</code></pre><p>再进一步修改：</p><pre><code>class User1 constructor(var name: String?, var password: String?) &#123;    constructor(): this(null, null)&#125;</code></pre><p>在主构造参数前面加上 <code>var/val</code> 使构造参数同时成为成员变量。</p><p>再进一步修改：</p><pre><code>class User1 constructor(var name: String? = null, var password: String? = null) &#123;&#125;</code></pre><hr><h3 id="4、查看kotlin类的字节码"><a href="#4、查看kotlin类的字节码" class="headerlink" title="4、查看kotlin类的字节码"></a>4、查看kotlin类的字节码</h3><hr><p>Tools –&gt; Kotlin –&gt; Show Kotlin Bytecode</p><hr><h3 id="5、Elvis操作符"><a href="#5、Elvis操作符" class="headerlink" title="5、Elvis操作符"></a>5、Elvis操作符</h3><hr><p>通过 <code>?:</code> 的操作来简化 <code>if null</code> 的操作。</p><pre><code>var myName = user.nameif (myName == null)&#123;    myName = &quot;kotlin&quot;&#125;</code></pre><p>修改后：</p><pre><code>var myName = user.name ?: &quot;kotlin&quot;</code></pre><p>修改前：</p><pre><code>if (user.name == null || user.name!!.length &lt; 4)&#123;&#125;</code></pre><p>修改后：</p><pre><code>if (user.name?.length ?: 0 &lt; 4)&#123;&#125;</code></pre><hr><h3 id="6、forEach和filter"><a href="#6、forEach和filter" class="headerlink" title="6、forEach和filter"></a>6、forEach和filter</h3><hr><p>forEach：</p><pre><code>var arrayListUser1 = ArrayList&lt;User1&gt;()var arrayListUser2 = ArrayList&lt;User1&gt;()arrayListUser1.forEach &#123;    if (it.name == &quot;kotlin&quot;)&#123;        arrayListUser2.add(it)    &#125;&#125;</code></pre><p>filter：</p><pre><code>var arrayListUser1 = ArrayList&lt;User1&gt;()var arrayListUser2: List&lt;User1&gt; = arrayListUser1.filter &#123; it.name == &quot;kotlin&quot; &#125;</code></pre><hr><h3 id="7、let、apply、run、also"><a href="#7、let、apply、run、also" class="headerlink" title="7、let、apply、run、also"></a>7、let、apply、run、also</h3><hr><p>返回自身 –&gt; 从 apply 和 also 中选</p><pre><code>作用域中使用 this 作为参数 ----&gt; 选择 apply作用域中使用 it 作为参数 ----&gt; 选择 also</code></pre><p>不需要返回自身 -&gt; 从 run 和 let 中选择</p><pre><code>作用域中使用 this 作为参数 ----&gt; 选择 run作用域中使用 it 作为参数 ----&gt; 选择 let</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强引用、软引用、弱引用、幻象引用</title>
    <link href="/2019/01/17/6.%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E5%B9%BB%E8%B1%A1%E5%BC%95%E7%94%A8/"/>
    <url>/2019/01/17/6.%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E5%B9%BB%E8%B1%A1%E5%BC%95%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Java 程序运行时的内存分配三种空间分别是静态存储区（方法区）、栈区和堆区。</p><p>静态存储区（方法区）：主要存放静态变量。这块「内存」在程序编译时就已经分配好了，并且在程序整个运行期间都存在。</p><p>栈区：当方法被执行时，方法体内的局部变量（包括基础数据类型、对象的引用）都在栈上创建，并在方法执行结束时。这些局部变量所持有的内存将会自动被释放。</p><p>堆区：又称动态内存分配，通常就是指程序运行时直接 new 出来的内存，也就是对象的实例，这部分「内存」在不使用时将会被 Java 垃圾回收器来负责回收。</p><p>局部变量的基本数据类型和引用存储于栈中，引用的对象实体存储在堆中 —— 因为他们属于方法中的变量，生命周期随方法而结束。</p><p>成员变量全部存储于堆中（包括基本数据类型，引用和引用的对象实体）—— 因为它们属于类，类对象终究是要被 new 出来使用的。</p><hr><p>两种算法判断对象需不需要回收：引用计数法(用的少)和GcRoot可达分析算法(大多数)。回收(回收算法)分为两步:需要回收的对象加入队列；调用对象的<code>finalize</code>方法。</p><p>常见回收算法</p><pre><code>标记清除算法（效率低，节省一些内存）复制算法 （效率要高，浪费一些内存）标记整理算法分代算法 </code></pre><p>GC回收内存本质上是回收对象，运用<strong>可达性分析算法</strong>。</p><p>在Java语言中，除了基本数据类型外，其他的都是指向各类对象的对象引用；Java中根据其生命周期的长短，将引用分为4类。</p><p>实现的核心是Reference与ReferenceQueue两个类。</p><h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><p>Strong Reference就是我们最常见的普通对象引用，<code>Object obj = new Object()</code>中的obj就是强引用。</p><p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略。</p><p>当JVM内存空间不足，JVM宁愿抛出OutOfMemoryError运行时错误（OOM），使程序异常终止，也不会靠随意回收具有强引用的“存活”对象来解决内存不足的问题。</p><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><p>SoftReference只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出OutOfMemoryError 之前，清理软引用指向的对象。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。后续，我们可以调用ReferenceQueue的poll()方法来检查是否有它所关心的对象被回收。如果队列为空，将返回一个null,否则该方法返回队列中前面的一个Reference对象。</p><pre><code>Object aRef = new  Object();SoftReference aSoftRef = new SoftReference(aRef);Object anotherRef = (Object)aSoftRef.get();ReferenceQueue queue = new  ReferenceQueue();SoftReference  ref = new  SoftReference(aMyObject, queue);(ref = (EmployeeRef) q.poll()) != null</code></pre><p>应用场景：软引用通常用来实现内存敏感的缓存。比如图片缓存框架，从网络上获取图片，然后将获取的图片显示的同时，通过软引用缓存起来。当下次再去网络上获取图片时，首先会检查要获取的图片缓存中是否存在，若存在，直接取出来，不需要再去网络上获取。</p><pre><code>View view = findViewById(R.id.button);Bitmap bitmap = BitmapFactory.decodeResource(getResources(),R.drawable.ic_launcher);Drawable drawable = new BitmapDrawable(bitmap);SoftReference&lt;Drawable&gt; drawableSoftReference = new SoftReference&lt;Drawable&gt;(drawable);if(drawableSoftReference != null) &#123;    view.setBackground(drawableSoftReference.get());&#125;</code></pre><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><p>WeakReference随时可能会被垃圾回收器回收，不一定要等到虚拟机内存不足时才强制回收。</p><p>由于垃圾回收器是一个优先级很低的线程，因此不一定会很快回收弱引用的对象。弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><p>应用场景：弱应用同样可用于内存敏感的缓存。</p><p>在静态内部类中，经常会使用弱引用。例如，一个类发送网络请求，承担callback的静态内部类，则常以虚引用的方式来保存外部类(宿主类)的引用，当外部类需要被JVM回收时，不会因为网络请求没有及时回来，导致外部类不能被回收，引起内存泄漏。</p><p>Glide 图片加载框架的内存缓存就使用到了弱引用缓存机制。</p><pre><code>private MyHandler handler = new MyHandler(this);private static class MyHandler extends Handler&#123;    WeakReference&lt;FirstActivity&gt; weakReference;    MyHandler(FirstActivity activity) &#123;        weakReference = new WeakReference&lt;&gt;(activity);    &#125;    @Override    public void handleMessage(Message msg) &#123;        super.handleMessage(msg);        switch (msg.what)&#123;        &#125;    &#125;&#125;</code></pre><p>当一个android主线程被创建的时候，同时会有一个Looper对象被创建，而这个Looper对象会实现一个MessageQueue(消息队列)，当我们创建一个handler对象时，而handler的作用就是放入和取出消息从这个消息队列中，每当我们通过handler将一个msg放入消息队列时，这个msg就会持有一个handler对象的引用。</p><p>因此当Activity被结束后，这个msg在被取出来之前，这msg会继续存活，但是这个msg持有handler的引用，而handler在Activity中创建，会持有Activity的引用，因而当Activity结束后，Activity对象并不能够被gc回收，因而出现内存泄漏。</p><p><strong>在java中所有非静态的对象都会持有当前类的强引用，而静态对象则只会持有当前类的弱引用。</strong></p><p>声明为静态后，handler将会持有一个Activity的弱引用，而弱引用会很容易被gc回收，这样就能解决Activity结束后，gc却无法回收的情况。</p><h2 id="幻象引用"><a href="#幻象引用" class="headerlink" title="幻象引用"></a>幻象引用</h2><p>PhantomReference也叫虚引用，不能通过它访问对象。幻象引用仅仅是提供了一种确保对象被finalize 以后，做某些事情的机制。这种引用的get()方法返回总是null。</p><p>幻想引用是针对那些已经执行完析构函数之后，仍然需要在执行一些其它操作的对象：比如资源对象的关闭就可以用到这个引用。</p><p>虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><pre><code>ReferenceQueue queue = new ReferenceQueue ();PhantomReference pr = new PhantomReference (object, queue);</code></pre><p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取一些程序行动。</p><p>应用场景：可用来跟踪对象被垃圾回收器回收的活动，当一个虚引用关联的对象被垃圾收集器回收之前会收到一条系统通知。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动web开发记录</title>
    <link href="/2019/01/07/5.%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/01/07/5.%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>设备独立像素</p><pre><code>window.devicePixelRatio</code></pre><p>屏幕的物理像素尺寸 </p><pre><code>window.screen.widthwindow.screen.height</code></pre><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>模拟调试</p><p>谷歌：</p><p><img src="/2019/01/07/5.%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/5.移动web开发记录/1.png" alt></p><p>火狐：</p><p><img src="/2019/01/07/5.%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/5.移动web开发记录/2.png" alt></p><p>真机调试：weinre、debuggap、ghostlab。同时保证设备和服务器的网络相通。</p><h2 id="视口viewport"><a href="#视口viewport" class="headerlink" title="视口viewport"></a>视口viewport</h2><p>获取<code>viewport</code>大小</p><pre><code>document.documentElement.clientWidth;document.documentElement.clientHeight;</code></pre><p>pc端:浏览器的可视大小。<code>viewport</code>中子元素当超出<code>viewport</code>的大小时：<code>viewport</code>为具体值时，会出现滚动条；当<code>viewport</code>宽高设为100%时，会自动换行；当子元素也设为百分比，可以不出现滚动条和换行。</p><p>移动端：<code>layout viewport</code>和<code>ideal viewport</code></p><p>默认视口大小，<code>layout viewport</code>同样是</p><pre><code>document.documentElement.clientWidth;document.documentElement.clientHeight;</code></pre><p>理想视口<code>ideal viewport</code>，即设备屏幕区域</p><pre><code>window.screen.widthwindow.screen.height</code></pre><h2 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h2><p><code>name=&quot;viewport&quot;</code>说明当前<code>meta</code>标签是用来设置<code>viewport</code>的属性的，这个属性只有在移动端才会有效。</p><p>控制缩放：<code>nitial-scale = ideal viewport/layout viewport</code></p><p>控制缩放</p><pre><code>maximum-scale//最大缩放比例minimum-scale//最小缩放比例，也是打开默认状态下的user-scalable//是否可以缩放，yes，no&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,user-scalable=no&quot;&gt;</code></pre><p>webstorm中快捷键<code>meta:vp+tab</code></p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;/&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>移动web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓自定义安全键盘</title>
    <link href="/2019/01/05/4.%E5%AE%89%E5%8D%93%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E5%85%A8%E9%94%AE%E7%9B%98/"/>
    <url>/2019/01/05/4.%E5%AE%89%E5%8D%93%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E5%85%A8%E9%94%AE%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h2><p>我们只需要用到系统提供的两个类：Keyboard和KeyboardView。</p><p>res下新建xml，新建Keyboard文件</p><p>Keyboard中</p><pre><code>android:keyWidth//每一个按键的宽android:keyHeight//每一个按键的高android:verticalGap//行与行之间的间隙android:horizontalGap//列与列之间的间隙</code></pre><p>Row的作用是按键的换行，每一个按键Key都在Row中。</p><p>Key中</p><pre><code>android:keyLabel//按键上的文字android:codes//输出的文字，对应ASCII表android:keyIcon//按键放置图片android:isRepeatable//删除键长按连续删除</code></pre><p>宽高、间距的单位既可以是像素，英寸等，也可以是相对于基础取值的百分比，以<code>%p</code>结尾。</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Keyboard xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:horizontalGap=&quot;0px&quot;    android:verticalGap=&quot;0px&quot;    android:keyHeight=&quot;7.5%p&quot;    android:keyWidth=&quot;30%p&quot;&gt;    &lt;Row android:verticalGap=&quot;1%p&quot;&gt;        &lt;Key            android:codes=&quot;49&quot;            android:keyLabel=&quot;1&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;50&quot;            android:keyLabel=&quot;2&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;51&quot;            android:keyLabel=&quot;3&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;    &lt;/Row&gt;    &lt;Row android:verticalGap=&quot;1%p&quot;&gt;        &lt;Key            android:codes=&quot;52&quot;            android:keyLabel=&quot;4&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;53&quot;            android:keyLabel=&quot;5&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;54&quot;            android:keyLabel=&quot;6&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;    &lt;/Row&gt;    &lt;Row android:verticalGap=&quot;1%p&quot;&gt;        &lt;Key            android:codes=&quot;55&quot;            android:keyLabel=&quot;7&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;56&quot;            android:keyLabel=&quot;8&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;57&quot;            android:keyLabel=&quot;9&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;    &lt;/Row&gt;    &lt;Row&gt;        &lt;Key            android:codes=&quot;-2&quot;            android:keyLabel=&quot;abc&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;48&quot;            android:keyLabel=&quot;0&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;        &lt;Key            android:codes=&quot;-5&quot;            android:isRepeatable=&quot;true&quot;            android:keyIcon=&quot;@mipmap/ic_delete&quot;            android:horizontalGap=&quot;2%p&quot;&gt;        &lt;/Key&gt;    &lt;/Row&gt;&lt;/Keyboard&gt;</code></pre><h2 id="KeyboardView"><a href="#KeyboardView" class="headerlink" title="KeyboardView"></a>KeyboardView</h2><p>KeyboardView</p><pre><code>android:keyBackground//键盘背景图android:keyPreviewLayout//键盘点击时候预览图的布局android:keyPreviewHeight//键盘点击时候预览图的高度android:keyTextColor//按键文字的颜色android:keyTextSize//按键文字大小android:labelTextSize//如果同时设置了文字+图片的按键android:shadowColor android:shadowRadius</code></pre><p>代码</p><pre><code>&lt;android.inputmethodservice.KeyboardView    android:id=&quot;@+id/kbv&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot;    android:background=&quot;#999999&quot;    android:focusable=&quot;true&quot;    android:focusableInTouchMode=&quot;true&quot;    android:keyBackground=&quot;@color/colorPrimaryDark&quot;    android:keyPreviewHeight=&quot;64dp&quot;    android:keyPreviewLayout=&quot;@layout/keyboard_preview&quot;    android:keyTextColor=&quot;@android:color/black&quot;    android:keyTextSize=&quot;24sp&quot;    android:labelTextSize=&quot;18sp&quot;    android:paddingTop=&quot;8dip&quot;    android:paddingBottom=&quot;8dip&quot;    android:shadowColor=&quot;#FFFFFF&quot;    android:shadowRadius=&quot;0.0&quot;    android:visibility=&quot;gone&quot;    /&gt;</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>设置</p><pre><code>Keyboard keyboard = new Keyboard(this,R.xml.tea_keyboard_num);keyboardView.setKeyboard(keyboard);keyboardView.setPreviewEnabled(true);keyboardView.setOnKeyboardActionListener(onKeyboardActionListener);</code></pre><p>OnKeyboardActionListener</p><pre><code>KeyboardView.OnKeyboardActionListener onKeyboardActionListener = new KeyboardView.OnKeyboardActionListener() &#123;    ......    @Override    public void onKey(int primaryCode, int[] keyCodes) &#123;        if (primaryCode == Keyboard.KEYCODE_CANCEL) &#123;// 完成        &#125; else if (primaryCode == Keyboard.KEYCODE_DELETE) &#123;//回退            Toast.makeText(BoardActivity.this,&quot;delete&quot;,Toast.LENGTH_SHORT).show();        &#125; else if (primaryCode == Keyboard.KEYCODE_SHIFT) &#123;//大小写切换        &#125; else if (primaryCode == Keyboard.KEYCODE_MODE_CHANGE) &#123;//数字键盘切换        &#125; else &#123;        &#125;    &#125;&#125;;</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/onlyloveyd/LazyKeyboard">https://github.com/onlyloveyd/LazyKeyboard</a></p><p><a href="https://github.com/r17171709/android_demo/tree/master/KeyBoardDemo">https://github.com/r17171709/android_demo/tree/master/KeyBoardDemo</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义</tag>
      
      <tag>键盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OkHttp基本使用及网络封装</title>
    <link href="/2018/12/02/3.OkHttp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%B0%81%E8%A3%85/"/>
    <url>/2018/12/02/3.OkHttp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1、网络基础"><a href="#1、网络基础" class="headerlink" title="1、网络基础"></a>1、网络基础</h2><h3 id="1-2、Cookie-、Session和Token"><a href="#1-2、Cookie-、Session和Token" class="headerlink" title="1.2、Cookie 、Session和Token"></a>1.2、Cookie 、Session和Token</h3><p>Cookie 、Session、Token：都是用来做持久化处理的，目的就是让客户端和服务端相互认识。Http请求默认是不持久的没有状态的，谁也不认识谁。</p><p>Cookie: 是存放在客户端的信息，这个信息是来自于服务器返回的信息，下次请求带过去，如果用户离开网站后，如果Cookie已过期一般是会被清除的。如果Cookie没过期下次访问网站还是会带过去。（相对危险）</p><p>Session: 是存放在服务器上面的客户端临时信息，用户离开网站是会被清除的。（相对安全，耗资源）</p><p>Token（App）”令牌”：用户身份的验证，有点类似于Cookie，相对来说更安全。</p><h3 id="1-3、Http缓存"><a href="#1-3、Http缓存" class="headerlink" title="1.3、Http缓存"></a>1.3、Http缓存</h3><p>Cache-Control（缓存策略）：Public、private、no-cache、max-age 、no-store（不缓存）</p><p>Expires（缓存的过期策略）：指名了缓存数据有效的绝对时间，告诉客户端到了这个时间点（比照客户端时间点）后本地缓存就作废了，在这个时间点内客户端可以认为缓存数据有效，可直接从缓存中加载展示。</p><p>如果有缓存并且过期了那么发起请求，服务端会给我们数据？（不一定会给）服务器的数据没有变动就不会给，状态码会变为304，自己拿之前过期的缓存。</p><h3 id="1-5、Https"><a href="#1-5、Https" class="headerlink" title="1.5、Https"></a>1.5、Https</h3><p>Http和Https的区别：</p><pre><code>Https = Http + 加密 + 验证身份 + 完整端口：Http (80)  Https (443)</code></pre><p>Http的缺点：数据是没有加密传输，可能遭遇窃听；不验证通信方的身份，可能会遭遇伪装；无法验证报文的完整性，可能会遭遇篡改。</p><p>TLS/SSL协议：加密：对称加密（AES，DES）+ 非对称加密 (RSA，DSA)；证书：要钱（便宜），建立连接的速度会拖慢，TCP由3次握手变为8次握手。</p><p>Http/1.1和Http/2.0的区别：</p><p>Http/2.0采用二进制格式而非文本格式；Http/2.0支持完全的多路复用；Http/2.0使用报头压缩，降低开销Http/2.0让服务器将响应主动推送给客户端，（带内容推送，不带内容推送的通知）。</p><h2 id="2、OkHttp"><a href="#2、OkHttp" class="headerlink" title="2、OkHttp"></a>2、OkHttp</h2><p><strong>异步和同步：跟线程没什么关系，打电话，同步：打电话 -&gt; 处理（没挂断） -&gt; 反馈；异步：打电话 -&gt; 处理（挂断）-&gt; 打回来</strong></p><p>网络框架要怎么处理：网络是耗时的，因此需要开线程，用线程池；处理网络，HttpUrlConnection(简单) 或者输入流+Socket(麻烦)；网络请求头信息处理，缓存的处理，文件格式上传的方式（表单提交，拼格式）；路由的一些操作，Http/2.0复用等等。</p><p>OkHttp要点——okio：原生的JavaIO+自定义封装，其实就是对于io的封装;Socket:连接；拦截器。</p><p>OkHttp流程：</p><p>1、Request里面封装了url，method，header等基本信息，然后通过<code>okhttpClient.newCall(request)</code>,将Request转化成了RealCall。</p><p>2、RealCall里面有enqueue，通过<code>call.enqueue()</code>,转换成了AsyncCall。</p><p>3、AsyncCall是RealCall的内部类，AsyncCall继承了Runnable。AsyncCall给了OKhttp的Dispatcher（线程池），executorService().execute(call); </p><p>4、最终去执行了AsyncCall.execute()方法，执行getResponseWithInterceptorChain返回 Response。</p><pre><code>synchronized void enqueue(AsyncCall call) &#123;      //判断当前正在执行的任务数量，最大是64，正在执行的任务中的host,最大是5       if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) &#123;        //加入到正在执行              runningAsyncCalls.add(call);        // 线程池，             executorService().execute(call);        &#125; else &#123;        // 加入准备执行的集合，等待执行              readyAsyncCalls.add(call);        &#125;  &#125;</code></pre><h3 id="2-1、官网和导入"><a href="#2-1、官网和导入" class="headerlink" title="2.1、官网和导入"></a>2.1、官网和导入</h3><p>官网</p><pre><code>http://square.github.io/okhttp/</code></pre><p>引入</p><pre><code>compile &apos;com.squareup.okhttp3:okhttp:3.11.0&apos;</code></pre><h3 id="2-2、测试地址"><a href="#2-2、测试地址" class="headerlink" title="2.2、测试地址"></a>2.2、测试地址</h3><pre><code>http://httpbin.org/http://httpbin.org/get?id=123http://httpbin.org/post</code></pre><h3 id="2-3、get请求"><a href="#2-3、get请求" class="headerlink" title="2.3、get请求"></a>2.3、get请求</h3><p>同步请求</p><pre><code>OkHttpClient client = new OkHttpClient();Request request = new Request.Builder().url(&quot;http://httpbin.org/get?id=123&quot;).build();try &#123;    Response response = client.newCall(request).execute();    if (response.isSuccessful()) &#123;        System.out.println(response.body().string());    &#125;&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><p>异步请求</p><pre><code>System.out.println(Thread.currentThread().getId());OkHttpClient client = new OkHttpClient();Request request = new Request.Builder().url(&quot;http://httpbin.org/get?id=123&quot;).build();client.newCall(request).enqueue(new Callback() &#123;    @Override    public void onFailure(Call call, IOException e) &#123;    &#125;    @Override    public void onResponse(Call call, Response response) throws IOException &#123;        if (response.isSuccessful()) &#123;            System.out.println(Thread.currentThread().getId());        &#125;    &#125;&#125;);</code></pre><h3 id="2-4、post请求"><a href="#2-4、post请求" class="headerlink" title="2.4、post请求"></a>2.4、post请求</h3><p>同步请求，提交表单</p><pre><code>OkHttpClient client = new OkHttpClient();FormBody body = new FormBody        .Builder()        .add(&quot;name&quot;, &quot;shuaige&quot;)        .add(&quot;age&quot;, &quot;19&quot;)        .build();Request request = new Request.Builder().url(&quot;http://httpbin.org/post&quot;).post(body).build();try &#123;    Response response = client.newCall(request).execute();    if (response.isSuccessful()) &#123;        System.out.println(response.body().string());    &#125;&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><p>异步提交，提交json</p><pre><code>OkHttpClient okHttpClient  = new OkHttpClient.Builder()            .connectTimeout(10, TimeUnit.SECONDS)            .writeTimeout(10,TimeUnit.SECONDS)            .readTimeout(20, TimeUnit.SECONDS)            .build();Book book = new Book();book.setName(&quot;android&quot;);//使用GsonGson gson = new Gson();//使用Gson将对象转换为json字符串String json = gson.toJson(book);//MediaType设置Content-Type 标头中包含的媒体类型值RequestBody requestBody = FormBody.create(MediaType.parse(&quot;application/json; charset=utf-8&quot;), json);Request request = new Request.Builder()        .url(&quot;http://172.20.192.168:8080/getbookByJson&quot;)//请求的url        .post(requestBody)        .build();//创建CallCall call = okHttpClient.newCall(request);//加入队列 异步操作call.enqueue(new Callback() &#123;    //请求错误回调方法    @Override    public void onFailure(Call call, IOException e) &#123;        System.out.println(&quot;连接失败&quot;);    &#125;    @Override    public void onResponse(Call call, Response response) throws IOException &#123;        System.out.println(response.body().string());    &#125;</code></pre><h3 id="2-5、设置url参数-HttpUrl"><a href="#2-5、设置url参数-HttpUrl" class="headerlink" title="2.5、设置url参数-HttpUrl"></a>2.5、设置url参数-HttpUrl</h3><pre><code>OkHttpClient client = new OkHttpClient();HttpUrl httpUrl = HttpUrl.parse(&quot;http://httpbin.org/get&quot;).        newBuilder().        addQueryParameter(&quot;city&quot;, &quot;beijing&quot;).        addQueryParameter(&quot;id&quot;, &quot;123&quot;).        build();String url = httpUrl.toString();System.out.println(httpUrl.toString());// http://httpbin.org/get?city=beijing&amp;key=123Request request = new Request.Builder().url(url).build();try &#123;    Response response = client.newCall(request).execute();    if (response.isSuccessful()) &#123;        System.out.println(response.body().string());    &#125;&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><h3 id="2-6、请求头的设置-addHeader"><a href="#2-6、请求头的设置-addHeader" class="headerlink" title="2.6、请求头的设置-addHeader"></a>2.6、请求头的设置-addHeader</h3><pre><code>OkHttpClient client = new OkHttpClient();Request request = new Request.Builder().        url(&quot;http://httpbin.org/get?id=123&quot;).        addHeader(&quot;User-Agent&quot;, &quot;this my head&quot;).        addHeader(&quot;Accept&quot;, &quot;text/plain, text/html&quot;).        build();try &#123;    Response response = client.newCall(request).execute();    if (response.isSuccessful()) &#123;        System.out.println(response.body().string());    &#125;&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><h3 id="2-7、上传文件"><a href="#2-7、上传文件" class="headerlink" title="2.7、上传文件"></a>2.7、上传文件</h3><pre><code>RequestBody imageBody = RequestBody.create(MediaType.parse(&quot;image/jpeg&quot;), new File(&quot;文件路径+文件名&quot;));MultipartBody body = new MultipartBody.Builder()        .setType(MultipartBody.FORM)        .addFormDataPart(&quot;name&quot;, &quot;name&quot;)        .addFormDataPart(&quot;filename&quot;, &quot;文件名&quot;, imageBody).build();OkHttpClient client = new OkHttpClient();Request request = new Request.Builder().url(&quot;http://192.168.1.6:8080/web/UploadServlet&quot;).post(body).build();try &#123;    Response response = client.newCall(request).execute();    if (response.isSuccessful()) &#123;        System.out.println(response.body().string());    &#125;&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><p><strong>boundary</strong></p><h3 id="2-8、定义拦截器"><a href="#2-8、定义拦截器" class="headerlink" title="2.8、定义拦截器"></a>2.8、定义拦截器</h3><pre><code>//定义拦截器Interceptor interceptor = new Interceptor() &#123;    @Override    public Response intercept(Chain chain) throws IOException &#123;        long start = System.currentTimeMillis();        Request request  = chain.request();        Response response = chain.proceed(request);        long end = System.currentTimeMillis();        System.out.println(&quot;interceptor: cost time = &quot; + (end - start));        return response;    &#125;&#125;;// 创建 OkHttpClient 对象OkHttpClient client = new OkHttpClient.Builder()        .addInterceptor(interceptor)        .build();</code></pre><h3 id="2-9、缓存"><a href="#2-9、缓存" class="headerlink" title="2.9、缓存"></a>2.9、缓存</h3><p>使用缓存的前提是服务器支持缓存</p><pre><code>// 创建缓存对象，缓存文件和缓存大小Cache cache = new Cache(new File(&quot;cache.cache&quot;), 1024 * 1024);// 创建 OkHttpClient 对象OkHttpClient client = new OkHttpClient.Builder()        .cache(cache)        .build();// 创建 Request 对象Request request = new Request.Builder()        .url(&quot;http://httpbin.org/get?id=id&quot;)        .cacheControl(CacheControl.FORCE_NETWORK)//只从网络读取        //.cacheControl(CacheControl.FORCE_CACHE)//只读取缓存        //.cacheControl(new CacheControl.Builder().noCache().build())//永远不使用缓存        //.cacheControl(new CacheControl.Builder().maxStale(365, TimeUnit.DAYS).build())//最大缓存时效365天        .build();// OkHttpClient 执行 Requesttry &#123;    Response response = client.newCall(request).execute();    Response responseCache = response.cacheResponse();    Response responseNet = response.networkResponse();    if (responseCache != null) &#123;        //从缓存响应        System.out.println(&quot;response from cache&quot;);    &#125;    if (responseNet != null) &#123;        //从网络响应        System.out.println(&quot;response from net&quot;);    &#125;    System.out.println(&quot;response:&quot; + response.body().string());&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><p><strong>Okhttp实现缓存方式：在<code>CacheInterceptor</code>缓存拦截器中，根据缓存策略<code>CacheStrategy</code>分配。<code>Cache</code>和<code>DiskLruCache</code>。</strong></p><h3 id="2-10、文件下载"><a href="#2-10、文件下载" class="headerlink" title="2.10、文件下载"></a>2.10、文件下载</h3><pre><code>OkHttpClient client = new OkHttpClient();Request request = new Request.Builder().url(&quot;文件地址&quot;).        addHeader(&quot;Accept-Encoding&quot;,&quot;identity&quot;).        addHeader(&quot;Range&quot;, &quot;bytes=0-&quot;).        build();try &#123;    Response response = client.newCall(request).execute();    System.out.println(&quot;content-length : &quot;+response.body().contentLength());    if (response.isSuccessful()) &#123;        Headers headers = response.headers();        for (int i = 0; i &lt; headers.size(); i++) &#123;            System.out.println(headers.name(i) + &quot; : &quot; + headers.value(i));        &#125;    &#125;&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><p><strong><code>content-length</code>和<code>Range</code>。</strong></p><h2 id="3、源码分析"><a href="#3、源码分析" class="headerlink" title="3、源码分析"></a>3、源码分析</h2><p>Volley是基于HttpUrlConnection；OkHttp基于Okio(原生的JavaIO + 自定义封装) + Socket连接。</p><h3 id="3-1、OkHttpClient"><a href="#3-1、OkHttpClient" class="headerlink" title="3.1、OkHttpClient"></a>3.1、OkHttpClient</h3><hr><p>OkHttpClient相当于配置中心，所有的请求都会共享这些配置，比如出错是否重试、共享的连接池。主要配置有：</p><pre><code>//调度器，主要管理线程，用于调度后台发起的网络请求，有后台总请求数和单主机总请求数的控制。//private int maxRequests = 64;private int maxRequestsPerHost = 5;final Dispatcher dispatcher;//支持的应用层协议，即HTTP/1.1、HTTP/2等final List&lt;Protocol&gt; protocols;//应用层支持的Socket设置，即使用明文传输（HTTP）还是某个版本的TLS（用于HTTPS）。final List&lt;ConnectionSpec&gt; connectionSpecs;//自己定义的拦截器配置final List&lt;Interceptor&gt; interceptors;//自己定义的和网络请求交互的Interceptor配置。final List&lt;Interceptor&gt; networkInterceptors;//管理CooKie的控制器final CookieJar cookieJar;//Cache存储的配置。默认没有，如果要用，需要自己配置存储的文件位置和存储空间上线final @Nullable Cache cache;//验证HTTPS握手过程中下载到的证书所属者是否和自己要访问的主机名一致final HostnameVerifier hostnameVerifier;//一般用于防止网站证书被人仿制，开发者可以做自签名final CertificatePinner certificatePinner;//自动重新认证。配置后，如果401，会直接调用authenticatorfinal Authenticator authenticator;//遇到重定向，是否自动follow在HTTP和HTTPS之间切换重定向final boolean followSslRedirects;//遇到重定向，是否自动followfinal boolean followRedirects;//请求失败是否重试。重试只适用于同一个域名的多个IP切换重试、Socket失效重试等final boolean retryOnConnectionFailure;//建立连接的超时时间final int connectTimeout;//发起请求到读到响应数据的超时时间final int readTimeout;//发起请求并被目标服务器接受的超时时间final int writeTimeout;</code></pre><p>CertificatePinner的配置公钥示例：</p><pre><code>String hostname = &quot;publicobject.com&quot;;CertificatePinner certificatePinner = new CertificatePinner.Builder().add(hostname, &quot;sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;).build();OkHttpClient client = OkHttpClient.Builder().certificatePinner(certificatePinner).build();Request request = new Request.Builder().url(&quot;https://&quot; + hostname).build();client.newCall(request).execute();</code></pre><hr><h3 id="3-2、RealCall"><a href="#3-2、RealCall" class="headerlink" title="3.2、RealCall"></a>3.2、RealCall</h3><hr><p>newCall(Request)方法会返回一个RealCall对象，它是Call接口的实现。</p><pre><code>final class RealCall implements Call &#123;</code></pre><p>当调用RealCall.execute()的时候，getResponseWithInterceptorChain()会被调用，它会发起网络请求并拿到返回的响应，装进一个Response对象并作为返回值返回。</p><pre><code>Response result = getResponseWithInterceptorChain();</code></pre><p>RealCall.enqueue()被调用的时候大同小异，区别在于enqueue会使用Dispatcher的线程池来把请求放在后台线程进行，但实质上使用的同样也是getResponseWithInterceptorChain()方法。</p><p>getResponseWithInterceptorChain()方法里做的事：把所有配置好的Interceptor放在一个List里，然后作为参数，创建一个RealInterceptorChain对象，并调用chain.proceed(request)发起请求和获取响应。</p><p>RealCall类中的<code>getResponseWithInterceptorChain()</code>方法作用：<strong>将请求Request转变成响应Response</strong>。</p><pre><code>Response getResponseWithInterceptorChain() throws IOException &#123;    // 拦截器的一个集合    List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();    // 客户端的所有自定义拦截器，可以添加自己定义的    interceptors.addAll(client.interceptors());    // OKhttp 5 个拦截器 ，责任链设计模式，每一个拦截器只处理与他相关的部分    interceptors.add(retryAndFollowUpInterceptor);// 重试    interceptors.add(new BridgeInterceptor(client.cookieJar()));// 基础    interceptors.add(new CacheInterceptor(client.internalCache()));// 缓存    interceptors.add(new ConnectInterceptor(client));// 建立连接,连接服务器    interceptors.add(new CallServerInterceptor(forWebSocket));// 写数据    Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,            originalRequest, this, eventListener, client.connectTimeoutMillis(),            client.readTimeoutMillis(), client.writeTimeoutMillis());    return chain.proceed(originalRequest);&#125;</code></pre><hr><h3 id="3-3、拦截器"><a href="#3-3、拦截器" class="headerlink" title="3.3、拦截器"></a>3.3、拦截器</h3><p>在RealInterceptorChain中，多个Interceptor会依次调用自己的intercepter方法，方法会做三件事情</p><p>1、对请求进行预处理</p><p>2、预处理之后，重新调用RealInterceptorChain.proceed()把请求交给下一个Interceptor。</p><p>3、在下一个Interceptor处理完成并返回之后，拿到Response进行后续处理</p><p>从上到下，每级Interceptor：</p><p>1、首先是开发者自己设置的addInterceptor(Interceptor)，在所有其他Interceptor处理之前，进行最早的预处理工作，以及收到Response之后，做最后的善后工作。如果有统一的header要添加，可以在这里设置。</p><p>2、RetryAndFollowUpInterceptor：</p><p>处理重试的一个拦截器，会去处理一些异常，只要不是致命的异常就会重新发起一次请求（把Request给下级），如果是致命的异常就会抛给上一级；<br>会处理一些重定向等等，比如 3XX 307、407 就会从头部中获取新的路径，生成一个新的请求交给下一级（重新发起一次请求）。</p><p>3、BridgeInterceptor</p><p>做一个简单的处理，设置一些通用的请求头，Content-Type、Connection、Content-Length的计算和添加、Cookie。做一些返回的处理，如果返回的数据被压缩了采用ZipSource, 保存 Cookie。</p><p>4、CacheInterceptor</p><p>在缓存可用的情况下，直接读取本地的缓存的数据，如果本地的缓存没有直接去服务器，如果本地的缓存有，首先判断有没有缓存策略，然后判断有没有过期，如果没有过期直接拿缓存，如果过期了需要添加一些之前头部信息如<code>If-Modified-Since</code>,这个时候后台有可能会返回304代表还是可以拿本地缓存，每次读取到新的响应后做一次缓存。</p><p>5、ConnectInterceptor</p><p>findHealthyConnection()找一个连接，首先判断有没有健康的，没有就创建（建立Scoket,握手连接），连接缓存得到一条结论：OkHttp是基于原生的Socket + okio（原生IO的封装）。封装HttpCodec里面封装了okio的Source（输入）和Sink(输出)，我们通过HttpCodec就可以操作 Socket的输入输出，我们就可以像服务器写数据和读取返回数据。</p><p>TCP连接（如果是HTTP）或者是建立在TCP连接之上的TLS连接（如果是HTTPS），并且会创建出对应的HttpCodec对象（用于编码解码HTTP请求）。</p><p>6、addNetworkInterceptor：开发者自己设置的，这里设置的Interceptor会看到每个请求和响应的数据（包括重定向以及重试的一些中间请求和响应），并且看到的是完整原始数据，而不死没加Content-Length的请求数据，或者Body还没有被gzip解压的响应数据。</p><p>7、CallServerInterceptor</p><p>它负责实质的请求和响应的I/O操作，即往Socket里写入请求数据和从Socket里读取响应数据。Socket就是TCP的端口。</p><p>连接三个核心类（连接复用）</p><p>RealConnection: 建立连接的一个对象的封装</p><p>ConnectionPool：保存了连接</p><p>StreamAllocation: 找一些连接，做一下封装</p><h2 id="4、Okio"><a href="#4、Okio" class="headerlink" title="4、Okio"></a>4、Okio</h2><p>程序内部（内存）和外部（本地文件和网络）进行数据交互的过程，就叫输入输出。</p><p>从文件里或者从网络上读数据到内存里，就叫输入；从内存里写到文件里或者发送到网络上，就叫输出。Java I/O 作用只有一个：和外界做数据交互。使用流，例如 <code>FileInputStream / FileOutputStream</code>。</p><p>Okio特点：基于插管的，而且是单向的，输入源叫 Source，输出目标叫 Sink，支持 Buffer，可以对 Buffer 进行操作，但不强制使用Buffer。</p><pre><code>try (Source source = Okio.buffer(Okio.source(new File(&quot;./io/text.txt&quot;)))) &#123;    Buffer buffer = new Buffer();    source.read(buffer, 1024);    System.out.println(buffer.readUtf8Line());    System.out.println(buffer.readUtf8Line());&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OkHttp</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML和CSS基础</title>
    <link href="/2018/12/01/2.html%E5%92%8Ccss%E5%9F%BA%E7%A1%80/"/>
    <url>/2018/12/01/2.html%E5%92%8Ccss%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>sublime</p><pre><code>http://www.sublimetext.com/https://jingyan.baidu.com/article/925f8cb8dedc12c0dce05674.htmlhttps://jingyan.baidu.com/article/ce43664935b90c3772afd377.html</code></pre><hr><p>HTML的全称为：<code>HyperText Mark-up Language</code>, 指的是超文本标记语言。 标记：就是标签，标签大多数都是成对出现的。</p><p>所谓超文本，有两层含义:因为网页中还可以图片、视频、音频等内容(超越文本限制);它还可以在网页中跳转到另一个网页，与世界各地主机的网页链接(超链接文本)。</p><hr><p>html的基本结构</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;                    &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;网页标题&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;          网页显示内容    &lt;/body&gt;&lt;/html&gt;</code></pre><hr><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="常用的html标签"><a href="#常用的html标签" class="headerlink" title="常用的html标签"></a>常用的html标签</h3><hr><pre><code>&lt;!-- 1、成对出现的标签：--&gt;&lt;h1&gt;h1标题&lt;/h1&gt;&lt;h2&gt;h2标题&lt;/h2&gt;&lt;h3&gt;h3标题&lt;/h3&gt;&lt;h4&gt;h4标题&lt;/h4&gt;&lt;h5&gt;h5标题&lt;/h5&gt;&lt;h6&gt;h6标题&lt;/h6&gt;&lt;div&gt;这是一个div标签&lt;/div&gt;&lt;p&gt;这个一个段落标签&lt;/p&gt;&lt;span&gt;这是一个span标签&lt;/span&gt;&lt;!-- 2、单个出现的标签： --&gt;&lt;br /&gt;    //换行&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;&quot; border=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;&lt;hr /&gt;    //分割线&lt;!-- 3、带属性的标签，如src、alt 和 href等都是属性 --&gt;&lt;img src=&quot;images/pic.jpg&quot; alt=&quot;图片&quot;&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度网&lt;/a&gt;&lt;!-- 4、标签的嵌套 --&gt;&lt;div&gt;    &lt;img src=&quot;images/pic.jpg&quot; alt=&quot;图片&quot;&gt;    &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度网&lt;/a&gt;&lt;/div&gt;</code></pre><hr><h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><hr><p>加粗</p><pre><code>&lt;strong&gt;&lt;/strong&gt;&lt;b&gt;&lt;/b&gt;</code></pre><p>倾斜</p><pre><code>&lt;i&gt;&lt;/i&gt;&lt;em&gt;&lt;/em&gt;</code></pre><p>删除线</p><pre><code>&lt;s&gt;&lt;/s&gt;&lt;del&gt;&lt;/del&gt;</code></pre><p>下划线</p><pre><code>&lt;u&gt;&lt;/u&gt;&lt;ins&gt;&lt;/ins&gt;</code></pre><p>链接</p><pre><code>&lt;a href=&quot;&quot; target=&quot;&quot;&gt;&lt;/a&gt;</code></pre><p>锚点定位（跳转）</p><pre><code>&lt;a href=&quot;#id&quot;&gt;&lt;/a&gt;</code></pre><p>base设置整体链接状态</p><pre><code>&lt;base target=&quot;_blank&quot; /&gt;</code></pre><p>特殊字符</p><table><thead><tr><th style="text-align:center">特殊字符</th><th style="text-align:center">描述</th><th style="text-align:center">字符的代码</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">空格符</td><td style="text-align:center"><code>&amp;nbsp;</code></td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号</td><td style="text-align:center"><code>&amp;lt;</code></td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号</td><td style="text-align:center"><code>&amp;gt;</code></td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">和号</td><td style="text-align:center"><code>&amp;amp;</code></td></tr><tr><td style="text-align:center">¥</td><td style="text-align:center">人民币</td><td style="text-align:center"><code>&amp;yen;</code></td></tr><tr><td style="text-align:center">©</td><td style="text-align:center">版权</td><td style="text-align:center"><code>&amp;copy;</code></td></tr><tr><td style="text-align:center">®</td><td style="text-align:center">注册商标</td><td style="text-align:center"><code>&amp;reg;</code></td></tr><tr><td style="text-align:center">°</td><td style="text-align:center">摄氏度</td><td style="text-align:center"><code>&amp;deg;</code></td></tr><tr><td style="text-align:center">±</td><td style="text-align:center">正负号</td><td style="text-align:center"><code>&amp;plusmn;</code></td></tr><tr><td style="text-align:center">×</td><td style="text-align:center">乘号</td><td style="text-align:center"><code>&amp;times;</code></td></tr><tr><td style="text-align:center">÷</td><td style="text-align:center">除号</td><td style="text-align:center"><code>&amp;divide;</code></td></tr><tr><td style="text-align:center">²</td><td style="text-align:center">平方2 (上标2)</td><td style="text-align:center"><code>&amp;sup2;</code></td></tr><tr><td style="text-align:center">³</td><td style="text-align:center">立方3 (上标3)</td><td style="text-align:center"><code>&amp;sup3;</code></td></tr></tbody></table><hr><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><hr><p>无序列表</p><pre><code>&lt;ul&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>有序列表</p><pre><code>&lt;ol&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code></pre><p>注意：<code>ul</code>和<code>ol</code>里面之能放<code>li</code>,<code>li</code>里面可以放其他标签。</p><p>自定义列表</p><pre><code>&lt;dl&gt;    &lt;dt&gt;&lt;/dt&gt;    &lt;dd&gt;&lt;/dd&gt;    &lt;dd&gt;&lt;/dd&gt;&lt;/dl&gt;</code></pre><hr><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><hr><pre><code>&lt;table width=&quot;&quot; border=&quot;&quot; align=&quot;&quot; cellpadding=&quot;&quot; cellspacing=&quot;&quot;&gt;    &lt;caption&gt;表格标题&lt;/caption&gt;    &lt;thead&gt;        &lt;tr&gt;            &lt;th&gt;表头&lt;/th&gt;            &lt;th&gt;表头&lt;/th&gt;            &lt;th&gt;表头&lt;/th&gt;        &lt;/tr&gt;    &lt;/thead&gt;    &lt;tbody&gt;        &lt;tr align=&quot;&quot;&gt;            &lt;td&gt;11&lt;/td&gt;            &lt;td&gt;12&lt;/td&gt;            &lt;td&gt;12&lt;/td&gt;        &lt;/tr&gt;        &lt;/tbody&gt;&lt;/table&gt;</code></pre><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">含义</th><th style="text-align:center">常用属性值</th></tr></thead><tbody><tr><td style="text-align:center">border</td><td style="text-align:center">设置表格的边框(默认border=”0”无边框)</td><td style="text-align:center">像素值</td></tr><tr><td style="text-align:center">ellspacing</td><td style="text-align:center">设置单元格与单元格边框之间的空白间距</td><td style="text-align:center">像素值(默认为2像素)</td></tr><tr><td style="text-align:center">cellpadding</td><td style="text-align:center">设置单元格内容与单元格边框之间的空白间距</td><td style="text-align:center">像素值(默认为1像素)</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">设置表格的宽度</td><td style="text-align:center">像素值</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">设置表格的高度</td><td style="text-align:center">像素值</td></tr><tr><td style="text-align:center">align</td><td style="text-align:center">设置表格在网页中的水平对齐方式</td><td style="text-align:center">left、center、 right</td></tr></tbody></table><blockquote><p>合并单元格（<code>rowspan</code>合并行，<code>colspan</code>合并列）</p></blockquote><pre><code>&lt;table width=&quot;500&quot; border=&quot;1&quot;&gt;    &lt;tr&gt;        &lt;td&gt;11&lt;/td&gt;        &lt;td&gt;12&lt;/td&gt;        &lt;td rowspan=&quot;2&quot;&gt;13&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;21&lt;/td&gt;        &lt;td&gt;22&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;          &lt;td&gt;31&lt;/td&gt;        &lt;td colspan=&quot;2&quot;&gt;32&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><p>效果</p><p><img src="/2018/12/01/2.html%E5%92%8Ccss%E5%9F%BA%E7%A1%80/2.html和css基础/3.png" alt></p><hr><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><hr><p>表单标签是<code>&lt;form&gt;</code>标签,定义整体的表单区域。</p><blockquote><p>input表单</p></blockquote><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">属性值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">type</td><td style="text-align:center">text</td><td style="text-align:center">单行文本输入框</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">password</td><td style="text-align:center">密码输入框</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">radio</td><td style="text-align:center">单选按钮</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">checkbox</td><td style="text-align:center">复选框</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">button</td><td style="text-align:center">普通按钮</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">submit</td><td style="text-align:center">提交按钮</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">reset</td><td style="text-align:center">重置按钮</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">image</td><td style="text-align:center">图像形式的提交按钮</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">file</td><td style="text-align:center">文件域</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">由用户自定义</td><td style="text-align:center">控件的名称</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">由用户自定义</td><td style="text-align:center">input控件中的默认文本值</td></tr><tr><td style="text-align:center">size</td><td style="text-align:center">正整数</td><td style="text-align:center">input控件在页面中的显示宽度</td></tr><tr><td style="text-align:center">checked</td><td style="text-align:center">checked</td><td style="text-align:center">定义选择控件默认被选中的项</td></tr><tr><td style="text-align:center">maxlength</td><td style="text-align:center">正整数</td><td style="text-align:center">控件允许输入的最多字符数</td></tr></tbody></table><p>注意：</p><p> 同一组radio中，name要相同。</p><blockquote><p>label标签</p></blockquote><pre><code>&lt;label&gt; 用户名&lt;input type=&quot;text&quot;&gt; &lt;/label&gt;&lt;br /&gt;&lt;label for=&quot;pwd&quot;&gt;    用户名&lt;input type=&quot;text&quot; /&gt;    密码&lt;input type=&quot;password&quot; id=&quot;pwd&quot; /&gt;&lt;/label&gt;</code></pre><blockquote><p>textarea标签</p></blockquote><pre><code>&lt;textarea cols=&quot;每行中字符数&quot; rows=&quot;显示的行数&quot;&gt;        &lt;/textarea&gt;</code></pre><blockquote><p>select标签</p></blockquote><pre><code>&lt;select name=&quot;&quot; id=&quot;&quot;&gt;    &lt;option value=&quot;&quot;&gt;请选择&lt;/option&gt;    &lt;option value=&quot;&quot;&gt;1&lt;/option&gt;    &lt;option value=&quot;&quot; selected=&quot;selected&quot;&gt;2&lt;/option&gt;    &lt;option value=&quot;&quot;&gt;3&lt;/option&gt;&lt;/select&gt;</code></pre><hr><h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><hr><pre><code>&lt;form action=&quot;提交地址url&quot; method=&quot;提交方式get/post&quot;&gt;    用户名&lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt;     &lt;input type=&quot;submit&quot; value=&quot;提交&quot; name=&quot;submit&quot; /&gt;&lt;/form&gt;</code></pre><p>action属性：设置表单数据提交地址。method属性 设置表单提交的方式，一般有“GET”方式和“POST”方式, 不区分大小写。</p><p>表单元素属性设置：name属性：设置表单元素的名称，该名称是提交数据时的参数名；value属性：设置表单元素的值，该值是提交数据时参数名所对应的值。</p><blockquote><p>拓展</p></blockquote><pre><code>http://www.w3school.com.cn/https://developer.mozilla.org/zh-CN/</code></pre><hr><h2 id="引入CSS样式表"><a href="#引入CSS样式表" class="headerlink" title="引入CSS样式表"></a>引入CSS样式表</h2><hr><p>css(Cascading Style Sheet)层叠样式表，它是用来美化页面的一种语言。</p><p>第一种：行内式（内联样式）</p><pre><code>&lt;h3 style=&quot;color: pink; font-size: 25px;&quot;&gt;英文版新闻报&lt;/h3&gt;</code></pre><p>第二种：内部样式表</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        h3 &#123;            color: pink;            font-size: 60px;         &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;h3&gt;英文版新闻报&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>第三种：外部样式表(外联式)</p><p>html文件</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;     &lt;h3&gt;英文版新闻报&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>css文件</p><pre><code>h3 &#123;    color: pink;    font-size: 60px; &#125;</code></pre><hr><h2 id="CSS选择器之基本选择器"><a href="#CSS选择器之基本选择器" class="headerlink" title="CSS选择器之基本选择器"></a>CSS选择器之基本选择器</h2><h3 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h3><hr><p>把某类标签全部选出来。</p><hr><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><hr><pre><code>.类名 &#123;    属性:属性值;&#125;</code></pre><p>注意：可以使用中横线命名，不建议使用下划线<code>_</code>,不能数字开头。</p><blockquote><p>多类名选择器</p></blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .colred &#123;            color: red;        &#125;        .font20 &#123;            font-size: 50px;            color: blue;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;h3 class=&quot;colred font20&quot;&gt;英文版新闻报&lt;/h3&gt;     &lt;h3 class=&quot;colred&quot;&gt;英文版新闻报&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>注意：空格隔开；样式显示跟类名先后顺序没有关系，受css样式书写的上下顺序有关。</p></blockquote><hr><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><hr><pre><code>#id &#123;    属性:属性值;&#125;</code></pre><blockquote><p>注意：id只能使用一次，class可以使用多次。</p></blockquote><p>第四种：通配符选择器</p><p><code>*</code>代表所有，<code>?</code>代表单个字符。</p><pre><code>* &#123;    属性：属性值;&#125;</code></pre><hr><h2 id="CSS选择器之复合选择器"><a href="#CSS选择器之复合选择器" class="headerlink" title="CSS选择器之复合选择器"></a>CSS选择器之复合选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><hr><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        div p &#123;            color: pink;        &#125;        .dd p&#123;            font-size: 30px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;div&gt;         &lt;p&gt;英文版新闻报&lt;/p&gt;     &lt;/div&gt;     &lt;div class=&quot;dd&quot;&gt;         &lt;p&gt;英文版新闻报&lt;/p&gt;     &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="子代选择器-选择亲儿子"><a href="#子代选择器-选择亲儿子" class="headerlink" title="子代选择器-选择亲儿子"></a>子代选择器-选择亲儿子</h3><hr><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        ul li &gt; a &#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;ul&gt;         &lt;li&gt;             &lt;a href=&quot;#&quot;&gt;一级菜单&lt;/a&gt;             &lt;div&gt;                 &lt;a href=&quot;#&quot;&gt;二级菜单&lt;/a&gt;             &lt;/div&gt;         &lt;/li&gt;     &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器 **"></a>并集选择器 **</h3><hr><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        div,p,span &#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;div&gt;并集选择器&lt;/div&gt;     &lt;p&gt;并集选择器&lt;/p&gt;     &lt;span&gt;并集选择器&lt;/span&gt;     &lt;h1&gt;并集选择器&lt;/h1&gt;     &lt;a href=&quot;#&quot;&gt;并集选择器&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="交集选择器-即-又"><a href="#交集选择器-即-又" class="headerlink" title="交集选择器(即..又..)"></a>交集选择器(即..又..)</h3><hr><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        div.red &#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;div class=&quot;red&quot;&gt;交集选择器&lt;/div&gt;     &lt;p class=&quot;red&quot;&gt;交集选择器&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><hr><p>链接伪类选择器</p><pre><code>link  /*未访问的链接*/visited /*已访问的链接*/hover /*鼠标移动到链接上*/active /*选定的链接*/</code></pre><p>代码示例</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        a:link &#123;&lt;!-- 未访问的链接状态 --&gt;            color: #333;            text-decoration: none;        &#125;        a:visited &#123;&lt;!-- 已访问的链接 --&gt;            color: pink;        &#125;        a:hover &#123;&lt;!-- 鼠标经过时候样子 --&gt;            color: red;        &#125;        a:active &#123;&lt;!-- 鼠标按下时候样子 --&gt;            color: green;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;a href=&quot;http://www.baidu.com&quot;&gt;双十一&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>常见写法</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        a &#123;            color: #333;            text-decoration: none;            font-size: 25px;            font-weight: 700;        &#125;        a:hover &#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;a href=&quot;http://www.baidu.com&quot;&gt;双十一&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><hr><h2 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h2><h3 id="布局常用样式属性"><a href="#布局常用样式属性" class="headerlink" title="布局常用样式属性"></a>布局常用样式属性</h3><hr><pre><code>width 设置元素(标签)的宽度，如：width:100px;height 设置元素(标签)的高度，如：height:200px;background 设置元素背景色或者背景图片，如：background:gold; 设置元素的背景色, background: url(images/logo.png); 设置元素的背景图片。border 设置元素四周的边框，如：border:1px solid black; 设置元素四周边框是1像素宽的黑色实线以上也可以拆分成四个边的写法，分别设置四个边的：border-top 设置顶边边框，如：border-top:10px solid red;border-left 设置左边边框，如：border-left:10px solid blue;border-right 设置右边边框，如：border-right:10px solid green;border-bottom 设置底边边框，如：border-bottom:10px solid pink;padding 设置元素包含的内容和元素边框的距离，也叫内边距，如padding:20px;padding是同时设置4个边的，也可以像border一样拆分成分别设置四个边:padding-top、padding-left、padding-right、padding-bottom。margin 设置元素和外界的距离，也叫外边距，如margin:20px;margin是同时设置4个边的，也可以像border一样拆分成分别设置四个边:margin-top、margin-left、margin-right、margin-bottom。float 设置元素浮动，浮动可以让块元素排列在一行，浮动分为左浮动：float:left; 右浮动：float:right;</code></pre><hr><h3 id="文本常用样式属性"><a href="#文本常用样式属性" class="headerlink" title="文本常用样式属性"></a>文本常用样式属性</h3><hr><pre><code>color 设置文字的颜色，如： color:red;font-size 设置文字的大小，如：font-size:12px;font-family 设置文字的字体，如：font-family:&apos;微软雅黑&apos;;为了避免中文字不兼容，一般写成：font-family:&apos;Microsoft Yahei&apos;;font-weight 设置文字是否加粗，如：font-weight:bold; 设置加粗 font-weight:normal 设置不加粗line-height 设置文字的行高，如：line-height:24px; 表示文字高度加上文字上下的间距是24px，也就是每一行占有的高度是24pxtext-decoration 设置文字的下划线，如：text-decoration:none; 将文字下划线去掉text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中text-indent 设置文字首行缩进，如：text-indent:24px; 设置文字首行缩进24px</code></pre><hr><h2 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a>CSS字体属性</h2><hr><p>font-size字号大小（px、em）、font-family字体 、font-weight字体粗细 、font-style字体风格（倾斜） </p><pre><code>font-size: 18px;/*font-family: &quot;宋体&quot;;*/            font-family: &quot;\5B8B\4F53&quot;;font-weight: bold;/*font-weight: normal;*//*font-style: normal;*/font-style: italic;    </code></pre><p>bold相当于700，normal为400。</p><p>font综合设置</p><pre><code>选择器&#123;font: font-style font-weight font-size font-family ;&#125;</code></pre><p>注意：不能更换顺序。<code>font-size</code>和<code>font-family</code>不能省略。</p><h2 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h2><p>color颜色、line-height行间距、text-align文字水平对齐方式(left ,right,center)、text-indent首行缩进、text-decoration文本的装饰。</p><pre><code>color: #FF0000;line-height: 24px;text-align: left;text-indent: 2em;text-decoration: line-through;/*none:无装饰、underline:下划线、line-through:删除线*/</code></pre><blockquote><p>注意：如果行高<code>line-height</code>等于<code>height</code>高度，文字会垂直居中。</p></blockquote><p>一般居中写法</p><p><code>line-height: (=height);text-align: center;</code></p><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><pre><code>background-color: #fff;background-image: url();</code></pre><p><code>background-repeat</code></p><pre><code>/* 平铺方式：repeat、no-repeat、repeat-x、repeat-y*/background-repeat: repeat-x;</code></pre><p><code>background-position</code></p><pre><code>/* x轴和y轴位置 ，top、bottom、left、right*//* background-position: 12px 12px; *//* 如果只写一个方位，另一个默认居中 *//* background-position: bottom; */background-position: center bottom;</code></pre><p><code>background-attachment</code>滚动还是固定，默认滚动</p><pre><code>/* fixed */background-attachment: scroll;</code></pre><p><code>background</code>简写,没有强制顺序</p><pre><code>background: background-color background-image background-repeat background-attachment background-positionbackground: transparent url(image.jpg) repeat scroll 50% 0;</code></pre><p>设置透明，最后一位为alpha</p><pre><code>background: rgba(0, 0, 0, 0.5);</code></pre><h2 id="标签显示模式"><a href="#标签显示模式" class="headerlink" title="标签显示模式"></a>标签显示模式</h2><p>块级元素和行内元素相互转换：</p><pre><code>div &#123;    display: inline;&#125;span &#123;    display: block;&#125;</code></pre><p>把行内元素转换为行内快元素：</p><pre><code>a &#123;    display: inline-block;&#125;</code></pre><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><p>1、层叠性</p><p>样式冲突，以最后样式为准。样式不冲突，不会重叠。</p><p>2、继承性</p><p>子标签会继承父标签的某些样式。一般继承文字的样式。</p><p>3、优先级</p><p>!important(无穷大) &gt; 行内样式(1,0,0,0) &gt; id选择器(0,1,0,0) &gt; 类选择器(伪类)(0,0,1,0) &gt; 标签选择器(0,0,0,1) &gt; *选择器和继承选择器(0,0,0,0)</p><blockquote><p>注意</p></blockquote><p>权重相同，就近原则；权重会叠加；</p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><hr><p>盒子模型的5个主要样式属性</p><pre><code>width：内容的宽度(不是盒子的宽度)height：内容的高度(不是盒子的高度)padding：内边距。border：边框。margin：外边距</code></pre><p>盒子的真实尺寸只会受到宽度、高度、边框、内边距四个属性的影响，不会受到外边距属性的影响。</p><hr><h3 id="盒子边框-border"><a href="#盒子边框-border" class="headerlink" title="盒子边框(border)"></a>盒子边框(border)</h3><hr><p><code>border-width、border-style、border-color</code></p><pre><code>border-width: 1px;border-color: red;/* none无边框、solid实线边框、dashed虚线边框、dotted点线边框 */border-style: dashed;</code></pre><p>连写，没有顺序</p><pre><code>border: 1px solid red;</code></pre><p>边框可以拆开</p><pre><code>border-top: 1px solid red;border-bottom: 1px solid green;</code></pre><p>去掉所有边框</p><pre><code>border: 0;</code></pre><p>表格细线边框</p><pre><code>table,td &#123;    border-collapse: collapse;&#125;</code></pre><hr><h3 id="内边框-padding"><a href="#内边框-padding" class="headerlink" title="内边框(padding)"></a>内边框(padding)</h3><hr><p>padding会撑开带width和height盒子。</p><pre><code>padding: 10px;padding-left: 10dp;padding: 10px 20px; /* 上下分别10和左右分别20 */padding: 10px 20px 30px; /* 上10,左右分别20,下30 */padding: 10px 20px 30px 40px; /* 顺时针，上右下左 */</code></pre><blockquote><p>注意：如果盒子没有给定宽高，padding不会影响盒子大小。</p></blockquote><hr><h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距(margin)"></a>外边距(margin)</h3><hr><p>清除元素内外边距</p><pre><code>* &#123;    margin: 0;    padding: 0;&#125;</code></pre><p>清除li中圆点</p><pre><code>li &#123;    list-style: none;&#125;</code></pre><p>让盒子水平居中,注意，必须给块级盒子设置宽度。</p><pre><code>margin: 0 auto;或者margin-left: auto;margin-right: auto;text-align: center;/* 内容水平居中 */</code></pre><p>相邻块元素垂直外边距合并问题</p><pre><code>/* 一个元素是 */margin-bottom: 100px;/* 另一个元素是 */margin-top: 50px;/*合并后的距离为100px，即以大的为准 */</code></pre><p>嵌套块元素垂直外边距合并问题</p><p>三种解决办法：</p><pre><code>border-top: 1px solid red;padding-top: 1px;overflow: hidden;</code></pre><hr><h2 id="圆角边框和盒子阴影"><a href="#圆角边框和盒子阴影" class="headerlink" title="圆角边框和盒子阴影"></a>圆角边框和盒子阴影</h2><p>圆角边框</p><pre><code>border-radius: 10px;/* 圆角 */border-radius: 50%;/* 正方形变成圆 */border-radius: 10px 20px 30px 40px;/* 左上开始顺时针 */border-radius: 10px 0;/* 左上右下和右上左下 */ </code></pre><p>阴影</p><pre><code>box-shadow: 0px 15px 30px 2px rgba(0,0,0,0.4);</code></pre><p>box-shadow:<code>水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色 内/外阴影</code>;</p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">h-shadow</td><td style="text-align:center">必需。水平阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">v-shadow</td><td style="text-align:center">必需。垂直阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">blur</td><td style="text-align:center">可选。模糊距离。</td></tr><tr><td style="text-align:center">spread</td><td style="text-align:center">可选。阴影的尺寸。</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">可选。阴影的颜色。请参阅CSS颜色值。</td></tr><tr><td style="text-align:center">inset</td><td style="text-align:center">可选。将外部阴影(outset)改为内部阴影。</td></tr></tbody></table><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>作用：使多个div在一行显示，<code>float</code>属性值有<code>left</code>、<code>right</code>、<code>none</code>。</p><p><code>li</code>使用<code>float</code>可以一行排列。</p><p>浮动的盒子，不会超过内边距。浮动脱离标准流，不占位置，会影响下面的标准流。浮动只有左右浮动。</p><blockquote><p>注意 ：浮动可以让元素默认转换为行内块元素。</p></blockquote><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>本质：解决父级元素因为子级浮动引起内部高度为0的问题。</p><p>父元素自动检测子级元素的高度，以最高为准。常用四种解决办法。</p><p>1、额外标签法</p><p>在最后一个浮动标签后面新添加一个标签，清除浮动。</p><pre><code>clear: both;</code></pre><p>2、父级添加overflow</p><p>给父级元素添加</p><pre><code>overflow: hidden;</code></pre><p>3、使用after伪元素清除浮动</p><p>给父级元素添加类名<code>clearfix</code></p><pre><code>.clearfix:after &#123;    content: &quot;&quot;;    display: block;    height: 0;    clear: both;    visibility: hidden;&#125;.clearfix &#123;    *zoom: 1; /* IE6、7 */&#125;</code></pre><p>4、使用before和after双伪元素清除浮动</p><p>给父级元素添加类名<code>clearfix</code></p><pre><code>.clearfix:before,.clearfix:after &#123;    content: &quot;&quot;;    display: table;&#125;.clearfix:after &#123;    clear: both;&#125;.clearfix &#123;    *zoom: 1; /* IE6、7 */&#125;</code></pre><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>定位属性主要包括定位模式和边偏移两部分。</p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">static</td><td style="text-align:center">自动定位 (默认定位方式)</td></tr><tr><td style="text-align:center">relative</td><td style="text-align:center">相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td style="text-align:center">absolute</td><td style="text-align:center">绝对定位，相对于其上一个已经定位的父元索进行定位</td></tr><tr><td style="text-align:center">fixed</td><td style="text-align:center">固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><p>1、相对定位</p><pre><code>position: relative;top: 100px;left: 100px;</code></pre><blockquote><p>注意：相对定位可以通过边偏移移动位置，但是原来的所占的位置，继续占有。以自己的左上角为基准点定位。</p></blockquote><p>2、绝对定位</p><pre><code>position: absolute;top: 100px;left: 100px;</code></pre><blockquote><p>注意：绝对定位不占位置。若所有父元素都没有定位，以浏览器当前屏幕为基准点定位。</p></blockquote><blockquote><p>绝对定位依据最近的已经定位的父元素进行定位。</p></blockquote><blockquote><p>子绝父相。正常情况，子级是绝对定位的话，父级要用相对定位。</p></blockquote><p>定位的盒子居中</p><pre><code>position: absolute;left: 50%;margin-left: -(宽度/2);top: 50%;margin-top:  -(高度/2);</code></pre><p>3、固定定位</p><pre><code>position: fixed;left: 0;top: 0;</code></pre><blockquote><p>注意：不管父元素有没有定位，都是以浏览器当前屏幕为基准点定位，和父元素没有关系。</p></blockquote><p>模式转换：</p><blockquote><p>绝对定位和固定定位，元素模式发生转换，都转换为行内快模式。</p></blockquote><p>叠放次序(z-index)</p><pre><code>z-index: 1;</code></pre><table><thead><tr><th style="text-align:center">定位模式</th><th style="text-align:center">是否脱标占有位置</th><th style="text-align:center">是否可以使用边偏移</th><th style="text-align:center">移动位置基准值</th></tr></thead><tbody><tr><td style="text-align:center">静态static</td><td style="text-align:center">不脱标，正常模式</td><td style="text-align:center">不可以</td><td style="text-align:center">正常模式</td></tr><tr><td style="text-align:center">相对定位relative</td><td style="text-align:center">脱标，占有位置</td><td style="text-align:center">可以</td><td style="text-align:center">相对自身位置移动(自恋型)</td></tr><tr><td style="text-align:center">绝对定位absolute</td><td style="text-align:center">完全脱标，不占有位置</td><td style="text-align:center">可以</td><td style="text-align:center">相对于定位父级移动位置(拼爹型)</td></tr><tr><td style="text-align:center">固定定位fixed</td><td style="text-align:center">完全脱标，不占有位置</td><td style="text-align:center">可以</td><td style="text-align:center">相对于浏览器移动位置(认死理型)</td></tr></tbody></table><p>z-index默认为0，取值越大，越居上，如果取值相同，后来者居上。</p><p>只有定位的盒子才有z-index。</p><p>没有单位。</p><h2 id="鼠标样式、轮廓线、防止拖拽文本域"><a href="#鼠标样式、轮廓线、防止拖拽文本域" class="headerlink" title="鼠标样式、轮廓线、防止拖拽文本域"></a>鼠标样式、轮廓线、防止拖拽文本域</h2><p>鼠标样式</p><pre><code>cursor: default;/*default: 默认、 pointer： 小手、 text： 选择、move： 移动*/</code></pre><p>轮廓线</p><pre><code>input &#123;    outline: none;/* 取消轮廓线 */    border: 1px solid red;&#125;</code></pre><p>防止拖拽文本域</p><pre><code>textarea &#123;    resize: none;/* 不要重新规定尺寸 */    outline: none;/* 取消轮廓线 */&#125;</code></pre><h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><p>针对行内元素和行内块元素。控制图片和文字位置</p><pre><code>img &#123;    vertical-align: middle;/* top、bottom */&#125;</code></pre><hr><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><hr><pre><code>display: none;/* 隐藏 */display: block;/* 显示 */</code></pre><p>display隐藏后不保留位置。</p><pre><code>visibility: visible;/* 显示 */visibility: hidden;/* 隐藏 */</code></pre><p>visibility隐藏后保留位置。</p><pre><code>overflow: hidden;</code></pre><p>overflow四个属性<code>auto; scroll; hidden; visible;</code></p><hr><h2 id="溢出文字隐藏"><a href="#溢出文字隐藏" class="headerlink" title="溢出文字隐藏"></a>溢出文字隐藏</h2><hr><p>当子元素(标签)的尺寸超过父元素(标签)的尺寸时，此时需要设置父元素显示溢出的子元素的方式，设置的方法是通过overflow属性来完成。</p><p>overflow的设置项：visible 默认值, 显示子标签溢出部分。hidden 隐藏子标签溢出部分。auto 如果子标签溢出，则可以滚动查看其余的内容。</p><pre><code>white-space: nowrap;/* 强制在同一行内显示所有文本，直到文本结束或者br */overflow: hidden;/* 超出部分隐藏 */text-overflow: ellipsis;/* 超出部分显示省略号 */</code></pre><blockquote><p>注意：做省略号效果，上面三句都需要。</p></blockquote><hr><h2 id="Sprites"><a href="#Sprites" class="headerlink" title="Sprites"></a>Sprites</h2><p>为了有效地减少服务器接收和发送请求次数，提高页面加载速度。</p><p>CSS精灵是一种处理网页背景图像的方式。</p><h2 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h2><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>icomoon字库</p><pre><code>https://icomoon.io/</code></pre><p>阿里icon font字库</p><pre><code>http://www.iconfont.cn/</code></pre><h2 id="sublime快捷键"><a href="#sublime快捷键" class="headerlink" title="sublime快捷键"></a>sublime快捷键</h2><p>sublime可以快速提高我们代码的书写方式</p><pre><code>1.生成标签直接输入标签名按tab键即可 比如div 然后tab键，就可以生成&lt;div&gt;&lt;/div&gt;2.如果想要生成多个相同标签加上*就可以了比如div*3 就可以快速生成3个div3.如果有父子级关系的标签，可以用&gt;比如ul&gt; li就可以了4.如果有兄弟关系的标签，用+就可以了比如div+p5.如果生成带有类名或者id名字的，直接写 .demo 或者#two tab 键就可以了</code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML标签</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基本语法和DOM和BOM</title>
    <link href="/2018/11/25/1.JavaScript%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8CDOM%E5%92%8CBOM/"/>
    <url>/2018/11/25/1.JavaScript%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8CDOM%E5%92%8CBOM/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><hr><p>js分为三个部分：ECMAScript标准（js的基本语法）、DOM（文档对象模型）、BOM（浏览器对象模型）。</p><p>js是一种脚本语言，解释型语言。</p><hr><h2 id="JavaScript三种写法"><a href="#JavaScript三种写法" class="headerlink" title="JavaScript三种写法"></a>JavaScript三种写法</h2><hr><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        alert(&quot;我是第一种写法&quot;);    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;input type=&quot;button&quot; value=&quot;按钮&quot; onclick=&quot;alert(&apos;我是第二种写法&apos;)&quot;/&gt;    &lt;script language=&quot;JavaScript&quot; src=&quot;test.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>test.js</p><pre><code>alert(&quot;我是第三种写法&quot;);</code></pre><hr><h2 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h2><hr><p>js中声明变量都用var，js中字符串可以使用单引号，也可以使用双引号。</p><p>原始数据类型：</p><pre><code>number、string、boolean、null、undefined、object</code></pre><p>获取变量的数据类型(注意，null获取的类型为object)</p><pre><code>typeof 变量名;//或者typeof (变量名);</code></pre><p>判断是不是数字（不是数字返回true）</p><pre><code>isNaN(变量名);</code></pre><p>判断字符串长度</p><pre><code>字符串变量名.length</code></pre><p>其他类型转为数字，Number最严格</p><pre><code>parseInt(&quot;10&quot;);parseFloat(&quot;10.02&quot;);Number(&quot;10&quot;);</code></pre><p>其他类型转为字符串</p><pre><code>变量名.toString();//变量名一定要有意义String(变量名);</code></pre><p>其他类型转为布尔()</p><pre><code>Boolean(变量);</code></pre><blockquote><p>注意:<code>==</code>和<code>===</code>区别，<code>==</code>只进行值的比较，<code>===</code>对比值和类型。</p></blockquote><blockquote><p>注意:运算符先后顺序，先<code>&amp;&amp;</code>，后<code>||</code>。</p></blockquote><hr><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><hr><pre><code>if(条件)&#123;&#125; else if(条件)&#123;&#125; else &#123;&#125;</code></pre><hr><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><hr><pre><code>var 变量 = 表达式1 ? 表达式2 : 表达式3;</code></pre><hr><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><hr><pre><code>switch (表达式)&#123;    case 值1:        代码1;        break;    case 值2:        代码2;        break;    ...    default:        代码3;        break;&#125;</code></pre><hr><h2 id="while循环-有可能一次都不执行"><a href="#while循环-有可能一次都不执行" class="headerlink" title="while循环(有可能一次都不执行)"></a>while循环(有可能一次都不执行)</h2><hr><pre><code>while(循环的条件)&#123;    循环体;    计数器++;&#125;</code></pre><hr><h2 id="do…while-至少执行一次"><a href="#do…while-至少执行一次" class="headerlink" title="do…while(至少执行一次)"></a>do…while(至少执行一次)</h2><hr><pre><code>do&#123;    //循环体&#125;while(条件);</code></pre><hr><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><hr><p>先执行表达式1，然后判断表达式2，如果不成立直接跳出循环。如果成立，执行循环体代码，结束后，跳到表达式3，然后判断表达式2。</p><pre><code>for (表达式1; 表达式2; 表达式3) &#123;    循环体;&#125;for(var i = 0; i &lt; 10; i++)&#123;&#125;</code></pre><hr><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><hr><pre><code>alert();console.log();document.write(&quot;&quot;);</code></pre><p>代码调试</p><p><img src="/2018/11/25/1.JavaScript%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8CDOM%E5%92%8CBOM/1.JavaScript基本语法和DOM和BOM/1.png" alt></p><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><hr><pre><code>var arr1 = new Array();//空数组var arr2 = new Array(5);//长度为5，每个值是undefinedvar arr3 = [];//空数组var arr4 = new Array(10,20,40,55,35);//5个值var arr5 = [10,30,50,20,40];//5个值</code></pre><p>设置某个位置的值</p><pre><code>数组名[下标] = 值;</code></pre><p>获取某个位置的值</p><pre><code>var result = 数组名[下标];</code></pre><p>获取数组长度</p><pre><code>数组名.length</code></pre><p>数组中存储的数据类型可以不一样。</p><p>从数组最后添加和删除数据：</p><pre><code>var aList = [1,2,3,4];aList.push(5);alert(aList); //弹出1,2,3,4,5aList.pop();alert(aList); // 弹出1,2,3,4</code></pre><p>根据下标添加和删除元素</p><pre><code>arr.splice(start,num,element1,.....,elementN)</code></pre><p>参数解析：start：必需，开始删除的索引。num：可选，删除数组元素的个数。elementN：可选，在start索引位置要插入的新元素。</p><p>此方法会删除从start索引开始的num个元素，并将elementN参数插入到start索引位置。</p><pre><code>var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];colors.splice(0,1);  //删除第一项alert(colors);  //green,bluecolors.splice(1, 0, &quot;yellow&quot;, &quot;orange&quot;);  //从第一个索引位置插入两项数据alert(colors);  //green,yellow,organge,bluecolors.splice(1, 1, &quot;red&quot;, &quot;purple&quot;);  //删除一项，插入两项数据alert(colors);  //green,red,purple,orange,blue</code></pre><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><p>函数的定义</p><pre><code>function 函数名()&#123;    函数体&#125;</code></pre><p>函数的调用</p><pre><code>函数名();</code></pre><p>函数的参数</p><pre><code>function 函数名(参数名)&#123;    函数体&#125;</code></pre><blockquote><p>注意:参数不需要定义var。形参指函数定义时小括号中的变量。实参指函数在调用时候小括号中传入的值。形参和实参个数可以不一致。</p></blockquote><p>函数的返回值</p><pre><code>function getSum(x,y)&#123;    return x + y;&#125;var result = getSum(10,30);</code></pre><p>函数的数据类型是function</p><hr><h2 id="arguments对象伪数组"><a href="#arguments对象伪数组" class="headerlink" title="arguments对象伪数组"></a>arguments对象伪数组</h2><p>arguments可以获取传入的每个参数的值</p><pre><code>function f1()&#123;    arguments.length;    console.log(arguments)&#125;f1(10,20,30,50);</code></pre><h2 id="匿名函数（函数表达式）"><a href="#匿名函数（函数表达式）" class="headerlink" title="匿名函数（函数表达式）"></a>匿名函数（函数表达式）</h2><pre><code>var f1 = function ()&#123;    console.log(&quot;dsds&quot;);&#125;//匿名函数不能直接调用f1();</code></pre><h2 id="函数的自调用（一次性）"><a href="#函数的自调用（一次性）" class="headerlink" title="函数的自调用（一次性）"></a>函数的自调用（一次性）</h2><pre><code>(function ()&#123;    console.log(&quot;ddddds&quot;);&#125;)();</code></pre><h2 id="函数作为参数（回调函数）"><a href="#函数作为参数（回调函数）" class="headerlink" title="函数作为参数（回调函数）"></a>函数作为参数（回调函数）</h2><p>注意f2不要加括号</p><pre><code>function f1(fn)&#123;   fn();&#125;function f2()&#123;    console.log(&quot;原来这样&quot;);&#125;f1(f2);</code></pre><h2 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h2><p>注意<code>ff();</code></p><pre><code>function f1()&#123;    console.log(&quot;原来&quot;);   return function ()&#123;       console.log(&quot;原来这样&quot;);   &#125;;&#125;var ff = f1();ff();</code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>全局变量：用var声明的。可以在页面的任何位置使用。页面不关闭，全局变量不会释放，会占空间，消耗内存。</p><p>局部变量：函数function中定义的变量。外面不能使用。</p><p>块级作用域：一对大括号中声明的变量。在js中，括号外面也能使用块级作用域中的变量。函数除外。</p><p>全局作用域：全局变量的适用范围。</p><p>局部作用域：局部变量的适用范围。</p><p>隐式全局变量：声明变量没有用var。函数中声明的局部变量，函数外面不可以访问。函数中声明的隐式全局变量，函数外面可以访问。</p><p>全局变量不能被删除，隐式全局变量可以被删除。使用var是不会被删除，没有var是可以删除。</p><pre><code>var num1 = 10;num2 = 20;delete num1;delete num2;console.log(typeof num1);//numberconsole.log(num1 + 10);//20console.log(typeof num2);//underfine</code></pre><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>变量的声明和函数的声明被提前了。</p><p>把变量的声明提前了。局部作用域中局部变量声明也会提前，只提前在局部作用域中。</p><pre><code>console.log(num);//underfinevar num = 10;</code></pre><p>函数的声明提前了。</p><pre><code>f1();function f1()&#123;    console.log(&quot;dd&quot;);//dd&#125;</code></pre><blockquote><p>注意：</p></blockquote><p>结果为<code>underfine</code></p><pre><code>f1();var num = 20;function f1()&#123;    console.log(num);//underfine&#125;</code></pre><p>结果为20</p><pre><code>var num = 20;function f1()&#123;    console.log(num);//20&#125;f1();</code></pre><p>结果为<code>underfine</code></p><pre><code>var num = 20;function f1()&#123;    console.log(num);//underfine    var num = 30;&#125;f1();</code></pre><p>结果为一个报错，其余为9，因为b和c为隐式全局变量，a是局部变量。</p><pre><code>f1();console.log(c);console.log(b);console.log(a);//报错function f1()&#123;    var a = b = c = 9;    console.log(c);    console.log(b);    console.log(a);</code></pre><p>结果为<code>f1();</code>报错，预解析f1是变量，调用<code>f1();</code>报错。</p><pre><code>f1();var f1 = function ()&#123;    console.log(a);    var a = 9;&#125;</code></pre><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>1、调用系统的构造函数创建对象</p><pre><code>var people = new Object();//添加属性people.name = &quot;小李&quot;;people.age = 18;//添加方法people.eat = function()&#123;    console.log(&quot;吃&quot;);&#125;;//调用people.eat();</code></pre><p>获取变量或者对象属于什么类型</p><pre><code>instanceof</code></pre><p>工厂模式创建对象</p><pre><code>function createObject(name,age)&#123;    var obj = new Object();    obj.name = name;    obj.age = age;    obj.say = function ()&#123;      console.log(&quot;我叫&quot;+this.name+&quot;，今年&quot;+this.age);    &#125;;    return obj;&#125;var person1 = createObject(&quot;小李&quot;,20);person1.say();</code></pre><p>2、自定义构造函数创建对象</p><p>函数和构造函数区别，首字母是不是大写</p><pre><code>function Person(name,age)&#123;    this.name = name;    this.age = age;    this.say = function ()&#123;        console.log(&quot;我叫&quot;+this.name+&quot;，今年&quot;+this.age);    &#125;;&#125;var obj = new Person(&quot;小明&quot;,20);console.log(obj.age);obj.say();</code></pre><p>3、字面量的方式创建对象</p><pre><code>var obj = &#123;    name : &quot;jsop&quot;,    say : function ()&#123;        console.log(&quot;I am &quot; + this.name);    &#125;&#125;;obj.say();</code></pre><h2 id="JSON格式的数据遍历"><a href="#JSON格式的数据遍历" class="headerlink" title="JSON格式的数据遍历"></a>JSON格式的数据遍历</h2><p>访问属性的另一种写法：<code>[&quot;&quot;]</code></p><pre><code>var obj = &#123;    name : &quot;jsop&quot;,    say : function ()&#123;        console.log(&quot;I am &quot; + this.name);    &#125;&#125;;obj.say();</code></pre><p>遍历</p><pre><code>var json = &#123;    &quot;name&quot; : &quot;jsop&quot;,    &quot;age&quot; : 18&#125;;for(var key in json)&#123;    console.log(key);    console.log(json[key]);&#125;</code></pre><h2 id="内置对象-系统提供的"><a href="#内置对象-系统提供的" class="headerlink" title="内置对象(系统提供的)"></a>内置对象(系统提供的)</h2><pre><code>https://developer.mozilla.org/zh-CN/</code></pre><p>Math</p><pre><code>Math.random()//[0,1)范围</code></pre><p>Date</p><pre><code>var dt = new Date();//当前时间console.log(dt.valueOf());//毫秒值</code></pre><p>String</p><pre><code>.replace(&quot;原来的字符串&quot;,&quot;新的字符串&quot;);.slice(开始索引，结束索引)；//截取.split();//切割</code></pre><p>Array</p><pre><code>.push(值);//给数组追加值，在最后添加，返回值是数组长度.unshift();//给数组追加值，在最前添加，返回值是数组长度.pop();//删除数组最后的值，返回删除的值.shift();//删除数组第一个的值，返回删除的值</code></pre><hr><h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM-文档对象模型"></a>DOM-文档对象模型</h2><p>文档：document</p><p>元素element：页面中的每个标签，都是一个元素，每个元素都可以看成是一个对象。</p><p>节点node：页面中所有的内容都是节点，包括标签，属性，文本。</p><p>根元素：html标签。</p><hr><h2 id="获取元素对象"><a href="#获取元素对象" class="headerlink" title="获取元素对象"></a>获取元素对象</h2><hr><p><code>document.getElementById(&quot;id&quot;)</code></p><pre><code>&lt;body&gt;    &lt;input type=&quot;button&quot; value=&quot;显示&quot; id=&quot;btn&quot;&gt;&lt;script &gt;    document.getElementById(&quot;btn&quot;).onclick = function ()&#123;        alert(&quot;哈哈&quot;);    &#125;;&lt;/script&gt;&lt;/body&gt;</code></pre><p><code>document.getElementsByTagName(&quot;标签名&quot;)</code></p><p>返回一个伪数组</p><pre><code>var pObjs = document.getElementsByTagName(&quot;p&quot;)for (var i = 0; i &lt; pObjs.length;i++)&#123;    pObjs[i].innerText = &quot;哈哈哈&quot;;&#125;</code></pre><p>和<code>document.getElementsByTagName</code>类似的有：<code>document.getElementsByName</code>获取的是<code>name</code>伪数组，<code>document.getElementsByClassName</code>获取的是<code>class</code>伪数组</p><p><code>document.getElementsByTagName</code>–排他功能</p><pre><code>&lt;input type=&quot;button&quot; value=&quot;显示&quot; &gt;&lt;input type=&quot;button&quot; value=&quot;显示&quot; &gt;&lt;input type=&quot;button&quot; value=&quot;显示&quot; &gt;&lt;input type=&quot;button&quot; value=&quot;显示&quot; &gt;&lt;input type=&quot;button&quot; value=&quot;显示&quot; &gt;&lt;input type=&quot;button&quot; value=&quot;显示&quot; &gt;&lt;script &gt;    var objs = document.getElementsByTagName(&quot;input&quot;)    for (var i = 0; i &lt; objs.length;i++)&#123;        objs[i].onclick = function () &#123;            for (var j = 0; j &lt; objs.length;j++)&#123;                objs[j].value = &quot;显示&quot;;            &#125;            this.value= &quot;点击&quot;;        &#125;;    &#125;&lt;/script&gt;</code></pre><p>根据选择器的方式获取元素</p><pre><code>&lt;input type=&quot;button&quot; value=&quot;show&quot; id=&quot;btn&quot; class=&quot;cls&quot;/&gt;&lt;script &gt;    document.querySelector(&quot;#btn&quot;).onclick = function()&#123;      alert(&quot;哈哈&quot;);    &#125;;    var objs = document.querySelectorAll(&quot;cls&quot;);//伪数组&lt;/script&gt;</code></pre><p>小结</p><pre><code>根据id属性的值获取元素，返回来的是一个元素对象document.getELementById(&quot;id属性的值&quot;);根据标签名字获取元素，返回来的是一个伪数组，里面保存了多个的DOM对象document.getELementsByTagName(&quot;标签名字&quot;);下面的几个，有的浏览器不支持根据name属性的值获取元素，返回来的是一个伪数组，里面保存了多个的DOM对象document.getELementsByName (&quot;name属性的值&quot;)根据类样式的名字来获取元素，返回来的是一个伪数组，里面保存了多个的DOM对象document.getELementsByClassName(&quot;类样式的名字&quot;)根据选择器获取元素，返回来的是一个元素对象document.querySelector( &quot;选择器的名字&quot;);</code></pre><hr><h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><p><code>class</code>设置使用<code>className</code></p><pre><code>document.getElementById(&quot;dd&quot;).className = &quot;cls&quot;;</code></pre><p>获取<code>body</code>、<code>title</code>、<code>html</code></p><pre><code>document.body document.titledocument.documentElement</code></pre><p>阻止超链接跳转</p><pre><code>&lt;a href=&quot;http://www.baidu.com&quot; id=&quot;ak&quot;&gt;百度&lt;/a&gt;&lt;script &gt;    document.getElementById(&quot;ak&quot;).onclick = function ()&#123;        alert(&quot;哈啊哈&quot;);        return false;    &#125;;&lt;/script&gt;</code></pre><p>鼠标进入和离开</p><pre><code>.onmouseover.onmouseout</code></pre><p>文本框获取焦点和失去焦点</p><pre><code>.onfocus.onblur</code></pre><p>键盘弹起</p><pre><code>.onkeyup</code></pre><p>获取输入框输入长度<code>value.length</code></p><pre><code>&lt;input type=&quot;text&quot; value=&quot;&quot; id=&quot;txt&quot;/&gt;&lt;script &gt;    document.getElementById(&quot;txt&quot;).onblur = function()&#123;      alert(this.value.length);    &#125;;&lt;/script&gt;</code></pre><h2 id="innerText和textContent、innerHTML"><a href="#innerText和textContent、innerHTML" class="headerlink" title="innerText和textContent、innerHTML"></a>innerText和textContent、innerHTML</h2><p>凡是成对的标签，设置文本内容，都使用<code>innerText</code>属性,同样，获取文本内容是<code>.innerText</code>。</p><pre><code>document.getElementById(&quot;p1&quot;).innerText=&quot;这是设置文本p&quot;;</code></pre><p>单数不兼容。innerText：谷歌，火狐支持，IE8不支持；textContent：谷歌，火狐，IE8都支持。</p><p>封装</p><pre><code>//设置function setInnerText(element,text)&#123;    if(typeof element.textContent == &quot;underfined&quot;)&#123;//不支持        element.innerText = text;    &#125; else&#123;//支持        lement.textContent = text;    &#125;&#125;//获取function getInnerText(element)&#123;    if(typeof element.textContent == &quot;underfined&quot;) &#123;//不支持        return element.innerText;    &#125; else&#123;//支持        return element.textContent;    &#125;&#125;</code></pre><p>innerText和innerHTML都可以设置设置文本，innerHTML还可以设置标签。</p><p>innerText可以获取标签中的文本，但是标签中还有标签，那么最里面的标签文本内容也能获取。innerHTML可以获取标签中的所有文本，包括标签。</p><pre><code>.innerHTML = &quot;haha&quot;;.innerHTML = &quot;&lt;p&gt;这是p&lt;/p&gt;&gt;&quot;;</code></pre><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>自定义属性获取：getAttribute。自定义属性动态设置：setAttribute</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;    &lt;style&gt;        ul&#123;            list-style: none;            cursor: pointer;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li&gt;张三&lt;/li&gt;        &lt;li&gt;李四&lt;/li&gt;        &lt;li&gt;王五&lt;/li&gt;        &lt;li&gt;赵六&lt;/li&gt;    &lt;/ul&gt;    &lt;script &gt;        var list = document.getElementsByTagName(&quot;li&quot;);        for(var i = 0; i &lt; list.length; i ++)&#123;            list[i].setAttribute(&quot;score&quot;,(i+1)*10);            list[i].onclick = function()&#123;              alert(this.getAttribute(&quot;score&quot;));            &#125;;        &#125;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>移除自定义属性</p><pre><code>.removeAttribute(&quot;name&quot;)</code></pre><p>移除class</p><pre><code>.removeAttribute(&quot;class&quot;);</code></pre><p>设置<code>backgroundImage</code></p><pre><code>.style.backgroundImage = &quot;url(&quot; + src + &quot;)&quot;;</code></pre><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>节点的类型</p><pre><code>nodeType:1、标签，2、属性，3、文本。</code></pre><p>节点的名字</p><pre><code>nodeName:标签节点：大写的标签名字；属性节点：小写的属性名字；文本节点：#text</code></pre><p>节点的值</p><pre><code>nodeValue:标签节点：null;属性节点：属性值；文本节点：文本内容。</code></pre><p>获取父节点和父元素</p><pre><code>.parentNode.parentElement</code></pre><p>子节点和子元素</p><pre><code>.childNodes.children</code></pre><p>第一个子节点和子元素</p><pre><code>.firstChild//IE8是元素.firstElementChild//IE8不支持</code></pre><p>最后一个子节点和子元素</p><pre><code>.lastChild//IE8是元素.lastElementChild//IE8不支持</code></pre><p>某元素的前一个兄弟节点和元素</p><pre><code>.previousSibling//IE8是元素.previousElementSlbling//IE8不支持</code></pre><p>某元素的后一个兄弟节点和元素</p><pre><code>.nextSibling//IE8是元素.nextElementSlbling//IE8不支持</code></pre><p>获取节点</p><pre><code>.getAttributeNode(&quot;属性名&quot;);</code></pre><h2 id="元素的创建"><a href="#元素的创建" class="headerlink" title="元素的创建"></a>元素的创建</h2><p>三种方式</p><p>1、<code>document.write(&quot;标签的代码及内容&quot;)</code></p><p>缺陷：如果是在页面加载完毕后，通过这种方式创建的，页面上存在的所有的内容全部被干掉。</p><p>2、<code>对象.innerHTML = &quot;标签及代码&quot;</code></p><p>3、<code>document.createElement(&quot;标签的名字&quot;)</code></p><p>注意：要追加到父级元素，appendChild</p><pre><code>&lt;input type=&quot;button&quot; value=&quot;追加&quot; id=&quot;btn&quot;/&gt;&lt;div id=&quot;dv&quot;&gt;&lt;/div&gt;&lt;script &gt;    document.getElementById(&quot;btn&quot;).onclick = function ()&#123;        var pObj = document.createElement(&quot;P&quot;);        pObj.innerText = &quot;这是p&quot;;        document.getElementById(&quot;dv&quot;).appendChild(pObj);    &#125;;&lt;/script&gt;</code></pre><p>把新的子元素插到第一个子元素前面</p><pre><code>.insertBefore(新元素，旧元素);</code></pre><p>移除父级元素中的第一个元素</p><pre><code>.removeChild(父元素对象.firstElementChild);</code></pre><p>移除父级元素中的所有元素</p><pre><code>while(父元素对象.firstElementChild)&#123;    .removeChild(父元素对象.firstElementChild);&#125;</code></pre><p><code>createElement</code>只创建一个元素</p><pre><code>&lt;input type=&quot;button&quot; value=&quot;追加&quot; id=&quot;btn&quot;/&gt;&lt;div id=&quot;dv&quot;&gt;&lt;/div&gt;&lt;script &gt;    document.getElementById(&quot;btn&quot;).onclick = function ()&#123;        if(!document.getElementById(&quot;dv&quot;).firstElementChild)&#123;            var pObj = document.createElement(&quot;P&quot;);            pObj.innerText = &quot;这是p&quot;;            document.getElementById(&quot;dv&quot;).appendChild(pObj);        &#125;    &#125;;&lt;/script&gt;</code></pre><h2 id="元素绑定多个事件-addEventListener和-attachEvent"><a href="#元素绑定多个事件-addEventListener和-attachEvent" class="headerlink" title="元素绑定多个事件.addEventListener和.attachEvent"></a>元素绑定多个事件<code>.addEventListener</code>和<code>.attachEvent</code></h2><pre><code>&lt;input type=&quot;button&quot; value=&quot;多个事件&quot; id=&quot;btn&quot;/&gt;&lt;script &gt;    document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;,function()&#123;        console.log(&quot;哈哈&quot;);    &#125;,false);    document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;,function()&#123;        console.log(&quot;嘻嘻&quot;);    &#125;,false);&lt;/script&gt;</code></pre><p>兼容性<code>.addEventListener</code>支持谷歌火狐，<code>.attachEvent</code>支持IE</p><pre><code>function commonAddEventListener(element,type,fn)&#123;    if(element.addEventListener())&#123;        element.addEventListener(type,fn,false);    &#125; else if (element.attachEvent())&#123;        element.attachEvent(&quot;on&quot; + type,fn);    &#125; else&#123;        element[&quot;on&quot; + type] = fn;    &#125;&#125;</code></pre><p><code>addEventListener</code>和<code>attachEvent</code>都可以为元素绑定事件。它们的不同点有：参数个数不一样；<code>addEventListener</code>中事件类型没有<code>on</code>,<code>attachEvent</code>中事件类型有<code>on</code>;<code>addEventListener</code>中<code>this</code>指当前绑定的事件，<code>attachEvent</code>中<code>this</code>指<code>window</code>。</p><h2 id="元素解绑事件"><a href="#元素解绑事件" class="headerlink" title="元素解绑事件"></a>元素解绑事件</h2><p>解绑<code>onclick</code>、<code>addEventListener</code>、<code>attachEvent</code></p><pre><code>.onclick = null;.removeEventListener(&quot;click&quot;,&quot;解绑函数名&quot;,false);.detachEvent(&quot;onclick&quot;,&quot;解绑函数名&quot;);</code></pre><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>指多个元素嵌套，有层次关系，这些元素都注册了相同事件，如果里面的元素事件触发了，那么外面的元素的该事件自动的触发了。</p><p>阻止事件冒泡</p><pre><code>window.event.cancelBubble = true;//谷歌和IE支持，火狐不支持window.event.stopPropagation();//谷歌和火狐支持，IE不支持</code></pre><h2 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h2><p><code>addEventListener</code>第三个参数控制事件阶段的。</p><p>1、事件的捕获阶段，从外向内。</p><p>2、事件的目标阶段，</p><pre><code>.eventPhase</code></pre><p>3、事件的冒泡阶段，从内向外。</p><p>为同一个元素绑定多个不同事件，指定的是同一个事件处理函数</p><pre><code>.onclick = f;.onmouseover = f;.onmouseout = f;function f (e)&#123;    switch (e.type)&#123;        case &quot;click&quot;:            break;        case &quot;mouseover&quot;:            break;        case &quot;mouseout&quot;:            break;    &#125;&#125;</code></pre><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>浏览器对象模型。</p><p>window:浏览器的顶级对象；</p><p>document:页面中的顶级对象。</p><p>页面中的所用内容都是属于浏览器的，页面中的内容也都是window的。</p><pre><code>alert()prompt()confirm()</code></pre><h2 id="onload"><a href="#onload" class="headerlink" title="onload"></a>onload</h2><p><code>onload</code>使用</p><pre><code>window.onload = function()&#123;    document.getElementById(&quot;btn&quot;).onclick = function ()&#123;    &#125;;&#125;;</code></pre><p><code>onunload</code>页面关闭后触发的事件；<code>onbeforeunload</code>页面关闭前触发的事件(IE8支持)。</p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>属性</p><pre><code>window.location.hash//#及后面内容window.location.host//主机名及端口号window.location.hostname//主机名window.location.pathname//路径window.location.port//端口号window.location.protocol//协议，httpwindow.location.search//？及后面内容</code></pre><p>方法</p><pre><code>window.location.href = &quot;设置跳转页面地址&quot;;//可后退window.location.assign(&quot;设置跳转页面地址&quot;);//可后退window.location.reload();//刷新，重新加载window.location.replace(&quot;设置跳转页面地址&quot;);//不可后退</code></pre><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><pre><code>window.history.back();window.history.forward();window.history.go();//整数和负数代表前进和后退</code></pre><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><pre><code>window.navigator.platform//判断浏览器所在的系统平台类型window.navigator.userAgent</code></pre><hr><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><hr><p>js 定时器有两种创建方式：setTimeout和setInterval。</p><pre><code>//以指定的时间间隔（以毫秒计）调用一次函数的定时器setTimeout(func[, delay, param1, param2, ...])//以指定的时间间隔（以毫秒计）重复调用一个函数的定时器setInterval(func[, delay, param1, param2, ...])</code></pre><p>setTimeout函数的参数说明:func, 表示定时器要执行的函数名；delay, 表示时间间隔，默认是0，单位是毫秒；param1, 表示定时器执行函数的第一个参数，一次类推传入多个执行函数对应的参数。</p><p>setInterval函数的参数说明:func , 表示定时器要执行的函数名;delay, 表示时间间隔，默认是0，单位是毫秒;param1, 表示定时器执行函数的第一个参数，一次类推传入多个执行函数对应的参数。</p><p>反复执行</p><pre><code>var timeId = window.setInterval(function()&#123;&#125;,1000);//设置定时window.clearInterval(timeId);//停止定时</code></pre><p>一次性定时器</p><pre><code>var timeId = window.setTimeout(function()&#123;&#125;,1000);clearTimeout(timeId);//清除定时缓存空间</code></pre><hr><h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><p>获取元素的宽和高（包含边框）</p><pre><code>.offsetWidth;//数字类型，没有px.offsetHeight;</code></pre><p>获取元素的left和top，</p><pre><code>.offsetLeft;.offsetTop;</code></pre><p>注意：</p><p>没有脱离文档流时，和父级元素的margin、padding、border，自己的margin，有关系。脱离文档流时，和自己的margin、left，有关系。</p><h2 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h2><p>元素中内容实际的宽和高，不包含边框，没有内容，就是宽高</p><pre><code>.scrollWidth;.scrollHeight;</code></pre><p>向左或者向上卷曲出去的距离</p><pre><code>.scrollLeft;.scrollTop;</code></pre><p>滚动事件</p><pre><code>.onscroll</code></pre><p>滚动距离计算</p><pre><code>var top = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;var left = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;</code></pre><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p>可视区域（没有边框）边框内的宽高</p><pre><code>.clientWidth;.clientHeight;</code></pre><p>左边框和上边框的宽度</p><pre><code>.clientLeft;.clientTop;</code></pre><h2 id="获取元素的样式属性值"><a href="#获取元素的样式属性值" class="headerlink" title="获取元素的样式属性值"></a>获取元素的样式属性值</h2><pre><code>window.getComputedStyle(元素对象,null).属性;//谷歌，火狐元素对象.currentStyle.属性;//IE8</code></pre><p>兼容代码</p><pre><code>function getStyle(element,attr)&#123;   if(window.getComputedStyle)&#123;       return window.getComputedStyle(element,attr)[attr];//谷歌，火狐   &#125; else&#123;       return element.currentStyle[attr];   &#125;&#125;</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>透明度</p><pre><code>.style.opacity = </code></pre><hr><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>jQuery是对JavaScript的封装，它是免费、开源的JavaScript函数库，jQuery极大地简化了JavaScript编程。</p><p>jQuery的作用和JavaScript一样，都是负责网页和用户的交互效果。jQuery的优点就是兼容主流浏览器，代码编写更加简单。</p><hr><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><hr><p>引入</p><pre><code>&lt;script src=&quot;js/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>使用js获取标签元素，需要页面加载完成以后再获取，我们通过给onload事件属性设置了一个函数来获取标签元素，而jquery提供了ready函数来解决这个问题，保证获取标签元素没有问题，它的速度比原生的 <code>window.onload</code> 更快。</p><p>入口函数示例代码:</p><pre><code>&lt;script src=&quot;js/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    window.onload = function()&#123;        var oDiv = document.getElementById(&apos;div01&apos;);        alert(&apos;原生就是获取的div：&apos; + oDiv);    &#125;;    $(document).ready(function()&#123;        var $div = $(&apos;#div01&apos;);        alert(&apos;jquery获取的div：&apos; + $div);    &#125;);&lt;/script&gt;&lt;div id=&quot;div01&quot;&gt;这是一个div&lt;/div&gt;</code></pre><p>入口函数的简写示例代码:</p><pre><code>// 上面ready的写法可以简写成下面的形式：$(function()&#123;    var $div = $(&apos;#div01&apos;);    alert(&apos;jquery获取的div：&apos; + $div);&#125;); </code></pre><hr><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><hr><p>选择器就是快速选择标签元素，获取标签的，选择规则和css样式一样。</p><p>标签选择器、类选择器、id选择器、层级选择器、属性选择器，示例代码:</p><pre><code>$(&apos;#myId&apos;) //选择id为myId的标签$(&apos;.myClass&apos;) // 选择class为myClass的标签$(&apos;li&apos;) //选择所有的li标签$(&apos;#ul1 li span&apos;) //选择id为ul1标签下的所有li标签下的span标签$(&apos;input[name=first]&apos;) // 选择name属性等于first的input标签</code></pre><p>可以使用length属性来判断标签是否选择成功, 如果length大于0表示选择成功，否则选择失败。</p><pre><code>$(function()&#123;    result = $(&quot;div&quot;).length;    alert(result);&#125;);</code></pre><hr><h3 id="选择集过滤"><a href="#选择集过滤" class="headerlink" title="选择集过滤"></a>选择集过滤</h3><hr><p>选择集过滤就是在选择标签的集合里面过滤自己需要的标签。</p><p>选择集过滤的操作：has(选择器名称)方法，表示选取包含指定选择器的标签；eq(索引)方法，表示选取指定索引的标签。</p><p>has方法的示例代码:</p><pre><code>&lt;script&gt;    $(function()&#123;        //  has方法的使用        var $div = $(&quot;div&quot;).has(&quot;#mytext&quot;);        //  设置样式        $div.css(&#123;&quot;background&quot;:&quot;red&quot;&#125;);    &#125;);&lt;/script&gt;&lt;div&gt;    这是第一个div    &lt;input type=&quot;text&quot; id=&quot;mytext&quot;&gt;&lt;/div&gt;&lt;div&gt;    这是第二个div    &lt;input type=&quot;text&quot;&gt;    &lt;input type=&quot;button&quot;&gt;&lt;/div&gt;</code></pre><p>eq方法的示例代码:</p><pre><code>&lt;script&gt;    $(function()&#123;        //  has方法的使用        var $div = $(&quot;div&quot;).has(&quot;#mytext&quot;);        //  设置样式        $div.css(&#123;&quot;background&quot;:&quot;red&quot;&#125;);        //  eq方法的使用        var $div = $(&quot;div&quot;).eq(1);        //  设置样式        $div.css(&#123;&quot;background&quot;:&quot;yellow&quot;&#125;);    &#125;);&lt;/script&gt;&lt;div&gt;    这是第一个div    &lt;input type=&quot;text&quot; id=&quot;mytext&quot;&gt;&lt;/div&gt;&lt;div&gt;    这是第二个div    &lt;input type=&quot;text&quot;&gt;    &lt;input type=&quot;button&quot;&gt;&lt;/div&gt;</code></pre><hr><h3 id="选择集转移"><a href="#选择集转移" class="headerlink" title="选择集转移"></a>选择集转移</h3><hr><p>选择集转移就是以选择的标签为参照，然后获取转移后的标签。</p><p>选择集转移操作：</p><pre><code>$(&apos;#box&apos;).prev(); 表示选择id是box元素的上一个的同级元素$(&apos;#box&apos;).prevAll(); 表示选择id是box元素的上面所有的同级元素$(&apos;#box&apos;).next(); 表示选择id是box元素的下一个的同级元素$(&apos;#box&apos;).nextAll(); 表示选择id是box元素的下面所有的同级元素$(&apos;#box&apos;).parent(); 表示选择id是box元素的父元素$(&apos;#box&apos;).children(); 表示选择id是box元素的所有子元素$(&apos;#box&apos;).siblings(); 表示选择id是box元素的其它同级元素$(&apos;#box&apos;).find(&apos;.myClass&apos;); 表示选择id是box元素的class等于myClass的元素</code></pre><hr><h3 id="获取和设置元素内容"><a href="#获取和设置元素内容" class="headerlink" title="获取和设置元素内容"></a>获取和设置元素内容</h3><hr><p>jquery中的html方法可以获取和设置标签的html内容。</p><pre><code>&lt;script&gt;    $(function()&#123;        var $div = $(&quot;#div1&quot;);        //  获取标签的html内容        var result = $div.html();        alert(result);        //  设置标签的html内容，之前的内容会清除        $div.html(&quot;&lt;span style=&apos;color:red&apos;&gt;你好&lt;/span&gt;&quot;);        //  追加html内容        $div.append(&quot;&lt;span style=&apos;color:red&apos;&gt;你好&lt;/span&gt;&quot;);    &#125;);&lt;/script&gt;&lt;div id=&quot;div1&quot;&gt;    &lt;p&gt;hello&lt;/p&gt;&lt;/div&gt;</code></pre><hr><h3 id="获取和设置元素属性"><a href="#获取和设置元素属性" class="headerlink" title="获取和设置元素属性"></a>获取和设置元素属性</h3><hr><p>使用css方法可以给标签设置样式属性，那么设置标签的其它属性可以使用prop方法了。</p><pre><code>&lt;style&gt;    .a01&#123;        color:red;    &#125;&lt;/style&gt;&lt;script&gt;    $(function()&#123;        var $a = $(&quot;#link01&quot;);        var $input = $(&apos;#input01&apos;)        // 获取元素属性        var sId = $a.prop(&quot;id&quot;);        alert(sId);        // 设置元素属性        $a.prop(&#123;&quot;href&quot;:&quot;http://www.baidu.com&quot;,&quot;title&quot;:&apos;这是去到百度的链接&apos;,&quot;class&quot;:&quot;a01&quot;&#125;);        //  获取value属性        // var sValue = $input.prop(&quot;value&quot;);        // alert(sValue);        // 获取value属性使用val()方法的简写方式        var sValue = $input.val();        alert(sValue);        // 设置value值        $input.val(&quot;222222&quot;);    &#125;)&lt;/script&gt;&lt;a id=&quot;link01&quot;&gt;这是一个链接&lt;/a&gt;&lt;input type=&quot;text&quot; id=&quot;input01&quot; value=&quot;111111&quot;&gt;</code></pre><hr><h3 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h3><hr><p>常用事件</p><pre><code>click() 鼠标单击blur() 元素失去焦点focus() 元素获得焦点mouseover() 鼠标进入（进入子元素也触发）mouseout() 鼠标离开（离开子元素也触发）ready() DOM加载完成</code></pre><p>示例代码:</p><pre><code>&lt;script&gt;    $(function()&#123;        var $li = $(&apos;.list li&apos;);        var $button = $(&apos;#button1&apos;)        var $text = $(&quot;#text1&quot;);        var $div = $(&quot;#div1&quot;)        //  鼠标点击        $li.click(function()&#123;                         // this指的是当前发生事件的对象，但是它是一个原生js对象            // this.style.background = &apos;red&apos;;            // $(this) 指的是当前发生事件的jquery对象            $(this).css(&#123;&apos;background&apos;:&apos;gold&apos;&#125;);            // 获取jquery对象的索引值,通过index() 方法            alert($(this).index());        &#125;);        //  一般和按钮配合使用        $button.click(function()&#123;            alert($text.val());        &#125;);        //  获取焦点        $text.focus(function()&#123;            $(this).css(&#123;&apos;background&apos;:&apos;red&apos;&#125;);        &#125;);        //  失去焦点        $text.blur(function()&#123;            $(this).css(&#123;&apos;background&apos;:&apos;white&apos;&#125;);        &#125;);        //  鼠标进入        $div.mouseover(function()&#123;            $(this).css(&#123;&apos;background&apos;:&apos;gold&apos;&#125;);        &#125;);        //  鼠标离开        $div.mouseout(function() &#123;            $(this).css(&#123;&apos;background&apos;:&apos;white&apos;&#125;);        &#125;);    &#125;);&lt;/script&gt;&lt;div id=&quot;div1&quot;&gt;    &lt;ul class=&quot;list&quot;&gt;        &lt;li&gt;列表文字&lt;/li&gt;        &lt;li&gt;列表文字&lt;/li&gt;        &lt;li&gt;列表文字&lt;/li&gt;    &lt;/ul&gt;    &lt;input type=&quot;text&quot; id=&quot;text1&quot;&gt;    &lt;input type=&quot;button&quot; id=&quot;button1&quot; value=&quot;点击&quot;&gt;&lt;/div&gt;</code></pre><hr><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><hr><p>事件代理就是利用事件冒泡的原理(事件冒泡就是事件会向它的父级一级一级传递),把事件加到父级上，通过判断事件来源，执行相应的子元素的操作，事件代理首先可以极大减少事件绑定次数，提高性能；其次可以让新加入的子元素也可以拥有相同的操作。</p><p>事件冒泡代码:当点击子元素div，它的点击事件会向它父元素传递，也会触发了父元素的点击事件，这就是事件冒泡。</p><pre><code>&lt;script&gt;    $(function()&#123;        var $div1 = $(&apos;#div1&apos;);        var $div2 = $(&apos;#div2&apos;);        $div1.click(function()&#123;            alert($(this).html());        &#125;);         $div2.click(function()&#123;            alert($(this).html());        &#125;);     &#125;);&lt;/script&gt; &lt;div id=&quot;div1&quot; style=&quot;width:200px; height:200px; background: red;&quot;&gt;    &lt;div id=&quot;div2&quot; style=&quot;width:100px; height:100px;background: yellow;&quot;&gt;        哈哈    &lt;/div&gt;&lt;/div&gt;</code></pre><p>事件代理的使用，一般绑定事件的写法:</p><pre><code>$(function()&#123;    $ali = $(&apos;#list li&apos;);    $ali.click(function() &#123;        $(this).css(&#123;background:&apos;red&apos;&#125;);    &#125;);&#125;)&lt;ul id=&quot;list&quot;&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;    &lt;li&gt;3&lt;/li&gt;    &lt;li&gt;4&lt;/li&gt;    &lt;li&gt;5&lt;/li&gt;&lt;/ul&gt;</code></pre><p>事件代理的写法</p><pre><code>$(function()&#123;    $list = $(&apos;#list&apos;);    // 父元素ul 来代理 子元素li的点击事件    $list.delegate(&apos;li&apos;, &apos;click&apos;, function() &#123;        // $(this)表示当前点击的子元素对象        $(this).css(&#123;background:&apos;red&apos;&#125;);    &#125;);&#125;)&lt;ul id=&quot;list&quot;&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;    &lt;li&gt;3&lt;/li&gt;    &lt;li&gt;4&lt;/li&gt;    &lt;li&gt;5&lt;/li&gt;&lt;/ul&gt;</code></pre><p>delegate方法参数说明:</p><pre><code>delegate(childSelector,event,function)//childSelector: 子元素的选择器//event: 事件名称，比如: &apos;click&apos;//function: 当事件触发执行的函数</code></pre><hr><h3 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h3><hr><p>JavaScript中的所有事物都是对象：字符串、数值、数组、函数等都可以认为是对象，此外，JavaScript 允许自定义对象，对象可以拥有属性和方法。</p><p>创建自定义javascript对象有两种方式:通过顶级Object类型来实例化一个对象;通过对象字面量创建一个对象。</p><p>Object类创建对象的示例代码:</p><pre><code>&lt;script&gt;    var person = new Object();    // 添加属性：    person.name = &apos;tom&apos;;    person.age = &apos;25&apos;;    // 添加方法：    person.sayName = function()&#123;        alert(this.name);    &#125;    // 调用属性和方法：    alert(person.age);    person.sayName();&lt;/script&gt;</code></pre><p>对象字面量创建对象的示例代码:</p><pre><code>&lt;script&gt;    var person2 = &#123;        name:&apos;Rose&apos;,        age: 18,        sayName:function()&#123;            alert(&apos;My name is&apos; + this.name);        &#125;    &#125;    // 调用属性和方法：    alert(person2.age);    person2.sayName();&lt;/script&gt;</code></pre><hr><h3 id="json数据"><a href="#json数据" class="headerlink" title="json数据"></a>json数据</h3><hr><p>json本质上是字符串，如果在js中操作json数据，可以将json字符串转化为JavaScript对象。</p><p>示例代码:</p><pre><code>var sJson = &apos;&#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;&apos;;var oPerson = JSON.parse(sJson);// 操作属性alert(oPerson.name);alert(oPerson.age);</code></pre><hr><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><hr><p>ajax 是 <code>Asynchronous JavaScript and XML</code>的简写，ajax一个前后台配合的技术，它可以让 javascript 发送异步的 http 请求，与后台通信进行数据的获取，ajax 最大的优点是实现局部刷新，ajax可以发送http请求，当获取到后台数据的时候更新页面显示数据实现局部刷新，当前端页面想和后台服务器进行数据交互就可以使用ajax了。</p><p>jquery将它封装成了一个方法<code>$.ajax()</code>，我们可以直接用这个方法来执行ajax请求。</p><p>示例代码:</p><pre><code>&lt;script&gt;    $.ajax(&#123;    // 1.url 请求地址    url:&apos;http://t.weather.sojson.com/api/weather/city/101010100&apos;,    // 2.type 请求方式，默认是&apos;GET&apos;，常用的还有&apos;POST&apos;    type:&apos;GET&apos;,    // 3.dataType 设置返回的数据格式，常用的是&apos;json&apos;格式    dataType:&apos;JSON&apos;,    // 4.data 设置发送给服务器的数据, 没有参数不需要设置​    // 5.success 设置请求成功后的回调函数    success:function (response) &#123;        console.log(response);        &#125;,    // 6.error 设置请求失败后的回调函数    error:function () &#123;        alert(&quot;请求失败,请稍后再试!&quot;);    &#125;,    // 7.async 设置是否异步，默认值是&apos;true&apos;，表示异步，一般不用写    async:true&#125;);&lt;/script&gt;</code></pre><p>同步和异步说明：同步是一个ajax请求完成另外一个才可以请求，需要等待上一个ajax请求完成，好比线程同步。异步是多个ajax同时请求，不需要等待其它ajax请求完成，好比线程异步。</p><p><code>$.ajax</code>按照请求方式可以简写成<code>$.get</code>或者<code>$.post</code>方式。示例代码:</p><pre><code>&lt;script&gt;    $(function()&#123;        /*         1. url 请求地址         2. data 设置发送给服务器的数据, 没有参数不需要设置         3. success 设置请求成功后的回调函数         4. dataType 设置返回的数据格式，常用的是&apos;json&apos;格式, 默认智能判断数据格式        */         $.get(&quot;http://t.weather.sojson.com/api/weather/city/101010100&quot;, function(dat,status)&#123;            console.log(dat);            console.log(status);            alert(dat);        &#125;).error(function()&#123;            alert(&quot;网络异常&quot;);        &#125;);        /*         1. url 请求地址         2. data 设置发送给服务器的数据, 没有参数不需要设置         3. success 设置请求成功后的回调函数         4. dataType 设置返回的数据格式，常用的是&apos;json&apos;格式, 默认智能判断数据格式        */         $.post(&quot;test.php&quot;, &#123;&quot;func&quot;: &quot;getNameAndTime&quot;&#125;, function(data)&#123;            alert(data.name);             console.log(data.time);         &#125;, &quot;json&quot;).error(function()&#123;            alert(&quot;网络异常&quot;);        &#125;);     &#125;);&lt;/script&gt;</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
